{"ast":null,"code":"import { flushSync as $eCAIO$flushSync } from \"react-dom\";\nimport { useRef as $eCAIO$useRef, useEffect as $eCAIO$useEffect, useMemo as $eCAIO$useMemo } from \"react\";\nimport { getFocusableTreeWalker as $eCAIO$getFocusableTreeWalker, focusSafely as $eCAIO$focusSafely } from \"@react-aria/focus\";\nimport { useRouter as $eCAIO$useRouter, focusWithoutScrolling as $eCAIO$focusWithoutScrolling, useEvent as $eCAIO$useEvent, scrollIntoViewport as $eCAIO$scrollIntoViewport, scrollIntoView as $eCAIO$scrollIntoView, mergeProps as $eCAIO$mergeProps, isAppleDevice as $eCAIO$isAppleDevice, isMac as $eCAIO$isMac, openLink as $eCAIO$openLink, isScrollable as $eCAIO$isScrollable } from \"@react-aria/utils\";\nimport { getInteractionModality as $eCAIO$getInteractionModality, usePress as $eCAIO$usePress, useLongPress as $eCAIO$useLongPress } from \"@react-aria/interactions\";\nimport { useLocale as $eCAIO$useLocale, useCollator as $eCAIO$useCollator } from \"@react-aria/i18n\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $feb5ffebff200149$export$d3e3bd3e26688c04(e) {\n  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.\n  // On Windows and Ubuntu, Alt + Space has a system wide meaning.\n  return (0, $eCAIO$isAppleDevice)() ? e.altKey : e.ctrlKey;\n}\nfunction $feb5ffebff200149$export$16792effe837dba3(e) {\n  if ((0, $eCAIO$isMac)()) return e.metaKey;\n  return e.ctrlKey;\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n/**\n * Controls how long to wait before clearing the typeahead buffer.\n */\nconst $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000; // 1 second\nfunction $fb3050f43d946246$export$e32c88dfddc6e1d8(options) {\n  let {\n    keyboardDelegate: keyboardDelegate,\n    selectionManager: selectionManager,\n    onTypeSelect: onTypeSelect\n  } = options;\n  let state = (0, $eCAIO$useRef)({\n    search: \"\",\n    timeout: null\n  }).current;\n  let onKeyDown = e => {\n    let character = $fb3050f43d946246$var$getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey || !e.currentTarget.contains(e.target)) return;\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === \" \" && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!(\"continuePropagation\" in e)) e.stopPropagation();\n    }\n    state.search += character;\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n    // If no key found, search from the top.\n    if (key == null) key = keyboardDelegate.getKeyForSearch(state.search);\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) onTypeSelect(key);\n    }\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = \"\";\n    }, $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS);\n  };\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\nfunction $fb3050f43d946246$var$getStringForKey(key) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) return key;\n  return \"\";\n}\nfunction $ae20dd8cbca75726$export$d6daf82dcd84e87c(options) {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref: ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === \"replace\",\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized: isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref,\n    linkBehavior = \"action\"\n  } = options;\n  let {\n    direction: direction\n  } = (0, $eCAIO$useLocale)();\n  let router = (0, $eCAIO$useRouter)();\n  let onKeyDown = e => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === \"Tab\") e.preventDefault();\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current.contains(e.target)) return;\n    const navigateToKey = (key, childFocus) => {\n      if (key != null) {\n        if (manager.isLink(key) && linkBehavior === \"selection\" && selectOnFocus && !(0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) {\n          // Set focused key and re-render synchronously to bring item into view if needed.\n          (0, $eCAIO$flushSync)(() => {\n            manager.setFocusedKey(key, childFocus);\n          });\n          let item = scrollRef.current.querySelector(`[data-key=\"${key}\"]`);\n          router.open(item, e);\n          return;\n        }\n        manager.setFocusedKey(key, childFocus);\n        if (manager.isLink(key) && linkBehavior === \"override\") return;\n        if (e.shiftKey && manager.selectionMode === \"multiple\") manager.extendSelection(key);else if (selectOnFocus && !(0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.replaceSelection(key);\n      }\n    };\n    switch (e.key) {\n      case \"ArrowDown\":\n        if (delegate.getKeyBelow) {\n          var _delegate_getFirstKey, _delegate_getFirstKey1;\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate);\n          if (nextKey == null && shouldFocusWrap) nextKey = (_delegate_getFirstKey1 = delegate.getFirstKey) === null || _delegate_getFirstKey1 === void 0 ? void 0 : _delegate_getFirstKey1.call(delegate, manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"ArrowUp\":\n        if (delegate.getKeyAbove) {\n          var _delegate_getLastKey, _delegate_getLastKey1;\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : (_delegate_getLastKey = delegate.getLastKey) === null || _delegate_getLastKey === void 0 ? void 0 : _delegate_getLastKey.call(delegate);\n          if (nextKey == null && shouldFocusWrap) nextKey = (_delegate_getLastKey1 = delegate.getLastKey) === null || _delegate_getLastKey1 === void 0 ? void 0 : _delegate_getLastKey1.call(delegate, manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"ArrowLeft\":\n        if (delegate.getKeyLeftOf) {\n          var _delegate_getFirstKey2, _delegate_getLastKey2;\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          if (nextKey == null && shouldFocusWrap) nextKey = direction === \"rtl\" ? (_delegate_getFirstKey2 = delegate.getFirstKey) === null || _delegate_getFirstKey2 === void 0 ? void 0 : _delegate_getFirstKey2.call(delegate, manager.focusedKey) : (_delegate_getLastKey2 = delegate.getLastKey) === null || _delegate_getLastKey2 === void 0 ? void 0 : _delegate_getLastKey2.call(delegate, manager.focusedKey);\n          navigateToKey(nextKey, direction === \"rtl\" ? \"first\" : \"last\");\n        }\n        break;\n      case \"ArrowRight\":\n        if (delegate.getKeyRightOf) {\n          var _delegate_getLastKey3, _delegate_getFirstKey3;\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          if (nextKey == null && shouldFocusWrap) nextKey = direction === \"rtl\" ? (_delegate_getLastKey3 = delegate.getLastKey) === null || _delegate_getLastKey3 === void 0 ? void 0 : _delegate_getLastKey3.call(delegate, manager.focusedKey) : (_delegate_getFirstKey3 = delegate.getFirstKey) === null || _delegate_getFirstKey3 === void 0 ? void 0 : _delegate_getFirstKey3.call(delegate, manager.focusedKey);\n          navigateToKey(nextKey, direction === \"rtl\" ? \"last\" : \"first\");\n        }\n        break;\n      case \"Home\":\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, (0, $feb5ffebff200149$export$16792effe837dba3)(e));\n          manager.setFocusedKey(firstKey);\n          if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === \"multiple\") manager.extendSelection(firstKey);else if (selectOnFocus) manager.replaceSelection(firstKey);\n        }\n        break;\n      case \"End\":\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, (0, $feb5ffebff200149$export$16792effe837dba3)(e));\n          manager.setFocusedKey(lastKey);\n          if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === \"multiple\") manager.extendSelection(lastKey);else if (selectOnFocus) manager.replaceSelection(lastKey);\n        }\n        break;\n      case \"PageDown\":\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"PageUp\":\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"a\":\n        if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && manager.selectionMode === \"multiple\" && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case \"Escape\":\n        e.preventDefault();\n        if (!disallowEmptySelection) manager.clearSelection();\n        break;\n      case \"Tab\":\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) ref.current.focus();else {\n            let walker = (0, $eCAIO$getFocusableTreeWalker)(ref.current, {\n              tabbable: true\n            });\n            let next;\n            let last;\n            do {\n              last = walker.lastChild();\n              if (last) next = last;\n            } while (last);\n            if (next && !next.contains(document.activeElement)) (0, $eCAIO$focusWithoutScrolling)(next);\n          }\n          break;\n        }\n    }\n  };\n  // Store the scroll position so we can restore it later.\n  let scrollPos = (0, $eCAIO$useRef)({\n    top: 0,\n    left: 0\n  });\n  (0, $eCAIO$useEvent)(scrollRef, \"scroll\", isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n  let onFocus = e => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) manager.setFocused(false);\n      return;\n    }\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) return;\n    manager.setFocused(true);\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = key => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) manager.replaceSelection(key);\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget;\n      var _manager_lastSelectedKey, _manager_firstSelectedKey;\n      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) navigateToFirstKey((_manager_lastSelectedKey = manager.lastSelectedKey) !== null && _manager_lastSelectedKey !== void 0 ? _manager_lastSelectedKey : delegate.getLastKey());else navigateToFirstKey((_manager_firstSelectedKey = manager.firstSelectedKey) !== null && _manager_firstSelectedKey !== void 0 ? _manager_firstSelectedKey : delegate.getFirstKey());\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n    }\n    if (!isVirtualized && manager.focusedKey != null) {\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`);\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection, or the collection itself.\n        if (!element.contains(document.activeElement)) (0, $eCAIO$focusWithoutScrolling)(element);\n        let modality = (0, $eCAIO$getInteractionModality)();\n        if (modality === \"keyboard\") (0, $eCAIO$scrollIntoViewport)(element, {\n          containingElement: ref.current\n        });\n      }\n    }\n  };\n  let onBlur = e => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget)) manager.setFocused(false);\n  };\n  const autoFocusRef = (0, $eCAIO$useRef)(autoFocus);\n  (0, $eCAIO$useEffect)(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === \"first\") focusedKey = delegate.getFirstKey();\n      if (autoFocus === \"last\") focusedKey = delegate.getLastKey();\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) focusedKey = selectedKeys.values().next().value;\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) (0, $eCAIO$focusSafely)(ref.current);\n    }\n    autoFocusRef.current = false;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  let lastFocusedKey = (0, $eCAIO$useRef)(manager.focusedKey);\n  (0, $eCAIO$useEffect)(() => {\n    let modality = (0, $eCAIO$getInteractionModality)();\n    if (manager.isFocused && manager.focusedKey != null && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)) {\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`);\n      if (element && modality === \"keyboard\") {\n        if (!isVirtualized) (0, $eCAIO$scrollIntoView)(scrollRef.current, element);\n        (0, $eCAIO$scrollIntoViewport)(element, {\n          containingElement: ref.current\n        });\n      }\n    }\n    // If the focused key becomes null (e.g. the last item is deleted), focus the whole collection.\n    if (manager.isFocused && manager.focusedKey == null && lastFocusedKey.current != null) (0, $eCAIO$focusSafely)(ref.current);\n    lastFocusedKey.current = manager.focusedKey;\n  }, [isVirtualized, scrollRef, manager.focusedKey, manager.isFocused, ref]);\n  let handlers = {\n    onKeyDown: onKeyDown,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (scrollRef.current === e.target)\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n    }\n  };\n  let {\n    typeSelectProps: typeSelectProps\n  } = (0, $fb3050f43d946246$export$e32c88dfddc6e1d8)({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n  if (!disallowTypeAhead) handlers = (0, $eCAIO$mergeProps)(typeSelectProps, handlers);\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex;\n  if (!shouldUseVirtualFocus) tabIndex = manager.focusedKey == null ? 0 : -1;\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex: tabIndex\n    }\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $880e95eb8b93ba9a$export$ecf600387e221c37(options) {\n  let {\n    selectionManager: manager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    focus: focus,\n    isDisabled: isDisabled,\n    onAction: onAction,\n    allowsDifferentPressOrigin: allowsDifferentPressOrigin,\n    linkBehavior = \"action\"\n  } = options;\n  let router = (0, $eCAIO$useRouter)();\n  let onSelect = e => {\n    if (e.pointerType === \"keyboard\" && (0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.toggleSelection(key);else {\n      if (manager.selectionMode === \"none\") return;\n      if (manager.isLink(key)) {\n        if (linkBehavior === \"selection\") {\n          router.open(ref.current, e);\n          // Always set selected keys back to what they were so that select and combobox close.\n          manager.setSelectedKeys(manager.selectedKeys);\n          return;\n        } else if (linkBehavior === \"override\" || linkBehavior === \"none\") return;\n      }\n      if (manager.selectionMode === \"single\") {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) manager.toggleSelection(key);else manager.replaceSelection(key);\n      } else if (e && e.shiftKey) manager.extendSelection(key);else if (manager.selectionBehavior === \"toggle\" || e && ((0, $feb5ffebff200149$export$16792effe837dba3)(e) || e.pointerType === \"touch\" || e.pointerType === \"virtual\"))\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);else manager.replaceSelection(key);\n    }\n  };\n  // Focus the associated DOM node when this item becomes the focusedKey\n  (0, $eCAIO$useEffect)(() => {\n    let isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus) {\n      if (focus) focus();else if (document.activeElement !== ref.current) (0, $eCAIO$focusSafely)(ref.current);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n  isDisabled = isDisabled || manager.isDisabled(key);\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps = {};\n  if (!shouldUseVirtualFocus && !isDisabled) itemProps = {\n    tabIndex: key === manager.focusedKey ? 0 : -1,\n    onFocus(e) {\n      if (e.target === ref.current) manager.setFocusedKey(key);\n    }\n  };else if (isDisabled) itemProps.onMouseDown = e => {\n    // Prevent focus going to the body when clicking on a disabled item.\n    e.preventDefault();\n  };\n  // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.\n  // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.\n  // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.\n  // With touch, onAction occurs on single tap, and long press enters selection mode.\n  let isLinkOverride = manager.isLink(key) && linkBehavior === \"override\";\n  let hasLinkAction = manager.isLink(key) && linkBehavior !== \"selection\" && linkBehavior !== \"none\";\n  let allowsSelection = !isDisabled && manager.canSelectItem(key) && !isLinkOverride;\n  let allowsActions = (onAction || hasLinkAction) && !isDisabled;\n  let hasPrimaryAction = allowsActions && (manager.selectionBehavior === \"replace\" ? !allowsSelection : !allowsSelection || manager.isEmpty);\n  let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === \"replace\";\n  let hasAction = hasPrimaryAction || hasSecondaryAction;\n  let modality = (0, $eCAIO$useRef)(null);\n  let longPressEnabled = hasAction && allowsSelection;\n  let longPressEnabledOnPressStart = (0, $eCAIO$useRef)(false);\n  let hadPrimaryActionOnPressStart = (0, $eCAIO$useRef)(false);\n  let performAction = e => {\n    if (onAction) onAction();\n    if (hasLinkAction) router.open(ref.current, e);\n  };\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  let itemPressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = e => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === \"keyboard\" && (!hasAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);\n    };\n    // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)\n    // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)\n    if (!allowsDifferentPressOrigin) itemPressProps.onPress = e => {\n      if (hasPrimaryAction || hasSecondaryAction && e.pointerType !== \"mouse\") {\n        if (e.pointerType === \"keyboard\" && !$880e95eb8b93ba9a$var$isActionKey()) return;\n        performAction(e);\n      } else if (e.pointerType !== \"keyboard\" && allowsSelection) onSelect(e);\n    };else {\n      itemPressProps.onPressUp = hasPrimaryAction ? null : e => {\n        if (e.pointerType !== \"keyboard\" && allowsSelection) onSelect(e);\n      };\n      itemPressProps.onPress = hasPrimaryAction ? performAction : null;\n    }\n  } else {\n    itemPressProps.onPressStart = e => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n      // Select on mouse down unless there is a primary action which will occur on mouse up.\n      // For keyboard, select on key down. If there is an action, the Space key selects on key down,\n      // and the Enter key performs onAction on key up.\n      if (allowsSelection && (e.pointerType === \"mouse\" && !hasPrimaryAction || e.pointerType === \"keyboard\" && (!allowsActions || $880e95eb8b93ba9a$var$isSelectionKey()))) onSelect(e);\n    };\n    itemPressProps.onPress = e => {\n      // Selection occurs on touch up. Primary actions always occur on pointer up.\n      // Both primary and secondary actions occur on Enter key up. The only exception\n      // is secondary actions, which occur on double click with a mouse.\n      if (e.pointerType === \"touch\" || e.pointerType === \"pen\" || e.pointerType === \"virtual\" || e.pointerType === \"keyboard\" && hasAction && $880e95eb8b93ba9a$var$isActionKey() || e.pointerType === \"mouse\" && hadPrimaryActionOnPressStart.current) {\n        if (hasAction) performAction(e);else if (allowsSelection) onSelect(e);\n      }\n    };\n  }\n  itemProps[\"data-key\"] = key;\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $eCAIO$usePress)(itemPressProps);\n  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n  let onDoubleClick = hasSecondaryAction ? e => {\n    if (modality.current === \"mouse\") {\n      e.stopPropagation();\n      e.preventDefault();\n      performAction(e);\n    }\n  } : undefined;\n  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  let {\n    longPressProps: longPressProps\n  } = (0, $eCAIO$useLongPress)({\n    isDisabled: !longPressEnabled,\n    onLongPress(e) {\n      if (e.pointerType === \"touch\") {\n        onSelect(e);\n        manager.setSelectionBehavior(\"toggle\");\n      }\n    }\n  });\n  // Prevent native drag and drop on long press if we also select on long press.\n  // Once the user is in selection mode, they can long press again to drag.\n  // Use a capturing listener to ensure this runs before useDrag, regardless of\n  // the order the props get merged.\n  let onDragStartCapture = e => {\n    if (modality.current === \"touch\" && longPressEnabledOnPressStart.current) e.preventDefault();\n  };\n  // Prevent default on link clicks so that we control exactly\n  // when they open (to match selection behavior).\n  let onClick = manager.isLink(key) ? e => {\n    if (!(0, $eCAIO$openLink).isOpening) e.preventDefault();\n  } : undefined;\n  return {\n    itemProps: (0, $eCAIO$mergeProps)(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, longPressEnabled ? longPressProps : {}, {\n      onDoubleClick: onDoubleClick,\n      onDragStartCapture: onDragStartCapture,\n      onClick: onClick\n    }),\n    isPressed: isPressed,\n    isSelected: manager.isSelected(key),\n    isFocused: manager.isFocused && manager.focusedKey === key,\n    isDisabled: isDisabled,\n    allowsSelection: allowsSelection,\n    hasAction: hasAction\n  };\n}\nfunction $880e95eb8b93ba9a$var$isActionKey() {\n  let event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === \"Enter\";\n}\nfunction $880e95eb8b93ba9a$var$isSelectionKey() {\n  let event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === \" \" || (event === null || event === void 0 ? void 0 : event.code) === \"Space\";\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $2a25aae57d74318e$export$a05409b8bb224a5a {\n  getNextKey(key) {\n    key = this.collection.getKeyAfter(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === \"item\" && !this.disabledKeys.has(key)) return key;\n      key = this.collection.getKeyAfter(key);\n    }\n    return null;\n  }\n  getPreviousKey(key) {\n    key = this.collection.getKeyBefore(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === \"item\" && !this.disabledKeys.has(key)) return key;\n      key = this.collection.getKeyBefore(key);\n    }\n    return null;\n  }\n  findKey(key, nextKey, shouldSkip) {\n    let item = this.getItem(key);\n    if (!item) return null;\n    // Find the item above or below in the same column.\n    let prevRect = item.getBoundingClientRect();\n    do {\n      key = nextKey(key);\n      item = this.getItem(key);\n    } while (item && shouldSkip(prevRect, item.getBoundingClientRect()));\n    return key;\n  }\n  isSameRow(prevRect, itemRect) {\n    return prevRect.top === itemRect.top || prevRect.left !== itemRect.left;\n  }\n  isSameColumn(prevRect, itemRect) {\n    return prevRect.left === itemRect.left || prevRect.top !== itemRect.top;\n  }\n  getKeyBelow(key) {\n    if (this.layout === \"grid\" && this.orientation === \"vertical\") return this.findKey(key, key => this.getNextKey(key), this.isSameRow);else return this.getNextKey(key);\n  }\n  getKeyAbove(key) {\n    if (this.layout === \"grid\" && this.orientation === \"vertical\") return this.findKey(key, key => this.getPreviousKey(key), this.isSameRow);else return this.getPreviousKey(key);\n  }\n  getNextColumn(key, right) {\n    return right ? this.getPreviousKey(key) : this.getNextKey(key);\n  }\n  getKeyRightOf(key) {\n    if (this.layout === \"grid\") {\n      if (this.orientation === \"vertical\") return this.getNextColumn(key, this.direction === \"rtl\");else return this.findKey(key, key => this.getNextColumn(key, this.direction === \"rtl\"), this.isSameColumn);\n    } else if (this.orientation === \"horizontal\") return this.getNextColumn(key, this.direction === \"rtl\");\n    return null;\n  }\n  getKeyLeftOf(key) {\n    if (this.layout === \"grid\") {\n      if (this.orientation === \"vertical\") return this.getNextColumn(key, this.direction === \"ltr\");else return this.findKey(key, key => this.getNextColumn(key, this.direction === \"ltr\"), this.isSameColumn);\n    } else if (this.orientation === \"horizontal\") return this.getNextColumn(key, this.direction === \"ltr\");\n    return null;\n  }\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === \"item\" && !this.disabledKeys.has(key)) return key;\n      key = this.collection.getKeyAfter(key);\n    }\n    return null;\n  }\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === \"item\" && !this.disabledKeys.has(key)) return key;\n      key = this.collection.getKeyBefore(key);\n    }\n    return null;\n  }\n  getItem(key) {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n  getKeyPageAbove(key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) return null;\n    if (!(0, $eCAIO$isScrollable)(menu)) return this.getFirstKey();\n    let containerRect = menu.getBoundingClientRect();\n    let itemRect = item.getBoundingClientRect();\n    if (this.orientation === \"horizontal\") {\n      let containerX = containerRect.x - menu.scrollLeft;\n      let pageX = Math.max(0, itemRect.x - containerX + itemRect.width - containerRect.width);\n      while (item && itemRect.x - containerX > pageX) {\n        key = this.getKeyAbove(key);\n        item = key == null ? null : this.getItem(key);\n        itemRect = item === null || item === void 0 ? void 0 : item.getBoundingClientRect();\n      }\n    } else {\n      let containerY = containerRect.y - menu.scrollTop;\n      let pageY = Math.max(0, itemRect.y - containerY + itemRect.height - containerRect.height);\n      while (item && itemRect.y - containerY > pageY) {\n        key = this.getKeyAbove(key);\n        item = key == null ? null : this.getItem(key);\n        itemRect = item === null || item === void 0 ? void 0 : item.getBoundingClientRect();\n      }\n    }\n    return key !== null && key !== void 0 ? key : this.getFirstKey();\n  }\n  getKeyPageBelow(key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) return null;\n    if (!(0, $eCAIO$isScrollable)(menu)) return this.getLastKey();\n    let containerRect = menu.getBoundingClientRect();\n    let itemRect = item.getBoundingClientRect();\n    if (this.orientation === \"horizontal\") {\n      let containerX = containerRect.x - menu.scrollLeft;\n      let pageX = Math.min(menu.scrollWidth, itemRect.x - containerX - itemRect.width + containerRect.width);\n      while (item && itemRect.x - containerX < pageX) {\n        key = this.getKeyBelow(key);\n        item = key == null ? null : this.getItem(key);\n        itemRect = item === null || item === void 0 ? void 0 : item.getBoundingClientRect();\n      }\n    } else {\n      let containerY = containerRect.y - menu.scrollTop;\n      let pageY = Math.min(menu.scrollHeight, itemRect.y - containerY - itemRect.height + containerRect.height);\n      while (item && itemRect.y - containerY < pageY) {\n        key = this.getKeyBelow(key);\n        item = key == null ? null : this.getItem(key);\n        itemRect = item === null || item === void 0 ? void 0 : item.getBoundingClientRect();\n      }\n    }\n    return key !== null && key !== void 0 ? key : this.getLastKey();\n  }\n  getKeyForSearch(search, fromKey) {\n    if (!this.collator) return null;\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) return key;\n      key = this.getKeyBelow(key);\n    }\n    return null;\n  }\n  constructor(...args) {\n    if (args.length === 1) {\n      let opts = args[0];\n      this.collection = opts.collection;\n      this.ref = opts.ref;\n      this.collator = opts.collator;\n      this.disabledKeys = opts.disabledKeys || new Set();\n      this.orientation = opts.orientation;\n      this.direction = opts.direction;\n      this.layout = opts.layout || \"stack\";\n    } else {\n      this.collection = args[0];\n      this.disabledKeys = args[1];\n      this.ref = args[2];\n      this.collator = args[3];\n      this.layout = \"stack\";\n      this.orientation = \"vertical\";\n    }\n    // If this is a vertical stack, remove the left/right methods completely\n    // so they aren't called by useDroppableCollection.\n    if (this.layout === \"stack\" && this.orientation === \"vertical\") {\n      this.getKeyLeftOf = undefined;\n      this.getKeyRightOf = undefined;\n    }\n  }\n}\nfunction $982254629710d113$export$b95089534ab7c1fd(props) {\n  let {\n    selectionManager: selectionManager,\n    collection: collection,\n    disabledKeys: disabledKeys,\n    ref: ref,\n    keyboardDelegate: keyboardDelegate\n  } = props;\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = (0, $eCAIO$useCollator)({\n    usage: \"search\",\n    sensitivity: \"base\"\n  });\n  let disabledBehavior = selectionManager.disabledBehavior;\n  let delegate = (0, $eCAIO$useMemo)(() => keyboardDelegate || new (0, $2a25aae57d74318e$export$a05409b8bb224a5a)(collection, disabledBehavior === \"selection\" ? new Set() : disabledKeys, ref, collator), [keyboardDelegate, collection, disabledKeys, ref, collator, disabledBehavior]);\n  let {\n    collectionProps: collectionProps\n  } = (0, $ae20dd8cbca75726$export$d6daf82dcd84e87c)({\n    ...props,\n    ref: ref,\n    selectionManager: selectionManager,\n    keyboardDelegate: delegate\n  });\n  return {\n    listProps: collectionProps\n  };\n}\nexport { $ae20dd8cbca75726$export$d6daf82dcd84e87c as useSelectableCollection, $880e95eb8b93ba9a$export$ecf600387e221c37 as useSelectableItem, $982254629710d113$export$b95089534ab7c1fd as useSelectableList, $2a25aae57d74318e$export$a05409b8bb224a5a as ListKeyboardDelegate, $fb3050f43d946246$export$e32c88dfddc6e1d8 as useTypeSelect };","map":{"version":3,"names":["$feb5ffebff200149$export$d3e3bd3e26688c04","e","$eCAIO$isAppleDevice","altKey","ctrlKey","$feb5ffebff200149$export$16792effe837dba3","$eCAIO$isMac","metaKey","$fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS","$fb3050f43d946246$export$e32c88dfddc6e1d8","options","keyboardDelegate","selectionManager","onTypeSelect","state","$eCAIO$useRef","search","timeout","current","onKeyDown","character","$fb3050f43d946246$var$getStringForKey","key","currentTarget","contains","target","trim","length","preventDefault","stopPropagation","getKeyForSearch","focusedKey","setFocusedKey","clearTimeout","setTimeout","typeSelectProps","onKeyDownCapture","test","$ae20dd8cbca75726$export$d6daf82dcd84e87c","manager","delegate","ref","autoFocus","shouldFocusWrap","disallowEmptySelection","disallowSelectAll","selectOnFocus","selectionBehavior","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","isVirtualized","scrollRef","linkBehavior","direction","$eCAIO$useLocale","router","$eCAIO$useRouter","navigateToKey","childFocus","isLink","$eCAIO$flushSync","item","querySelector","open","shiftKey","selectionMode","extendSelection","replaceSelection","getKeyBelow","_delegate_getFirstKey","_delegate_getFirstKey1","nextKey","getFirstKey","call","getKeyAbove","_delegate_getLastKey","_delegate_getLastKey1","getLastKey","getKeyLeftOf","_delegate_getFirstKey2","_delegate_getLastKey2","getKeyRightOf","_delegate_getLastKey3","_delegate_getFirstKey3","firstKey","lastKey","getKeyPageBelow","getKeyPageAbove","selectAll","clearSelection","focus","walker","$eCAIO$getFocusableTreeWalker","tabbable","next","last","lastChild","document","activeElement","$eCAIO$focusWithoutScrolling","scrollPos","top","left","$eCAIO$useEvent","scrollTop","scrollLeft","onFocus","isFocused","setFocused","navigateToFirstKey","relatedTarget","_manager_lastSelectedKey","_manager_firstSelectedKey","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","firstSelectedKey","element","modality","$eCAIO$getInteractionModality","$eCAIO$scrollIntoViewport","containingElement","onBlur","autoFocusRef","$eCAIO$useEffect","selectedKeys","size","values","value","$eCAIO$focusSafely","lastFocusedKey","$eCAIO$scrollIntoView","handlers","onMouseDown","$eCAIO$mergeProps","tabIndex","collectionProps","$880e95eb8b93ba9a$export$ecf600387e221c37","shouldSelectOnPressUp","isDisabled","onAction","allowsDifferentPressOrigin","onSelect","pointerType","toggleSelection","setSelectedKeys","isSelected","childFocusStrategy","itemProps","isLinkOverride","hasLinkAction","allowsSelection","canSelectItem","allowsActions","hasPrimaryAction","isEmpty","hasSecondaryAction","hasAction","longPressEnabled","longPressEnabledOnPressStart","hadPrimaryActionOnPressStart","performAction","itemPressProps","onPressStart","$880e95eb8b93ba9a$var$isSelectionKey","onPress","$880e95eb8b93ba9a$var$isActionKey","onPressUp","preventFocusOnPress","pressProps","isPressed","$eCAIO$usePress","onDoubleClick","undefined","longPressProps","$eCAIO$useLongPress","onLongPress","setSelectionBehavior","onDragStartCapture","onClick","$eCAIO$openLink","isOpening","event","window","code","$2a25aae57d74318e$export$a05409b8bb224a5a","getNextKey","collection","getKeyAfter","getItem","type","disabledKeys","has","getPreviousKey","getKeyBefore","findKey","shouldSkip","prevRect","getBoundingClientRect","isSameRow","itemRect","isSameColumn","layout","orientation","getNextColumn","right","menu","$eCAIO$isScrollable","containerRect","containerX","x","pageX","Math","max","width","containerY","y","pageY","height","min","scrollWidth","scrollHeight","fromKey","collator","substring","textValue","slice","compare","constructor","args","opts","Set","$982254629710d113$export$b95089534ab7c1fd","props","$eCAIO$useCollator","usage","sensitivity","disabledBehavior","$eCAIO$useMemo","listProps"],"sources":["/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/index.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/useSelectableCollection.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/utils.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/useTypeSelect.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/useSelectableItem.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/useSelectableList.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/ListKeyboardDelegate.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useSelectableCollection} from './useSelectableCollection';\nexport {useSelectableItem} from './useSelectableItem';\nexport {useSelectableList} from './useSelectableList';\nexport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nexport {useTypeSelect} from './useTypeSelect';\n\nexport type {AriaSelectableCollectionOptions, SelectableCollectionAria} from './useSelectableCollection';\nexport type {AriaSelectableListOptions, SelectableListAria} from './useSelectableList';\nexport type {SelectableItemOptions, SelectableItemStates, SelectableItemAria} from './useSelectableItem';\nexport type {AriaTypeSelectOptions, TypeSelectAria} from './useTypeSelect';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, FocusStrategy, KeyboardDelegate} from '@react-types/shared';\nimport {flushSync} from 'react-dom';\nimport {FocusEvent, Key, KeyboardEvent, RefObject, useEffect, useRef} from 'react';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {focusWithoutScrolling, mergeProps, scrollIntoView, scrollIntoViewport, useEvent, useRouter} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useLocale} from '@react-aria/i18n';\nimport {useTypeSelect} from './useTypeSelect';\n\nexport interface AriaSelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean,\n  /**\n   * Whether the collection items are contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * The ref attached to the scrollable body. Used to provide automatic scrolling on item focus for non-virtualized collections.\n   * If not provided, defaults to the collection ref.\n   */\n  scrollRef?: RefObject<HTMLElement>,\n  /**\n   * The behavior of links in the collection.\n   * - 'action': link behaves like onAction.\n   * - 'selection': link follows selection interactions (e.g. if URL drives selection).\n   * - 'override': links override all other interactions (link items are not selectable).\n   * @default 'action'\n   */\n  linkBehavior?: 'action' | 'selection' | 'override'\n}\n\nexport interface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: DOMAttributes\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: AriaSelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref,\n    linkBehavior = 'action'\n  } = options;\n  let {direction} = useLocale();\n  let router = useRouter();\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current.contains(e.target as Element)) {\n      return;\n    }\n\n    const navigateToKey = (key: Key | undefined, childFocus?: FocusStrategy) => {\n      if (key != null) {\n        if (manager.isLink(key) && linkBehavior === 'selection' && selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          // Set focused key and re-render synchronously to bring item into view if needed.\n          flushSync(() => {\n            manager.setFocusedKey(key, childFocus);\n          });\n\n          let item = scrollRef.current.querySelector(`[data-key=\"${key}\"]`);\n          router.open(item, e);\n\n          return;\n        }\n\n        manager.setFocusedKey(key, childFocus);\n\n        if (manager.isLink(key) && linkBehavior === 'override') {\n          return;\n        }\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = direction === 'rtl' ? delegate.getFirstKey?.(manager.focusedKey) : delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = direction === 'rtl' ? delegate.getLastKey?.(manager.focusedKey) : delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n            let next: FocusableElement;\n            let last: FocusableElement;\n            do {\n              last = walker.lastChild() as FocusableElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              focusWithoutScrolling(next);\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  // Store the scroll position so we can restore it later.\n  let scrollPos = useRef({top: 0, left: 0});\n  useEvent(scrollRef, 'scroll', isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = (key: Key | undefined) => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) {\n            manager.replaceSelection(key);\n          }\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        navigateToFirstKey(manager.lastSelectedKey ?? delegate.getLastKey());\n      } else {\n        navigateToFirstKey(manager.firstSelectedKey ?? delegate.getFirstKey());\n      }\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n    }\n\n    if (!isVirtualized && manager.focusedKey != null) {\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection, or the collection itself.\n        if (!element.contains(document.activeElement)) {\n          focusWithoutScrolling(element);\n        }\n\n        let modality = getInteractionModality();\n        if (modality === 'keyboard') {\n          scrollIntoViewport(element, {containingElement: ref.current});\n        }\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  const autoFocusRef = useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey();\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) {\n        focusSafely(ref.current);\n      }\n    }\n    autoFocusRef.current = false;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  let lastFocusedKey = useRef(manager.focusedKey);\n  useEffect(() => {\n    let modality = getInteractionModality();\n    if (manager.isFocused && manager.focusedKey != null && scrollRef?.current) {\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element && modality === 'keyboard') {\n        if (!isVirtualized) {\n          scrollIntoView(scrollRef.current, element);\n        }\n        scrollIntoViewport(element, {containingElement: ref.current});\n      }\n    }\n\n    // If the focused key becomes null (e.g. the last item is deleted), focus the whole collection.\n    if (manager.isFocused && manager.focusedKey == null && lastFocusedKey.current != null) {\n      focusSafely(ref.current);\n    }\n\n    lastFocusedKey.current = manager.focusedKey;\n  }, [isVirtualized, scrollRef, manager.focusedKey, manager.isFocused, ref]);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (scrollRef.current === e.target) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isAppleDevice, isMac} from '@react-aria/utils';\n\ninterface Event {\n  altKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean\n}\n\nexport function isNonContiguousSelectionModifier(e: Event) {\n  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.\n  // On Windows and Ubuntu, Alt + Space has a system wide meaning.\n  return isAppleDevice() ? e.altKey : e.ctrlKey;\n}\n\nexport function isCtrlKeyPressed(e: Event) {\n  if (isMac()) {\n    return e.metaKey;\n  }\n\n  return e.ctrlKey;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, KeyboardDelegate} from '@react-types/shared';\nimport {Key, KeyboardEvent, useRef} from 'react';\nimport {MultipleSelectionManager} from '@react-stately/selection';\n\n/**\n * Controls how long to wait before clearing the typeahead buffer.\n */\nconst TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000; // 1 second\n\nexport interface AriaTypeSelectOptions {\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * Called when an item is focused by typing.\n   */\n  onTypeSelect?: (key: Key) => void\n}\n\nexport interface TypeSelectAria {\n  /**\n   * Props to be spread on the owner of the options.\n   */\n  typeSelectProps: DOMAttributes\n}\n\n/**\n * Handles typeahead interactions with collections.\n */\nexport function useTypeSelect(options: AriaTypeSelectOptions): TypeSelectAria {\n  let {keyboardDelegate, selectionManager, onTypeSelect} = options;\n  let state = useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    let character = getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey || !e.currentTarget.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) {\n        e.stopPropagation();\n      }\n    }\n\n    state.search += character;\n\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n\n    // If no key found, search from the top.\n    if (key == null) {\n      key = keyboardDelegate.getKeyForSearch(state.search);\n    }\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) {\n        onTypeSelect(key);\n      }\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, TYPEAHEAD_DEBOUNCE_WAIT_MS);\n  };\n\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction getStringForKey(key: string) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n    return key;\n  }\n\n  return '';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, LongPressEvent, PressEvent} from '@react-types/shared';\nimport {focusSafely} from '@react-aria/focus';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {Key, RefObject, useEffect, useRef} from 'react';\nimport {mergeProps, openLink, useRouter} from '@react-aria/utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {PressProps, useLongPress, usePress} from '@react-aria/interactions';\n\nexport interface SelectableItemOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A unique key for the item.\n   */\n  key: Key,\n  /**\n   * Ref to the item.\n   */\n  ref: RefObject<FocusableElement>,\n  /**\n   * By default, selection occurs on pointer down. This can be strange if selecting an\n   * item causes the UI to disappear immediately (e.g. menus).\n   */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Whether selection requires the pointer/mouse down and up events to occur on the same target or triggers selection on\n   * the target of the pointer/mouse up event.\n   */\n  allowsDifferentPressOrigin?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Function to focus the item.\n   */\n  focus?: () => void,\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /** Whether the item is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void,\n  /**\n   * The behavior of links in the collection.\n   * - 'action': link behaves like onAction.\n   * - 'selection': link follows selection interactions (e.g. if URL drives selection).\n   * - 'override': links override all other interactions (link items are not selectable).\n   * - 'none': links are disabled for both selection and actions (e.g. handled elsewhere).\n   * @default 'action'\n   */\n  linkBehavior?: 'action' | 'selection' | 'override' | 'none'\n}\n\nexport interface SelectableItemStates {\n  /** Whether the item is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the item is currently selected. */\n  isSelected: boolean,\n  /** Whether the item is currently focused. */\n  isFocused: boolean,\n  /**\n   * Whether the item is non-interactive, i.e. both selection and actions are disabled and the item may\n   * not be focused. Dependent on `disabledKeys` and `disabledBehavior`.\n   */\n  isDisabled: boolean,\n  /**\n   * Whether the item may be selected, dependent on `selectionMode`, `disabledKeys`, and `disabledBehavior`.\n   */\n  allowsSelection: boolean,\n  /**\n   * Whether the item has an action, dependent on `onAction`, `disabledKeys`,\n   * and `disabledBehavior`. It may also change depending on the current selection state\n   * of the list (e.g. when selection is primary). This can be used to enable or disable hover\n   * styles or other visual indications of interactivity.\n   */\n  hasAction: boolean\n}\n\nexport interface SelectableItemAria extends SelectableItemStates {\n  /**\n   * Props to be spread on the item root node.\n   */\n  itemProps: DOMAttributes\n}\n\n/**\n * Handles interactions with an item in a selectable collection.\n */\nexport function useSelectableItem(options: SelectableItemOptions): SelectableItemAria {\n  let {\n    selectionManager: manager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    shouldUseVirtualFocus,\n    focus,\n    isDisabled,\n    onAction,\n    allowsDifferentPressOrigin,\n    linkBehavior = 'action'\n  } = options;\n  let router = useRouter();\n\n  let onSelect = (e: PressEvent | LongPressEvent | PointerEvent) => {\n    if (e.pointerType === 'keyboard' && isNonContiguousSelectionModifier(e)) {\n      manager.toggleSelection(key);\n    } else {\n      if (manager.selectionMode === 'none') {\n        return;\n      }\n\n      if (manager.isLink(key)) {\n        if (linkBehavior === 'selection') {\n          router.open(ref.current, e);\n          // Always set selected keys back to what they were so that select and combobox close.\n          manager.setSelectedKeys(manager.selectedKeys);\n          return;\n        } else if (linkBehavior === 'override' || linkBehavior === 'none') {\n          return;\n        }\n      }\n\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) {\n          manager.toggleSelection(key);\n        } else {\n          manager.replaceSelection(key);\n        }\n      } else if (e && e.shiftKey) {\n        manager.extendSelection(key);\n      } else if (manager.selectionBehavior === 'toggle' || (e && (isCtrlKeyPressed(e) || e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);\n      } else {\n        manager.replaceSelection(key);\n      }\n    }\n  };\n\n  // Focus the associated DOM node when this item becomes the focusedKey\n  useEffect(() => {\n    let isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus) {\n      if (focus) {\n        focus();\n      } else if (document.activeElement !== ref.current) {\n        focusSafely(ref.current);\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n\n  isDisabled = isDisabled || manager.isDisabled(key);\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps: SelectableItemAria['itemProps'] = {};\n  if (!shouldUseVirtualFocus && !isDisabled) {\n    itemProps = {\n      tabIndex: key === manager.focusedKey ? 0 : -1,\n      onFocus(e) {\n        if (e.target === ref.current) {\n          manager.setFocusedKey(key);\n        }\n      }\n    };\n  } else if (isDisabled) {\n    itemProps.onMouseDown = (e) => {\n      // Prevent focus going to the body when clicking on a disabled item.\n      e.preventDefault();\n    };\n  }\n\n  // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.\n  // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.\n  // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.\n  // With touch, onAction occurs on single tap, and long press enters selection mode.\n  let isLinkOverride = manager.isLink(key) && linkBehavior === 'override';\n  let hasLinkAction = manager.isLink(key) && linkBehavior !== 'selection' && linkBehavior !== 'none';\n  let allowsSelection = !isDisabled && manager.canSelectItem(key) && !isLinkOverride;\n  let allowsActions = (onAction || hasLinkAction) && !isDisabled;\n  let hasPrimaryAction = allowsActions && (\n    manager.selectionBehavior === 'replace'\n      ? !allowsSelection\n      : !allowsSelection || manager.isEmpty\n  );\n  let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === 'replace';\n  let hasAction = hasPrimaryAction || hasSecondaryAction;\n  let modality = useRef(null);\n\n  let longPressEnabled = hasAction && allowsSelection;\n  let longPressEnabledOnPressStart = useRef(false);\n  let hadPrimaryActionOnPressStart = useRef(false);\n\n  let performAction = (e) => {\n    if (onAction) {\n      onAction();\n    }\n\n    if (hasLinkAction) {\n      router.open(ref.current, e);\n    }\n  };\n\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  let itemPressProps: PressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === 'keyboard' && (!hasAction || isSelectionKey())) {\n        onSelect(e);\n      }\n    };\n\n    // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)\n    // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)\n    if (!allowsDifferentPressOrigin) {\n      itemPressProps.onPress = (e) => {\n        if (hasPrimaryAction || (hasSecondaryAction && e.pointerType !== 'mouse')) {\n          if (e.pointerType === 'keyboard' && !isActionKey()) {\n            return;\n          }\n\n          performAction(e);\n        } else if (e.pointerType !== 'keyboard' && allowsSelection) {\n          onSelect(e);\n        }\n      };\n    } else {\n      itemPressProps.onPressUp = hasPrimaryAction ? null : (e) => {\n        if (e.pointerType !== 'keyboard' && allowsSelection) {\n          onSelect(e);\n        }\n      };\n\n      itemPressProps.onPress = hasPrimaryAction ? performAction : null;\n    }\n  } else {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n\n      // Select on mouse down unless there is a primary action which will occur on mouse up.\n      // For keyboard, select on key down. If there is an action, the Space key selects on key down,\n      // and the Enter key performs onAction on key up.\n      if (\n        allowsSelection && (\n          (e.pointerType === 'mouse' && !hasPrimaryAction) ||\n          (e.pointerType === 'keyboard' && (!allowsActions || isSelectionKey()))\n        )\n      ) {\n        onSelect(e);\n      }\n    };\n\n    itemPressProps.onPress = (e) => {\n      // Selection occurs on touch up. Primary actions always occur on pointer up.\n      // Both primary and secondary actions occur on Enter key up. The only exception\n      // is secondary actions, which occur on double click with a mouse.\n      if (\n        e.pointerType === 'touch' ||\n        e.pointerType === 'pen' ||\n        e.pointerType === 'virtual' ||\n        (e.pointerType === 'keyboard' && hasAction && isActionKey()) ||\n        (e.pointerType === 'mouse' && hadPrimaryActionOnPressStart.current)\n      ) {\n        if (hasAction) {\n          performAction(e);\n        } else if (allowsSelection) {\n          onSelect(e);\n        }\n      }\n    };\n  }\n\n  itemProps['data-key'] = key;\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  let {pressProps, isPressed} = usePress(itemPressProps);\n\n  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n  let onDoubleClick = hasSecondaryAction ? (e) => {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      performAction(e);\n    }\n  } : undefined;\n\n  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  let {longPressProps} = useLongPress({\n    isDisabled: !longPressEnabled,\n    onLongPress(e) {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n        manager.setSelectionBehavior('toggle');\n      }\n    }\n  });\n\n  // Prevent native drag and drop on long press if we also select on long press.\n  // Once the user is in selection mode, they can long press again to drag.\n  // Use a capturing listener to ensure this runs before useDrag, regardless of\n  // the order the props get merged.\n  let onDragStartCapture = e => {\n    if (modality.current === 'touch' && longPressEnabledOnPressStart.current) {\n      e.preventDefault();\n    }\n  };\n\n  // Prevent default on link clicks so that we control exactly\n  // when they open (to match selection behavior).\n  let onClick = manager.isLink(key) ? e => {\n    if (!(openLink as any).isOpening) {\n      e.preventDefault();\n    }\n  } : undefined;\n\n  return {\n    itemProps: mergeProps(\n      itemProps,\n      allowsSelection || hasPrimaryAction ? pressProps : {},\n      longPressEnabled ? longPressProps : {},\n      {onDoubleClick, onDragStartCapture, onClick}\n    ),\n    isPressed,\n    isSelected: manager.isSelected(key),\n    isFocused: manager.isFocused && manager.focusedKey === key,\n    isDisabled,\n    allowsSelection,\n    hasAction\n  };\n}\n\nfunction isActionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === 'Enter';\n}\n\nfunction isSelectionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === ' ' || event?.code === 'Space';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaSelectableCollectionOptions, useSelectableCollection} from './useSelectableCollection';\nimport {Collection, DOMAttributes, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, useMemo} from 'react';\nimport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nimport {useCollator} from '@react-aria/i18n';\n\nexport interface AriaSelectableListOptions extends Omit<AriaSelectableCollectionOptions, 'keyboardDelegate'> {\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n   */\n  disabledKeys: Set<Key>\n}\n\nexport interface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: DOMAttributes\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(props: AriaSelectableListOptions): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let disabledBehavior = selectionManager.disabledBehavior;\n  let delegate = useMemo(() => (\n    keyboardDelegate || new ListKeyboardDelegate(collection, disabledBehavior === 'selection' ? new Set() : disabledKeys, ref, collator)\n  ), [keyboardDelegate, collection, disabledKeys, ref, collator, disabledBehavior]);\n\n  let {collectionProps} = useSelectableCollection({\n    ...props,\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate\n  });\n\n  return {\n    listProps: collectionProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Direction, KeyboardDelegate, Node, Orientation} from '@react-types/shared';\nimport {isScrollable} from '@react-aria/utils';\nimport {Key, RefObject} from 'react';\n\ninterface ListKeyboardDelegateOptions<T> {\n  collection: Collection<Node<T>>,\n  ref: RefObject<HTMLElement>,\n  collator?: Intl.Collator,\n  layout?: 'stack' | 'grid',\n  orientation?: Orientation,\n  direction?: Direction,\n  disabledKeys?: Set<Key>\n}\n\nexport class ListKeyboardDelegate<T> implements KeyboardDelegate {\n  private collection: Collection<Node<T>>;\n  private disabledKeys: Set<Key>;\n  private ref: RefObject<HTMLElement>;\n  private collator: Intl.Collator | undefined;\n  private layout: 'stack' | 'grid';\n  private orientation?: Orientation;\n  private direction?: Direction;\n\n  constructor(collection: Collection<Node<T>>, disabledKeys: Set<Key>, ref: RefObject<HTMLElement>, collator?: Intl.Collator);\n  constructor(options: ListKeyboardDelegateOptions<T>);\n  constructor(...args: any[]) {\n    if (args.length === 1) {\n      let opts = args[0] as ListKeyboardDelegateOptions<T>;\n      this.collection = opts.collection;\n      this.ref = opts.ref;\n      this.collator = opts.collator;\n      this.disabledKeys = opts.disabledKeys || new Set();\n      this.orientation = opts.orientation;\n      this.direction = opts.direction;\n      this.layout = opts.layout || 'stack';\n    } else {\n      this.collection = args[0];\n      this.disabledKeys = args[1];\n      this.ref = args[2];\n      this.collator = args[3];\n      this.layout = 'stack';\n      this.orientation = 'vertical';\n    }\n\n    // If this is a vertical stack, remove the left/right methods completely\n    // so they aren't called by useDroppableCollection.\n    if (this.layout === 'stack' && this.orientation === 'vertical') {\n      this.getKeyLeftOf = undefined;\n      this.getKeyRightOf = undefined;\n    }\n  }\n\n  getNextKey(key: Key) {\n    key = this.collection.getKeyAfter(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return null;\n  }\n\n  getPreviousKey(key: Key) {\n    key = this.collection.getKeyBefore(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n\n    return null;\n  }\n\n  private findKey(\n    key: Key,\n    nextKey: (key: Key) => Key,\n    shouldSkip: (prevRect: DOMRect, itemRect: DOMRect) => boolean\n  ) {\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    // Find the item above or below in the same column.\n    let prevRect = item.getBoundingClientRect();\n    do {\n      key = nextKey(key);\n      item = this.getItem(key);\n    } while (item && shouldSkip(prevRect, item.getBoundingClientRect()));\n\n    return key;\n  }\n\n  private isSameRow(prevRect: DOMRect, itemRect: DOMRect) {\n    return prevRect.top === itemRect.top || prevRect.left !== itemRect.left;\n  }\n\n  private isSameColumn(prevRect: DOMRect, itemRect: DOMRect) {\n    return prevRect.left === itemRect.left || prevRect.top !== itemRect.top;\n  }\n\n  getKeyBelow(key: Key) {\n    if (this.layout === 'grid' && this.orientation === 'vertical') {\n      return this.findKey(key, (key) => this.getNextKey(key), this.isSameRow);\n    } else {\n      return this.getNextKey(key);\n    }\n  }\n\n  getKeyAbove(key: Key) {\n    if (this.layout === 'grid' && this.orientation === 'vertical') {\n      return this.findKey(key, (key) => this.getPreviousKey(key), this.isSameRow);\n    } else {\n      return this.getPreviousKey(key);\n    }\n  }\n\n  private getNextColumn(key: Key, right: boolean) {\n    return right ? this.getPreviousKey(key) : this.getNextKey(key);\n  }\n\n  getKeyRightOf(key: Key) {\n    if (this.layout === 'grid') {\n      if (this.orientation === 'vertical') {\n        return this.getNextColumn(key, this.direction === 'rtl');\n      } else {\n        return this.findKey(key, (key) => this.getNextColumn(key, this.direction === 'rtl'), this.isSameColumn);\n      }\n    } else if (this.orientation === 'horizontal') {\n      return this.getNextColumn(key, this.direction === 'rtl');\n    }\n\n    return null;\n  }\n\n  getKeyLeftOf(key: Key) {\n    if (this.layout === 'grid') {\n      if (this.orientation === 'vertical') {\n        return this.getNextColumn(key, this.direction === 'ltr');\n      } else {\n        return this.findKey(key, (key) => this.getNextColumn(key, this.direction === 'ltr'), this.isSameColumn);\n      }\n    } else if (this.orientation === 'horizontal') {\n      return this.getNextColumn(key, this.direction === 'ltr');\n    }\n\n    return null;\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return null;\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n\n    return null;\n  }\n\n  private getItem(key: Key): HTMLElement {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n\n  getKeyPageAbove(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    if (!isScrollable(menu)) {\n      return this.getFirstKey();\n    }\n\n    let containerRect = menu.getBoundingClientRect();\n    let itemRect = item.getBoundingClientRect();\n    if (this.orientation === 'horizontal') {\n      let containerX = containerRect.x - menu.scrollLeft;\n      let pageX = Math.max(0, (itemRect.x - containerX) + itemRect.width - containerRect.width);\n\n      while (item && (itemRect.x - containerX) > pageX) {\n        key = this.getKeyAbove(key);\n        item = key == null ? null : this.getItem(key);\n        itemRect = item?.getBoundingClientRect();\n      }\n    } else {\n      let containerY = containerRect.y - menu.scrollTop;\n      let pageY = Math.max(0, (itemRect.y - containerY) + itemRect.height - containerRect.height);\n\n      while (item && (itemRect.y - containerY) > pageY) {\n        key = this.getKeyAbove(key);\n        item = key == null ? null : this.getItem(key);\n        itemRect = item?.getBoundingClientRect();\n      }\n    }\n\n    return key ?? this.getFirstKey();\n  }\n\n  getKeyPageBelow(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    if (!isScrollable(menu)) {\n      return this.getLastKey();\n    }\n\n    let containerRect = menu.getBoundingClientRect();\n    let itemRect = item.getBoundingClientRect();\n    if (this.orientation === 'horizontal') {\n      let containerX = containerRect.x - menu.scrollLeft;\n      let pageX = Math.min(menu.scrollWidth, (itemRect.x - containerX) - itemRect.width + containerRect.width);\n\n      while (item && (itemRect.x - containerX) < pageX) {\n        key = this.getKeyBelow(key);\n        item = key == null ? null : this.getItem(key);\n        itemRect = item?.getBoundingClientRect();\n      }\n    } else {\n      let containerY = containerRect.y - menu.scrollTop;\n      let pageY = Math.min(menu.scrollHeight, (itemRect.y - containerY) - itemRect.height + containerRect.height);\n\n      while (item && (itemRect.y - containerY) < pageY) {\n        key = this.getKeyBelow(key);\n        item = key == null ? null : this.getItem(key);\n        itemRect = item?.getBoundingClientRect();\n      }\n    }\n\n    return key ?? this.getLastKey();\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}