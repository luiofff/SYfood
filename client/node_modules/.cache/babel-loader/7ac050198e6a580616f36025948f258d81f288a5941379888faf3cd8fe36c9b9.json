{"ast":null,"code":"/* eslint-disable valid-jsdoc */\nimport React from 'react';\nexport const mockMediaQueryList = {\n  media: '',\n  matches: false,\n  onchange: () => {},\n  addListener: () => {},\n  removeListener: () => {},\n  addEventListener: () => {},\n  removeEventListener: () => {},\n  dispatchEvent: _ => true\n};\nexport const makeCurrentActiveMediaExpressions = mediaToValue => ({\n  s: `(max-width: ${mediaToValue.m - 1}px)`,\n  m: `(min-width: ${mediaToValue.m}px) and (max-width: ${mediaToValue.l - 1}px)`,\n  l: `(min-width: ${mediaToValue.l}px) and (max-width: ${mediaToValue.xl - 1}px)`,\n  xl: `(min-width: ${mediaToValue.xl}px) and (max-width: ${mediaToValue.xxl - 1}px)`,\n  xxl: `(min-width: ${mediaToValue.xxl}px) and (max-width: ${mediaToValue.xxxl - 1}px)`,\n  xxxl: `(min-width: ${mediaToValue.xxxl}px)`\n});\nconst safeMatchMedia = query => {\n  if (typeof window === 'undefined' || typeof window.matchMedia !== 'function') {\n    return mockMediaQueryList;\n  }\n  return window.matchMedia(String(query));\n};\nclass Queries {\n  constructor(breakpointsMap) {\n    this.queryListsDecl = [];\n    const mediaToExpressionMap = makeCurrentActiveMediaExpressions(breakpointsMap);\n    this.queryListsDecl = [\n    // order important here\n    ['s', safeMatchMedia(mediaToExpressionMap.s)], ['m', safeMatchMedia(mediaToExpressionMap.m)], ['l', safeMatchMedia(mediaToExpressionMap.l)], ['xl', safeMatchMedia(mediaToExpressionMap.xl)], ['xxl', safeMatchMedia(mediaToExpressionMap.xxl)], ['xxxl', safeMatchMedia(mediaToExpressionMap.xxxl)]];\n  }\n  getCurrentActiveMedia() {\n    const activeMedia = this.queryListsDecl.find(([_, queryList]) => queryList.matches);\n    if (!activeMedia) {\n      return 's';\n    }\n    return activeMedia[0];\n  }\n  addListeners(fn) {\n    this.queryListsDecl.forEach(([_, queryList]) => queryList.addEventListener('change', fn));\n  }\n  removeListeners(fn) {\n    this.queryListsDecl.forEach(([_, queryList]) => queryList.removeEventListener('change', fn));\n  }\n}\n/**\n * @private - use `useLayoutContext` hook instead\n */\nexport const useCurrentActiveMediaQuery = (breakpointsMap, initialMediaQuery = 's') => {\n  const [state, _setState] = React.useState(initialMediaQuery);\n  React.useLayoutEffect(() => {\n    let mounted = true;\n    const queries = new Queries(breakpointsMap);\n    const setState = () => {\n      _setState(queries.getCurrentActiveMedia());\n    };\n    const onChange = () => {\n      if (!mounted) {\n        return;\n      }\n      setState();\n    };\n    queries.addListeners(onChange);\n    setState();\n    return () => {\n      mounted = false;\n      queries.removeListeners(onChange);\n    };\n    // don't support runtime breakpoint redefinition. Breakpoints defined only one at LayoutTheme\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return state;\n};","map":{"version":3,"names":["React","mockMediaQueryList","media","matches","onchange","addListener","removeListener","addEventListener","removeEventListener","dispatchEvent","_","makeCurrentActiveMediaExpressions","mediaToValue","s","m","l","xl","xxl","xxxl","safeMatchMedia","query","window","matchMedia","String","Queries","constructor","breakpointsMap","queryListsDecl","mediaToExpressionMap","getCurrentActiveMedia","activeMedia","find","queryList","addListeners","fn","forEach","removeListeners","useCurrentActiveMediaQuery","initialMediaQuery","state","_setState","useState","useLayoutEffect","mounted","queries","setState","onChange"],"sources":["/Users/ilaulanov/node_modules/@gravity-ui/uikit/build/esm/components/layout/hooks/useCurrentActiveMediaQuery.js"],"sourcesContent":["/* eslint-disable valid-jsdoc */\nimport React from 'react';\nexport const mockMediaQueryList = {\n    media: '',\n    matches: false,\n    onchange: () => { },\n    addListener: () => { },\n    removeListener: () => { },\n    addEventListener: () => { },\n    removeEventListener: () => { },\n    dispatchEvent: (_) => true,\n};\nexport const makeCurrentActiveMediaExpressions = (mediaToValue) => ({\n    s: `(max-width: ${mediaToValue.m - 1}px)`,\n    m: `(min-width: ${mediaToValue.m}px) and (max-width: ${mediaToValue.l - 1}px)`,\n    l: `(min-width: ${mediaToValue.l}px) and (max-width: ${mediaToValue.xl - 1}px)`,\n    xl: `(min-width: ${mediaToValue.xl}px) and (max-width: ${mediaToValue.xxl - 1}px)`,\n    xxl: `(min-width: ${mediaToValue.xxl}px) and (max-width: ${mediaToValue.xxxl - 1}px)`,\n    xxxl: `(min-width: ${mediaToValue.xxxl}px)`,\n});\nconst safeMatchMedia = (query) => {\n    if (typeof window === 'undefined' || typeof window.matchMedia !== 'function') {\n        return mockMediaQueryList;\n    }\n    return window.matchMedia(String(query));\n};\nclass Queries {\n    constructor(breakpointsMap) {\n        this.queryListsDecl = [];\n        const mediaToExpressionMap = makeCurrentActiveMediaExpressions(breakpointsMap);\n        this.queryListsDecl = [\n            // order important here\n            ['s', safeMatchMedia(mediaToExpressionMap.s)],\n            ['m', safeMatchMedia(mediaToExpressionMap.m)],\n            ['l', safeMatchMedia(mediaToExpressionMap.l)],\n            ['xl', safeMatchMedia(mediaToExpressionMap.xl)],\n            ['xxl', safeMatchMedia(mediaToExpressionMap.xxl)],\n            ['xxxl', safeMatchMedia(mediaToExpressionMap.xxxl)],\n        ];\n    }\n    getCurrentActiveMedia() {\n        const activeMedia = this.queryListsDecl.find(([_, queryList]) => queryList.matches);\n        if (!activeMedia) {\n            return 's';\n        }\n        return activeMedia[0];\n    }\n    addListeners(fn) {\n        this.queryListsDecl.forEach(([_, queryList]) => queryList.addEventListener('change', fn));\n    }\n    removeListeners(fn) {\n        this.queryListsDecl.forEach(([_, queryList]) => queryList.removeEventListener('change', fn));\n    }\n}\n/**\n * @private - use `useLayoutContext` hook instead\n */\nexport const useCurrentActiveMediaQuery = (breakpointsMap, initialMediaQuery = 's') => {\n    const [state, _setState] = React.useState(initialMediaQuery);\n    React.useLayoutEffect(() => {\n        let mounted = true;\n        const queries = new Queries(breakpointsMap);\n        const setState = () => {\n            _setState(queries.getCurrentActiveMedia());\n        };\n        const onChange = () => {\n            if (!mounted) {\n                return;\n            }\n            setState();\n        };\n        queries.addListeners(onChange);\n        setState();\n        return () => {\n            mounted = false;\n            queries.removeListeners(onChange);\n        };\n        // don't support runtime breakpoint redefinition. Breakpoints defined only one at LayoutTheme\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return state;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}