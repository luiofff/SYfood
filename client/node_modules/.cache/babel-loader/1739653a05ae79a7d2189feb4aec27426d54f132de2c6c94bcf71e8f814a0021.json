{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React from 'react';\nimport { colorText } from './colorText/colorText';\nimport { text } from './text/text';\n/**\n * A component for working with typography.\n *\n * Storybook: https://preview.gravity-ui.com/uikit/?path=/story/components-text--default\n *\n * **Hint:** Hover on props in your editor to read jsdoc\n *\n * Provides a convenient API for working with mixins of typography and text colors. Just point at the prop in you favorite code editor and read the accompanying documentation via `jsdoc` on where to apply this or that font or color.\n *\n * ```jsx\n * import {Text} from '@gravity-ui/uikit';\n *\n * <Text variant=\"body-1\" color=\"inherit\" ellipsis>some test</Text>\n * ```\n *\n * You can also use a more flexible way of setting the style. \"Gravity UI\" also provide `text` utility function.\n *\n *```jsx\n * import {text} from '@gravity-ui/uikit';\n *\n * // textStyles = 'text text_variant_display-1 some-class-name'\n * const textStyles = text({variant: 'display-1'}, 'some-class-name'));\n *\n * <span className={textStyles}>some text</span>\n * ```\n */\nexport const Text = React.forwardRef((_a, ref) => {\n  var {\n      as,\n      children,\n      variant,\n      className,\n      ellipsis,\n      color,\n      whiteSpace,\n      wordBreak\n    } = _a,\n    rest = __rest(_a, [\"as\", \"children\", \"variant\", \"className\", \"ellipsis\", \"color\", \"whiteSpace\", \"wordBreak\"]);\n  const Tag = as || 'span';\n  return React.createElement(Tag, Object.assign({\n    ref: ref,\n    className: text({\n      variant,\n      ellipsis,\n      whiteSpace,\n      wordBreak\n    }, color ? colorText({\n      color\n    }, className) : className)\n  }, rest), children);\n});\nText.displayName = 'Text';","map":{"version":3,"names":["__rest","React","colorText","text","Text","forwardRef","_a","ref","as","children","variant","className","ellipsis","color","whiteSpace","wordBreak","rest","Tag","createElement","Object","assign","displayName"],"sources":["/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@gravity-ui/uikit/build/esm/components/Text/Text.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport React from 'react';\nimport { colorText } from './colorText/colorText';\nimport { text } from './text/text';\n/**\n * A component for working with typography.\n *\n * Storybook: https://preview.gravity-ui.com/uikit/?path=/story/components-text--default\n *\n * **Hint:** Hover on props in your editor to read jsdoc\n *\n * Provides a convenient API for working with mixins of typography and text colors. Just point at the prop in you favorite code editor and read the accompanying documentation via `jsdoc` on where to apply this or that font or color.\n *\n * ```jsx\n * import {Text} from '@gravity-ui/uikit';\n *\n * <Text variant=\"body-1\" color=\"inherit\" ellipsis>some test</Text>\n * ```\n *\n * You can also use a more flexible way of setting the style. \"Gravity UI\" also provide `text` utility function.\n *\n *```jsx\n * import {text} from '@gravity-ui/uikit';\n *\n * // textStyles = 'text text_variant_display-1 some-class-name'\n * const textStyles = text({variant: 'display-1'}, 'some-class-name'));\n *\n * <span className={textStyles}>some text</span>\n * ```\n */\nexport const Text = React.forwardRef((_a, ref) => {\n    var { as, children, variant, className, ellipsis, color, whiteSpace, wordBreak } = _a, rest = __rest(_a, [\"as\", \"children\", \"variant\", \"className\", \"ellipsis\", \"color\", \"whiteSpace\", \"wordBreak\"]);\n    const Tag = as || 'span';\n    return (React.createElement(Tag, Object.assign({ ref: ref, className: text({ variant, ellipsis, whiteSpace, wordBreak }, color ? colorText({ color }, className) : className) }, rest), children));\n});\nText.displayName = 'Text';\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,IAAI,QAAQ,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,IAAI,GAAGH,KAAK,CAACI,UAAU,CAAC,CAACC,EAAE,EAAEC,GAAG,KAAK;EAC9C,IAAI;MAAEC,EAAE;MAAEC,QAAQ;MAAEC,OAAO;MAAEC,SAAS;MAAEC,QAAQ;MAAEC,KAAK;MAAEC,UAAU;MAAEC;IAAU,CAAC,GAAGT,EAAE;IAAEU,IAAI,GAAGhB,MAAM,CAACM,EAAE,EAAE,CAAC,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;EACpM,MAAMW,GAAG,GAAGT,EAAE,IAAI,MAAM;EACxB,OAAQP,KAAK,CAACiB,aAAa,CAACD,GAAG,EAAEE,MAAM,CAACC,MAAM,CAAC;IAAEb,GAAG,EAAEA,GAAG;IAAEI,SAAS,EAAER,IAAI,CAAC;MAAEO,OAAO;MAAEE,QAAQ;MAAEE,UAAU;MAAEC;IAAU,CAAC,EAAEF,KAAK,GAAGX,SAAS,CAAC;MAAEW;IAAM,CAAC,EAAEF,SAAS,CAAC,GAAGA,SAAS;EAAE,CAAC,EAAEK,IAAI,CAAC,EAAEP,QAAQ,CAAC;AACrM,CAAC,CAAC;AACFL,IAAI,CAACiB,WAAW,GAAG,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}