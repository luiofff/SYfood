{"ast":null,"code":"import React from 'react';\nimport { block } from '../utils/cn';\nimport { a11yHiddenSvgProps } from '../utils/svg';\nimport { getStringViewBox, isComponentSvgData, isSpriteData, isStringSvgData, isSvgrData, prepareStringData } from './utils';\nimport './Icon.css';\nconst b = block('icon');\nexport const Icon = React.forwardRef((_ref, ref) => {\n  let {\n    data,\n    width,\n    height,\n    size,\n    className,\n    fill = 'currentColor',\n    stroke = 'none',\n    qa\n  } = _ref;\n  // This component supports four different ways to load and use icons:\n  // - svg-react-loader\n  // - svg-sprite-loader\n  // - @svgr/webpack\n  // - string with raw svg\n  let w, h;\n  if (size) {\n    w = size;\n    h = size;\n  }\n  if (width) {\n    w = width;\n  }\n  if (height) {\n    h = height;\n  }\n  // Parsing viewBox to get width and height in case they were not specified\n  // For svg-react-loader svg attributes are available in component defaultProps\n  // In case with @svgr/webpack svg attributes can be fetched from the react element\n  // after calling svgr-component without any propses\n  let viewBox;\n  if (isSpriteData(data)) {\n    ({\n      viewBox\n    } = data);\n  } else if (isStringSvgData(data)) {\n    viewBox = getStringViewBox(data);\n  } else if (isComponentSvgData(data)) {\n    ({\n      viewBox\n    } = data.defaultProps);\n  } else if (isSvgrData(data)) {\n    const el = data({});\n    if (el) {\n      ({\n        viewBox\n      } = el.props);\n    }\n  }\n  if (viewBox && (!w || !h)) {\n    const values = viewBox.split(/\\s+|\\s*,\\s*/);\n    if (!w) {\n      w = values[2];\n    }\n    if (!h) {\n      h = values[3];\n    }\n  }\n  const props = Object.assign({\n    xmlns: 'http://www.w3.org/2000/svg',\n    xmlnsXlink: 'http://www.w3.org/1999/xlink',\n    width: w,\n    height: h,\n    className: b(null, className),\n    fill,\n    stroke,\n    'data-qa': qa\n  }, a11yHiddenSvgProps);\n  if (isStringSvgData(data)) {\n    const preparedData = prepareStringData(data);\n    return React.createElement(\"svg\", Object.assign({}, props, {\n      ref: ref,\n      dangerouslySetInnerHTML: {\n        __html: preparedData\n      }\n    }));\n  }\n  if (isSpriteData(data)) {\n    const href = Icon.prefix + (data.url || \"#\".concat(data.id));\n    return React.createElement(\"svg\", Object.assign({}, props, {\n      viewBox: viewBox,\n      ref: ref\n    }), React.createElement(\"use\", {\n      href: href,\n      xlinkHref: href\n    }));\n  }\n  // SVG wrapping is needed for compability with sprite-loader\n  // So we removing width and height for internal component so only external one is specifying them\n  const IconComponent = data;\n  if (IconComponent.defaultProps) {\n    IconComponent.defaultProps.width = IconComponent.defaultProps.height = undefined;\n  }\n  return React.createElement(\"svg\", Object.assign({}, props, {\n    ref: ref\n  }), React.createElement(IconComponent, {\n    width: undefined,\n    height: undefined\n  }));\n});\nIcon.displayName = 'Icon';\nIcon.prefix = '';","map":{"version":3,"names":["React","block","a11yHiddenSvgProps","getStringViewBox","isComponentSvgData","isSpriteData","isStringSvgData","isSvgrData","prepareStringData","b","Icon","forwardRef","_ref","ref","data","width","height","size","className","fill","stroke","qa","w","h","viewBox","defaultProps","el","props","values","split","Object","assign","xmlns","xmlnsXlink","preparedData","createElement","dangerouslySetInnerHTML","__html","href","prefix","url","concat","id","xlinkHref","IconComponent","undefined","displayName"],"sources":["/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@gravity-ui/uikit/build/esm/components/Icon/Icon.js"],"sourcesContent":["import React from 'react';\nimport { block } from '../utils/cn';\nimport { a11yHiddenSvgProps } from '../utils/svg';\nimport { getStringViewBox, isComponentSvgData, isSpriteData, isStringSvgData, isSvgrData, prepareStringData, } from './utils';\nimport './Icon.css';\nconst b = block('icon');\nexport const Icon = React.forwardRef(({ data, width, height, size, className, fill = 'currentColor', stroke = 'none', qa }, ref) => {\n    // This component supports four different ways to load and use icons:\n    // - svg-react-loader\n    // - svg-sprite-loader\n    // - @svgr/webpack\n    // - string with raw svg\n    let w, h;\n    if (size) {\n        w = size;\n        h = size;\n    }\n    if (width) {\n        w = width;\n    }\n    if (height) {\n        h = height;\n    }\n    // Parsing viewBox to get width and height in case they were not specified\n    // For svg-react-loader svg attributes are available in component defaultProps\n    // In case with @svgr/webpack svg attributes can be fetched from the react element\n    // after calling svgr-component without any propses\n    let viewBox;\n    if (isSpriteData(data)) {\n        ({ viewBox } = data);\n    }\n    else if (isStringSvgData(data)) {\n        viewBox = getStringViewBox(data);\n    }\n    else if (isComponentSvgData(data)) {\n        ({ viewBox } = data.defaultProps);\n    }\n    else if (isSvgrData(data)) {\n        const el = data({});\n        if (el) {\n            ({ viewBox } = el.props);\n        }\n    }\n    if (viewBox && (!w || !h)) {\n        const values = viewBox.split(/\\s+|\\s*,\\s*/);\n        if (!w) {\n            w = values[2];\n        }\n        if (!h) {\n            h = values[3];\n        }\n    }\n    const props = Object.assign({ xmlns: 'http://www.w3.org/2000/svg', xmlnsXlink: 'http://www.w3.org/1999/xlink', width: w, height: h, className: b(null, className), fill,\n        stroke, 'data-qa': qa }, a11yHiddenSvgProps);\n    if (isStringSvgData(data)) {\n        const preparedData = prepareStringData(data);\n        return React.createElement(\"svg\", Object.assign({}, props, { ref: ref, dangerouslySetInnerHTML: { __html: preparedData } }));\n    }\n    if (isSpriteData(data)) {\n        const href = Icon.prefix + (data.url || `#${data.id}`);\n        return (React.createElement(\"svg\", Object.assign({}, props, { viewBox: viewBox, ref: ref }),\n            React.createElement(\"use\", { href: href, xlinkHref: href })));\n    }\n    // SVG wrapping is needed for compability with sprite-loader\n    // So we removing width and height for internal component so only external one is specifying them\n    const IconComponent = data;\n    if (IconComponent.defaultProps) {\n        IconComponent.defaultProps.width = IconComponent.defaultProps.height = undefined;\n    }\n    return (React.createElement(\"svg\", Object.assign({}, props, { ref: ref }),\n        React.createElement(IconComponent, { width: undefined, height: undefined })));\n});\nIcon.displayName = 'Icon';\nIcon.prefix = '';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}