{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React from 'react';\nimport _difference from 'lodash/difference';\nimport _get from 'lodash/get';\nimport _memoize from 'lodash/memoize';\nimport _union from 'lodash/union';\nimport _without from 'lodash/without';\nimport { Checkbox } from '../../../Checkbox';\nimport { block } from '../../../utils/cn';\nimport { getComponentName } from '../../../utils/getComponentName';\nimport { Table } from '../../Table';\nimport './withTableSelection.css';\nconst b = block('table');\nexport const selectionColumnId = '_selection';\nexport function withTableSelection(TableComponent) {\n  var _a;\n  const componentName = getComponentName(TableComponent);\n  const displayName = `withTableSelection(${componentName})`;\n  return _a = class extends React.Component {\n    constructor() {\n      super(...arguments);\n      this.renderHeadCell = () => {\n        const {\n          data,\n          selectedIds\n        } = this.props;\n        let disabled = true;\n        let checked = data.every((item, index) => {\n          if (this.isDisabled(item, index)) {\n            return true;\n          } else {\n            disabled = false;\n          }\n          const id = Table.getRowId(this.props, item, index);\n          return selectedIds.includes(id);\n        });\n        if (disabled) {\n          checked = false;\n        }\n        return this.renderCheckBox({\n          disabled,\n          checked,\n          handler: this.handleAllCheckBoxUpdate\n        });\n      };\n      this.renderBodyCell = (item, index) => {\n        const {\n          selectedIds\n        } = this.props;\n        const id = Table.getRowId(this.props, item, index);\n        const checked = selectedIds.includes(id);\n        return this.renderCheckBox({\n          disabled: this.isDisabled(item, index),\n          checked,\n          handler: this.handleCheckBoxUpdate.bind(this, id, index)\n        });\n      };\n      this.handleCheckBoxUpdate = (id, index, event) => {\n        const {\n          checked\n        } = event.target;\n        // @ts-ignore shiftKey is defined for click events\n        const isShiftPressed = event.nativeEvent.shiftKey;\n        const {\n          data,\n          selectedIds,\n          onSelectionChange\n        } = this.props;\n        if (isShiftPressed && this.lastCheckedIndex !== undefined && this.lastCheckedIndex >= 0) {\n          const begin = Math.min(this.lastCheckedIndex, index);\n          const end = Math.max(this.lastCheckedIndex, index);\n          const dataIds = data.map((item, i) => Table.getRowId(this.props, item, i));\n          const diffIds = dataIds.filter((_id, i) => begin <= i && i <= end && !this.isDisabled(data[i], i));\n          onSelectionChange(checked ? _union(selectedIds, diffIds) : _without(selectedIds, ...diffIds));\n        } else {\n          onSelectionChange(checked ? [...selectedIds, id] : _without(selectedIds, id));\n        }\n        this.lastCheckedIndex = index;\n      };\n      this.handleAllCheckBoxUpdate = event => {\n        const {\n          checked\n        } = event.target;\n        const {\n          data,\n          selectedIds,\n          onSelectionChange\n        } = this.props;\n        const dataIds = data.map((item, index) => Table.getRowId(this.props, item, index));\n        const notDisabledItemIds = dataIds.filter((_id, index) => !this.isDisabled(data[index], index));\n        onSelectionChange(checked ? _union(selectedIds, notDisabledItemIds) : _difference(selectedIds, dataIds));\n      };\n      // eslint-disable-next-line @typescript-eslint/member-ordering, react/sort-comp\n      this.enhanceColumns = _memoize(columns => {\n        const selectionColumn = {\n          id: selectionColumnId,\n          name: this.renderHeadCell,\n          template: this.renderBodyCell,\n          className: b('checkbox_cell'),\n          sticky: _get(columns, [0, 'sticky']) === 'left' ? 'left' : undefined\n        };\n        return [selectionColumn, ...columns];\n      });\n      // eslint-disable-next-line @typescript-eslint/member-ordering\n      this.enhanceOnRowClick = _memoize(onRowClick => {\n        if (!onRowClick) {\n          return onRowClick;\n        }\n        return (item, index, event) => {\n          const checkboxClassName = b('selection-checkbox');\n          if (\n          // @ts-ignore\n          event.nativeEvent.target.matches(`.${checkboxClassName}, .${checkboxClassName} *`)) {\n            return undefined;\n          }\n          return onRowClick(item, index, event);\n        };\n      });\n      // eslint-disable-next-line @typescript-eslint/member-ordering\n      this.enhanceGetRowClassNames = _memoize(getRowClassNames => {\n        return (item, index) => {\n          const {\n            selectedIds\n          } = this.props;\n          const classNames = getRowClassNames ? getRowClassNames(item, index).slice() : [];\n          const id = Table.getRowId(this.props, item, index);\n          const selected = selectedIds.includes(id);\n          classNames.push(b('row', {\n            selected\n          }));\n          return classNames;\n        };\n      });\n      this.isDisabled = (item, index) => {\n        const {\n          isRowDisabled,\n          isRowSelectionDisabled\n        } = this.props;\n        if (isRowSelectionDisabled && isRowSelectionDisabled(item, index)) {\n          return true;\n        }\n        return isRowDisabled ? isRowDisabled(item, index) : false;\n      };\n    }\n    render() {\n      const _a = this.props,\n        {\n          selectedIds,\n          // eslint-disable-line @typescript-eslint/no-unused-vars\n          onSelectionChange,\n          // eslint-disable-line @typescript-eslint/no-unused-vars\n          columns,\n          onRowClick,\n          getRowClassNames\n        } = _a,\n        restTableProps = __rest(_a, [\"selectedIds\", \"onSelectionChange\", \"columns\", \"onRowClick\", \"getRowClassNames\"]);\n      return React.createElement(TableComponent, Object.assign({}, restTableProps, {\n        columns: this.enhanceColumns(columns),\n        onRowClick: this.enhanceOnRowClick(onRowClick),\n        getRowClassNames: this.enhanceGetRowClassNames(getRowClassNames)\n      }));\n    }\n    renderCheckBox({\n      disabled,\n      checked,\n      handler\n    }) {\n      return React.createElement(Checkbox, {\n        size: \"l\",\n        checked: checked,\n        disabled: disabled,\n        onChange: handler,\n        className: b('selection-checkbox', {\n          'vertical-align': this.props.verticalAlign\n        })\n      });\n    }\n  }, _a.displayName = displayName, _a;\n}","map":{"version":3,"names":["__rest","React","_difference","_get","_memoize","_union","_without","Checkbox","block","getComponentName","Table","b","selectionColumnId","withTableSelection","TableComponent","_a","componentName","displayName","Component","constructor","arguments","renderHeadCell","data","selectedIds","props","disabled","checked","every","item","index","isDisabled","id","getRowId","includes","renderCheckBox","handler","handleAllCheckBoxUpdate","renderBodyCell","handleCheckBoxUpdate","bind","event","target","isShiftPressed","nativeEvent","shiftKey","onSelectionChange","lastCheckedIndex","undefined","begin","Math","min","end","max","dataIds","map","i","diffIds","filter","_id","notDisabledItemIds","enhanceColumns","columns","selectionColumn","name","template","className","sticky","enhanceOnRowClick","onRowClick","checkboxClassName","matches","enhanceGetRowClassNames","getRowClassNames","classNames","slice","selected","push","isRowDisabled","isRowSelectionDisabled","render","restTableProps","createElement","Object","assign","size","onChange","verticalAlign"],"sources":["/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSelection/withTableSelection.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport React from 'react';\nimport _difference from 'lodash/difference';\nimport _get from 'lodash/get';\nimport _memoize from 'lodash/memoize';\nimport _union from 'lodash/union';\nimport _without from 'lodash/without';\nimport { Checkbox } from '../../../Checkbox';\nimport { block } from '../../../utils/cn';\nimport { getComponentName } from '../../../utils/getComponentName';\nimport { Table } from '../../Table';\nimport './withTableSelection.css';\nconst b = block('table');\nexport const selectionColumnId = '_selection';\nexport function withTableSelection(TableComponent) {\n    var _a;\n    const componentName = getComponentName(TableComponent);\n    const displayName = `withTableSelection(${componentName})`;\n    return _a = class extends React.Component {\n            constructor() {\n                super(...arguments);\n                this.renderHeadCell = () => {\n                    const { data, selectedIds } = this.props;\n                    let disabled = true;\n                    let checked = data.every((item, index) => {\n                        if (this.isDisabled(item, index)) {\n                            return true;\n                        }\n                        else {\n                            disabled = false;\n                        }\n                        const id = Table.getRowId(this.props, item, index);\n                        return selectedIds.includes(id);\n                    });\n                    if (disabled) {\n                        checked = false;\n                    }\n                    return this.renderCheckBox({ disabled, checked, handler: this.handleAllCheckBoxUpdate });\n                };\n                this.renderBodyCell = (item, index) => {\n                    const { selectedIds } = this.props;\n                    const id = Table.getRowId(this.props, item, index);\n                    const checked = selectedIds.includes(id);\n                    return this.renderCheckBox({\n                        disabled: this.isDisabled(item, index),\n                        checked,\n                        handler: this.handleCheckBoxUpdate.bind(this, id, index),\n                    });\n                };\n                this.handleCheckBoxUpdate = (id, index, event) => {\n                    const { checked } = event.target;\n                    // @ts-ignore shiftKey is defined for click events\n                    const isShiftPressed = event.nativeEvent.shiftKey;\n                    const { data, selectedIds, onSelectionChange } = this.props;\n                    if (isShiftPressed &&\n                        this.lastCheckedIndex !== undefined &&\n                        this.lastCheckedIndex >= 0) {\n                        const begin = Math.min(this.lastCheckedIndex, index);\n                        const end = Math.max(this.lastCheckedIndex, index);\n                        const dataIds = data.map((item, i) => Table.getRowId(this.props, item, i));\n                        const diffIds = dataIds.filter((_id, i) => begin <= i && i <= end && !this.isDisabled(data[i], i));\n                        onSelectionChange(checked ? _union(selectedIds, diffIds) : _without(selectedIds, ...diffIds));\n                    }\n                    else {\n                        onSelectionChange(checked ? [...selectedIds, id] : _without(selectedIds, id));\n                    }\n                    this.lastCheckedIndex = index;\n                };\n                this.handleAllCheckBoxUpdate = (event) => {\n                    const { checked } = event.target;\n                    const { data, selectedIds, onSelectionChange } = this.props;\n                    const dataIds = data.map((item, index) => Table.getRowId(this.props, item, index));\n                    const notDisabledItemIds = dataIds.filter((_id, index) => !this.isDisabled(data[index], index));\n                    onSelectionChange(checked\n                        ? _union(selectedIds, notDisabledItemIds)\n                        : _difference(selectedIds, dataIds));\n                };\n                // eslint-disable-next-line @typescript-eslint/member-ordering, react/sort-comp\n                this.enhanceColumns = _memoize((columns) => {\n                    const selectionColumn = {\n                        id: selectionColumnId,\n                        name: this.renderHeadCell,\n                        template: this.renderBodyCell,\n                        className: b('checkbox_cell'),\n                        sticky: _get(columns, [0, 'sticky']) === 'left' ? 'left' : undefined,\n                    };\n                    return [selectionColumn, ...columns];\n                });\n                // eslint-disable-next-line @typescript-eslint/member-ordering\n                this.enhanceOnRowClick = _memoize((onRowClick) => {\n                    if (!onRowClick) {\n                        return onRowClick;\n                    }\n                    return (item, index, event) => {\n                        const checkboxClassName = b('selection-checkbox');\n                        if (\n                        // @ts-ignore\n                        event.nativeEvent.target.matches(`.${checkboxClassName}, .${checkboxClassName} *`)) {\n                            return undefined;\n                        }\n                        return onRowClick(item, index, event);\n                    };\n                });\n                // eslint-disable-next-line @typescript-eslint/member-ordering\n                this.enhanceGetRowClassNames = _memoize((getRowClassNames) => {\n                    return (item, index) => {\n                        const { selectedIds } = this.props;\n                        const classNames = getRowClassNames\n                            ? getRowClassNames(item, index).slice()\n                            : [];\n                        const id = Table.getRowId(this.props, item, index);\n                        const selected = selectedIds.includes(id);\n                        classNames.push(b('row', { selected }));\n                        return classNames;\n                    };\n                });\n                this.isDisabled = (item, index) => {\n                    const { isRowDisabled, isRowSelectionDisabled } = this.props;\n                    if (isRowSelectionDisabled && isRowSelectionDisabled(item, index)) {\n                        return true;\n                    }\n                    return isRowDisabled ? isRowDisabled(item, index) : false;\n                };\n            }\n            render() {\n                const _a = this.props, { selectedIds, // eslint-disable-line @typescript-eslint/no-unused-vars\n                onSelectionChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n                columns, onRowClick, getRowClassNames } = _a, restTableProps = __rest(_a, [\"selectedIds\", \"onSelectionChange\", \"columns\", \"onRowClick\", \"getRowClassNames\"]);\n                return (React.createElement(TableComponent, Object.assign({}, restTableProps, { columns: this.enhanceColumns(columns), onRowClick: this.enhanceOnRowClick(onRowClick), getRowClassNames: this.enhanceGetRowClassNames(getRowClassNames) })));\n            }\n            renderCheckBox({ disabled, checked, handler, }) {\n                return (React.createElement(Checkbox, { size: \"l\", checked: checked, disabled: disabled, onChange: handler, className: b('selection-checkbox', {\n                        'vertical-align': this.props.verticalAlign,\n                    }) }));\n            }\n        },\n        _a.displayName = displayName,\n        _a;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}