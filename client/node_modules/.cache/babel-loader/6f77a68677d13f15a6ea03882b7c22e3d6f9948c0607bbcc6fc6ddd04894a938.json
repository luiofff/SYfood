{"ast":null,"code":"import React from 'react';\nimport { block, blockNew } from '../utils/cn';\nimport { ThemeContext } from './ThemeContext';\nimport { ThemeSettingsContext } from './ThemeSettingsContext';\nimport { DEFAULT_DARK_THEME, DEFAULT_LIGHT_THEME, DEFAULT_THEME, ROOT_CLASS_NAME } from './constants';\nimport { updateBodyClassName } from './updateBodyClassName';\nimport { useSystemTheme } from './useSystemTheme';\nconst b = block(ROOT_CLASS_NAME);\nconst bNew = blockNew(ROOT_CLASS_NAME);\nexport function ThemeProvider({\n  theme = DEFAULT_THEME,\n  systemLightTheme = DEFAULT_LIGHT_THEME,\n  systemDarkTheme = DEFAULT_DARK_THEME,\n  nativeScrollbar = false,\n  scoped = false,\n  rootClassName = '',\n  children\n}) {\n  const systemTheme = useSystemTheme() === 'light' ? systemLightTheme : systemDarkTheme;\n  const themeValue = theme === 'system' ? systemTheme : theme;\n  React.useEffect(() => {\n    if (!scoped) {\n      updateBodyClassName(themeValue, {\n        'native-scrollbar': nativeScrollbar\n      }, rootClassName);\n    }\n  }, [nativeScrollbar, themeValue, scoped, rootClassName]);\n  const contextValue = React.useMemo(() => ({\n    theme,\n    themeValue\n  }), [theme, themeValue]);\n  const themeSettingsContext = React.useMemo(() => ({\n    systemLightTheme,\n    systemDarkTheme\n  }), [systemLightTheme, systemDarkTheme]);\n  return React.createElement(ThemeContext.Provider, {\n    value: contextValue\n  }, React.createElement(ThemeSettingsContext.Provider, {\n    value: themeSettingsContext\n  }, scoped ? React.createElement(\"div\", {\n    className: bNew({\n      theme: themeValue,\n      'native-scrollbar': nativeScrollbar\n    }, [b({\n      theme: themeValue,\n      'native-scrollbar': nativeScrollbar\n    }), rootClassName])\n  }, children) : children));\n}\nThemeProvider.displayName = 'ThemeProvider';","map":{"version":3,"names":["React","block","blockNew","ThemeContext","ThemeSettingsContext","DEFAULT_DARK_THEME","DEFAULT_LIGHT_THEME","DEFAULT_THEME","ROOT_CLASS_NAME","updateBodyClassName","useSystemTheme","b","bNew","ThemeProvider","theme","systemLightTheme","systemDarkTheme","nativeScrollbar","scoped","rootClassName","children","systemTheme","themeValue","useEffect","contextValue","useMemo","themeSettingsContext","createElement","Provider","value","className","displayName"],"sources":["/Users/ilaulanov/node_modules/@gravity-ui/uikit/build/esm/components/theme/ThemeProvider.js"],"sourcesContent":["import React from 'react';\nimport { block, blockNew } from '../utils/cn';\nimport { ThemeContext } from './ThemeContext';\nimport { ThemeSettingsContext } from './ThemeSettingsContext';\nimport { DEFAULT_DARK_THEME, DEFAULT_LIGHT_THEME, DEFAULT_THEME, ROOT_CLASS_NAME } from './constants';\nimport { updateBodyClassName } from './updateBodyClassName';\nimport { useSystemTheme } from './useSystemTheme';\nconst b = block(ROOT_CLASS_NAME);\nconst bNew = blockNew(ROOT_CLASS_NAME);\nexport function ThemeProvider({ theme = DEFAULT_THEME, systemLightTheme = DEFAULT_LIGHT_THEME, systemDarkTheme = DEFAULT_DARK_THEME, nativeScrollbar = false, scoped = false, rootClassName = '', children, }) {\n    const systemTheme = (useSystemTheme() === 'light' ? systemLightTheme : systemDarkTheme);\n    const themeValue = theme === 'system' ? systemTheme : theme;\n    React.useEffect(() => {\n        if (!scoped) {\n            updateBodyClassName(themeValue, { 'native-scrollbar': nativeScrollbar }, rootClassName);\n        }\n    }, [nativeScrollbar, themeValue, scoped, rootClassName]);\n    const contextValue = React.useMemo(() => ({\n        theme,\n        themeValue,\n    }), [theme, themeValue]);\n    const themeSettingsContext = React.useMemo(() => ({ systemLightTheme, systemDarkTheme }), [systemLightTheme, systemDarkTheme]);\n    return (React.createElement(ThemeContext.Provider, { value: contextValue },\n        React.createElement(ThemeSettingsContext.Provider, { value: themeSettingsContext }, scoped ? (React.createElement(\"div\", { className: bNew({ theme: themeValue, 'native-scrollbar': nativeScrollbar }, [\n                b({ theme: themeValue, 'native-scrollbar': nativeScrollbar }),\n                rootClassName,\n            ]) }, children)) : (children))));\n}\nThemeProvider.displayName = 'ThemeProvider';\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,QAAQ,QAAQ,aAAa;AAC7C,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,kBAAkB,EAAEC,mBAAmB,EAAEC,aAAa,EAAEC,eAAe,QAAQ,aAAa;AACrG,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,cAAc,QAAQ,kBAAkB;AACjD,MAAMC,CAAC,GAAGV,KAAK,CAACO,eAAe,CAAC;AAChC,MAAMI,IAAI,GAAGV,QAAQ,CAACM,eAAe,CAAC;AACtC,OAAO,SAASK,aAAaA,CAAC;EAAEC,KAAK,GAAGP,aAAa;EAAEQ,gBAAgB,GAAGT,mBAAmB;EAAEU,eAAe,GAAGX,kBAAkB;EAAEY,eAAe,GAAG,KAAK;EAAEC,MAAM,GAAG,KAAK;EAAEC,aAAa,GAAG,EAAE;EAAEC;AAAU,CAAC,EAAE;EAC3M,MAAMC,WAAW,GAAIX,cAAc,CAAC,CAAC,KAAK,OAAO,GAAGK,gBAAgB,GAAGC,eAAgB;EACvF,MAAMM,UAAU,GAAGR,KAAK,KAAK,QAAQ,GAAGO,WAAW,GAAGP,KAAK;EAC3Dd,KAAK,CAACuB,SAAS,CAAC,MAAM;IAClB,IAAI,CAACL,MAAM,EAAE;MACTT,mBAAmB,CAACa,UAAU,EAAE;QAAE,kBAAkB,EAAEL;MAAgB,CAAC,EAAEE,aAAa,CAAC;IAC3F;EACJ,CAAC,EAAE,CAACF,eAAe,EAAEK,UAAU,EAAEJ,MAAM,EAAEC,aAAa,CAAC,CAAC;EACxD,MAAMK,YAAY,GAAGxB,KAAK,CAACyB,OAAO,CAAC,OAAO;IACtCX,KAAK;IACLQ;EACJ,CAAC,CAAC,EAAE,CAACR,KAAK,EAAEQ,UAAU,CAAC,CAAC;EACxB,MAAMI,oBAAoB,GAAG1B,KAAK,CAACyB,OAAO,CAAC,OAAO;IAAEV,gBAAgB;IAAEC;EAAgB,CAAC,CAAC,EAAE,CAACD,gBAAgB,EAAEC,eAAe,CAAC,CAAC;EAC9H,OAAQhB,KAAK,CAAC2B,aAAa,CAACxB,YAAY,CAACyB,QAAQ,EAAE;IAAEC,KAAK,EAAEL;EAAa,CAAC,EACtExB,KAAK,CAAC2B,aAAa,CAACvB,oBAAoB,CAACwB,QAAQ,EAAE;IAAEC,KAAK,EAAEH;EAAqB,CAAC,EAAER,MAAM,GAAIlB,KAAK,CAAC2B,aAAa,CAAC,KAAK,EAAE;IAAEG,SAAS,EAAElB,IAAI,CAAC;MAAEE,KAAK,EAAEQ,UAAU;MAAE,kBAAkB,EAAEL;IAAgB,CAAC,EAAE,CAC/LN,CAAC,CAAC;MAAEG,KAAK,EAAEQ,UAAU;MAAE,kBAAkB,EAAEL;IAAgB,CAAC,CAAC,EAC7DE,aAAa,CAChB;EAAE,CAAC,EAAEC,QAAQ,CAAC,GAAKA,QAAS,CAAC,CAAC;AAC3C;AACAP,aAAa,CAACkB,WAAW,GAAG,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}