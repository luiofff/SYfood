{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React from 'react';\nimport { Gear } from '@gravity-ui/icons';\nimport _get from 'lodash/get';\nimport _isString from 'lodash/isString';\nimport _last from 'lodash/last';\nimport { Button } from '../../../Button';\nimport { Icon } from '../../../Icon';\nimport { block } from '../../../utils/cn';\nimport { getComponentName } from '../../../utils/getComponentName';\nimport { actionsColumnId, enhanceSystemColumn } from '../withTableActions/withTableActions';\nimport { selectionColumnId } from '../withTableSelection/withTableSelection';\nimport { TableColumnSetup } from './TableColumnSetup/TableColumnSetup';\nimport './withTableSettings.css';\nexport function filterColumns(columns, settings) {\n  const filteredColumns = settings.map(({\n    id,\n    isSelected\n  }) => ({\n    isSelected,\n    columnSettings: columns.find(column => id === column.id)\n  })).filter(({\n    isSelected,\n    columnSettings\n  }) => isSelected && columnSettings).map(({\n    columnSettings\n  }) => columnSettings);\n  if (columns[0] && columns[0].id === selectionColumnId) {\n    filteredColumns.unshift(columns[0]);\n  }\n  const lastColumn = _last(columns);\n  if (lastColumn && lastColumn.id === actionsColumnId) {\n    filteredColumns.push(lastColumn);\n  }\n  return filteredColumns;\n}\nexport function getColumnStringTitle(column) {\n  if (_isString(column.name)) {\n    return column.name;\n  }\n  const originalName = _get(column, ['meta', '_originalName']);\n  if (_isString(originalName)) {\n    return originalName;\n  }\n  return column.id;\n}\nexport function getActualItems(columns, settings) {\n  const newColumnSettings = columns.filter(({\n    id\n  }) => id !== actionsColumnId && id !== selectionColumnId && settings.every(setting => setting.id !== id)).map(column => {\n    var _a;\n    return {\n      id: column.id,\n      isSelected: ((_a = column.meta) === null || _a === void 0 ? void 0 : _a.selectedByDefault) !== false\n    };\n  });\n  return settings.filter(({\n    id\n  }) => columns.some(column => id === column.id)).concat(newColumnSettings).map(({\n    id,\n    isSelected\n  }) => {\n    var _a;\n    const foundColumn = columns.find(column => column.id === id);\n    const isProtected = Boolean((_a = foundColumn === null || foundColumn === void 0 ? void 0 : foundColumn.meta) === null || _a === void 0 ? void 0 : _a.selectedAlways);\n    return {\n      id,\n      isSelected: isProtected ? true : isSelected,\n      isProtected,\n      title: foundColumn ? getColumnStringTitle(foundColumn) : id\n    };\n  });\n}\nfunction prepareColumnSetupItems(items) {\n  return items.map(({\n    id,\n    title,\n    isSelected,\n    isProtected\n  }) => ({\n    id,\n    title,\n    selected: isSelected,\n    required: isProtected\n  }));\n}\nfunction prepareUpdateSettings(items) {\n  return items.map(({\n    id,\n    selected\n  }) => ({\n    id,\n    isSelected: selected\n  }));\n}\nconst b = block('table');\nexport function withTableSettings(ComponentOrOptions) {\n  function tableWithSettingsFactory(TableComponent, {\n    width,\n    sortable\n  } = {}) {\n    const componentName = getComponentName(TableComponent);\n    function TableWithSettings(_a) {\n      var {\n          updateSettings,\n          settings,\n          columns,\n          settingsPopupWidth\n        } = _a,\n        restTableProps = __rest(_a, [\"updateSettings\", \"settings\", \"columns\", \"settingsPopupWidth\"]);\n      const actualItems = React.useMemo(() => getActualItems(columns, settings || []), [columns, settings]);\n      const onUpdateColumns = React.useCallback(newItems => {\n        updateSettings(prepareUpdateSettings(newItems));\n      }, [updateSettings]);\n      const columnSetupItems = React.useMemo(() => prepareColumnSetupItems(actualItems), [actualItems]);\n      const enhancedColumns = React.useMemo(() => enhanceSystemColumn(filterColumns(columns, actualItems), systemColumn => {\n        // eslint-disable-next-line react/display-name\n        systemColumn.name = () => React.createElement(\"div\", {\n          className: b('settings')\n        }, React.createElement(TableColumnSetup, {\n          popupWidth: settingsPopupWidth || width,\n          popupPlacement: ['bottom-end', 'bottom', 'top-end', 'top'],\n          sortable: sortable,\n          onUpdate: onUpdateColumns,\n          items: columnSetupItems,\n          switcher: React.createElement(Button, {\n            view: \"flat\",\n            className: b('settings-button')\n          }, React.createElement(Icon, {\n            data: Gear\n          }))\n        }));\n      }), [actualItems, columnSetupItems, columns, onUpdateColumns, settingsPopupWidth]);\n      return React.createElement(React.Fragment, null, React.createElement(TableComponent, Object.assign({}, restTableProps, {\n        columns: enhancedColumns\n      })));\n    }\n    TableWithSettings.displayName = `withTableSettings(${componentName})`;\n    return TableWithSettings;\n  }\n  if (typeof ComponentOrOptions === 'function') {\n    return tableWithSettingsFactory(ComponentOrOptions);\n  } else {\n    return TableComponent => tableWithSettingsFactory(TableComponent, ComponentOrOptions);\n  }\n}","map":{"version":3,"names":["__rest","React","Gear","_get","_isString","_last","Button","Icon","block","getComponentName","actionsColumnId","enhanceSystemColumn","selectionColumnId","TableColumnSetup","filterColumns","columns","settings","filteredColumns","map","id","isSelected","columnSettings","find","column","filter","unshift","lastColumn","push","getColumnStringTitle","name","originalName","getActualItems","newColumnSettings","every","setting","_a","meta","selectedByDefault","some","concat","foundColumn","isProtected","Boolean","selectedAlways","title","prepareColumnSetupItems","items","selected","required","prepareUpdateSettings","b","withTableSettings","ComponentOrOptions","tableWithSettingsFactory","TableComponent","width","sortable","componentName","TableWithSettings","updateSettings","settingsPopupWidth","restTableProps","actualItems","useMemo","onUpdateColumns","useCallback","newItems","columnSetupItems","enhancedColumns","systemColumn","createElement","className","popupWidth","popupPlacement","onUpdate","switcher","view","data","Fragment","Object","assign","displayName"],"sources":["/Users/ilaulanov/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/withTableSettings.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport React from 'react';\nimport { Gear } from '@gravity-ui/icons';\nimport _get from 'lodash/get';\nimport _isString from 'lodash/isString';\nimport _last from 'lodash/last';\nimport { Button } from '../../../Button';\nimport { Icon } from '../../../Icon';\nimport { block } from '../../../utils/cn';\nimport { getComponentName } from '../../../utils/getComponentName';\nimport { actionsColumnId, enhanceSystemColumn } from '../withTableActions/withTableActions';\nimport { selectionColumnId } from '../withTableSelection/withTableSelection';\nimport { TableColumnSetup } from './TableColumnSetup/TableColumnSetup';\nimport './withTableSettings.css';\nexport function filterColumns(columns, settings) {\n    const filteredColumns = settings\n        .map(({ id, isSelected }) => ({\n        isSelected,\n        columnSettings: columns.find((column) => id === column.id),\n    }))\n        .filter(({ isSelected, columnSettings }) => isSelected && columnSettings)\n        .map(({ columnSettings }) => columnSettings);\n    if (columns[0] && columns[0].id === selectionColumnId) {\n        filteredColumns.unshift(columns[0]);\n    }\n    const lastColumn = _last(columns);\n    if (lastColumn && lastColumn.id === actionsColumnId) {\n        filteredColumns.push(lastColumn);\n    }\n    return filteredColumns;\n}\nexport function getColumnStringTitle(column) {\n    if (_isString(column.name)) {\n        return column.name;\n    }\n    const originalName = _get(column, ['meta', '_originalName']);\n    if (_isString(originalName)) {\n        return originalName;\n    }\n    return column.id;\n}\nexport function getActualItems(columns, settings) {\n    const newColumnSettings = columns\n        .filter(({ id }) => id !== actionsColumnId &&\n        id !== selectionColumnId &&\n        settings.every((setting) => setting.id !== id))\n        .map((column) => {\n        var _a;\n        return ({\n            id: column.id,\n            isSelected: ((_a = column.meta) === null || _a === void 0 ? void 0 : _a.selectedByDefault) !== false,\n        });\n    });\n    return settings\n        .filter(({ id }) => columns.some((column) => id === column.id))\n        .concat(newColumnSettings)\n        .map(({ id, isSelected }) => {\n        var _a;\n        const foundColumn = columns.find((column) => column.id === id);\n        const isProtected = Boolean((_a = foundColumn === null || foundColumn === void 0 ? void 0 : foundColumn.meta) === null || _a === void 0 ? void 0 : _a.selectedAlways);\n        return {\n            id,\n            isSelected: isProtected ? true : isSelected,\n            isProtected,\n            title: foundColumn ? getColumnStringTitle(foundColumn) : id,\n        };\n    });\n}\nfunction prepareColumnSetupItems(items) {\n    return items.map(({ id, title, isSelected, isProtected }) => ({\n        id,\n        title,\n        selected: isSelected,\n        required: isProtected,\n    }));\n}\nfunction prepareUpdateSettings(items) {\n    return items.map(({ id, selected }) => ({\n        id,\n        isSelected: selected,\n    }));\n}\nconst b = block('table');\nexport function withTableSettings(ComponentOrOptions) {\n    function tableWithSettingsFactory(TableComponent, { width, sortable } = {}) {\n        const componentName = getComponentName(TableComponent);\n        function TableWithSettings(_a) {\n            var { updateSettings, settings, columns, settingsPopupWidth } = _a, restTableProps = __rest(_a, [\"updateSettings\", \"settings\", \"columns\", \"settingsPopupWidth\"]);\n            const actualItems = React.useMemo(() => getActualItems(columns, settings || []), [columns, settings]);\n            const onUpdateColumns = React.useCallback((newItems) => {\n                updateSettings(prepareUpdateSettings(newItems));\n            }, [updateSettings]);\n            const columnSetupItems = React.useMemo(() => prepareColumnSetupItems(actualItems), [actualItems]);\n            const enhancedColumns = React.useMemo(() => enhanceSystemColumn(filterColumns(columns, actualItems), (systemColumn) => {\n                // eslint-disable-next-line react/display-name\n                systemColumn.name = () => (React.createElement(\"div\", { className: b('settings') },\n                    React.createElement(TableColumnSetup, { popupWidth: settingsPopupWidth || width, popupPlacement: ['bottom-end', 'bottom', 'top-end', 'top'], sortable: sortable, onUpdate: onUpdateColumns, items: columnSetupItems, switcher: React.createElement(Button, { view: \"flat\", className: b('settings-button') },\n                            React.createElement(Icon, { data: Gear })) })));\n            }), [actualItems, columnSetupItems, columns, onUpdateColumns, settingsPopupWidth]);\n            return (React.createElement(React.Fragment, null,\n                React.createElement(TableComponent, Object.assign({}, restTableProps, { columns: enhancedColumns }))));\n        }\n        TableWithSettings.displayName = `withTableSettings(${componentName})`;\n        return TableWithSettings;\n    }\n    if (typeof ComponentOrOptions === 'function') {\n        return tableWithSettingsFactory(ComponentOrOptions);\n    }\n    else {\n        return (TableComponent) => tableWithSettingsFactory(TableComponent, ComponentOrOptions);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}