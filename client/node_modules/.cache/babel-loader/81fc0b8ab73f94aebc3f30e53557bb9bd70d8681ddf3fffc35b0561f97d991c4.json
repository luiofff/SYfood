{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React from 'react';\nimport { Gear } from '@gravity-ui/icons';\nimport _get from 'lodash/get';\nimport _isString from 'lodash/isString';\nimport _last from 'lodash/last';\nimport { Button } from '../../../Button';\nimport { Icon } from '../../../Icon';\nimport { block } from '../../../utils/cn';\nimport { getComponentName } from '../../../utils/getComponentName';\nimport { actionsColumnId, enhanceSystemColumn } from '../withTableActions/withTableActions';\nimport { selectionColumnId } from '../withTableSelection/withTableSelection';\nimport { TableColumnSetup } from './TableColumnSetup/TableColumnSetup';\nimport './withTableSettings.css';\nexport function filterColumns(columns, settings) {\n  const filteredColumns = settings.map(_ref => {\n    let {\n      id,\n      isSelected\n    } = _ref;\n    return {\n      isSelected,\n      columnSettings: columns.find(column => id === column.id)\n    };\n  }).filter(_ref2 => {\n    let {\n      isSelected,\n      columnSettings\n    } = _ref2;\n    return isSelected && columnSettings;\n  }).map(_ref3 => {\n    let {\n      columnSettings\n    } = _ref3;\n    return columnSettings;\n  });\n  if (columns[0] && columns[0].id === selectionColumnId) {\n    filteredColumns.unshift(columns[0]);\n  }\n  const lastColumn = _last(columns);\n  if (lastColumn && lastColumn.id === actionsColumnId) {\n    filteredColumns.push(lastColumn);\n  }\n  return filteredColumns;\n}\nexport function getColumnStringTitle(column) {\n  if (_isString(column.name)) {\n    return column.name;\n  }\n  const originalName = _get(column, ['meta', '_originalName']);\n  if (_isString(originalName)) {\n    return originalName;\n  }\n  return column.id;\n}\nexport function getActualItems(columns, settings) {\n  const newColumnSettings = columns.filter(_ref4 => {\n    let {\n      id\n    } = _ref4;\n    return id !== actionsColumnId && id !== selectionColumnId && settings.every(setting => setting.id !== id);\n  }).map(column => {\n    var _a;\n    return {\n      id: column.id,\n      isSelected: ((_a = column.meta) === null || _a === void 0 ? void 0 : _a.selectedByDefault) !== false\n    };\n  });\n  return settings.filter(_ref5 => {\n    let {\n      id\n    } = _ref5;\n    return columns.some(column => id === column.id);\n  }).concat(newColumnSettings).map(_ref6 => {\n    let {\n      id,\n      isSelected\n    } = _ref6;\n    var _a;\n    const foundColumn = columns.find(column => column.id === id);\n    const isProtected = Boolean((_a = foundColumn === null || foundColumn === void 0 ? void 0 : foundColumn.meta) === null || _a === void 0 ? void 0 : _a.selectedAlways);\n    return {\n      id,\n      isSelected: isProtected ? true : isSelected,\n      isProtected,\n      title: foundColumn ? getColumnStringTitle(foundColumn) : id\n    };\n  });\n}\nfunction prepareColumnSetupItems(items) {\n  return items.map(_ref7 => {\n    let {\n      id,\n      title,\n      isSelected,\n      isProtected\n    } = _ref7;\n    return {\n      id,\n      title,\n      selected: isSelected,\n      required: isProtected\n    };\n  });\n}\nfunction prepareUpdateSettings(items) {\n  return items.map(_ref8 => {\n    let {\n      id,\n      selected\n    } = _ref8;\n    return {\n      id,\n      isSelected: selected\n    };\n  });\n}\nconst b = block('table');\nexport function withTableSettings(ComponentOrOptions) {\n  function tableWithSettingsFactory(TableComponent) {\n    let {\n      width,\n      sortable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const componentName = getComponentName(TableComponent);\n    function TableWithSettings(_a) {\n      var {\n          updateSettings,\n          settings,\n          columns,\n          settingsPopupWidth\n        } = _a,\n        restTableProps = __rest(_a, [\"updateSettings\", \"settings\", \"columns\", \"settingsPopupWidth\"]);\n      const actualItems = React.useMemo(() => getActualItems(columns, settings || []), [columns, settings]);\n      const onUpdateColumns = React.useCallback(newItems => {\n        updateSettings(prepareUpdateSettings(newItems));\n      }, [updateSettings]);\n      const columnSetupItems = React.useMemo(() => prepareColumnSetupItems(actualItems), [actualItems]);\n      const enhancedColumns = React.useMemo(() => enhanceSystemColumn(filterColumns(columns, actualItems), systemColumn => {\n        // eslint-disable-next-line react/display-name\n        systemColumn.name = () => React.createElement(\"div\", {\n          className: b('settings')\n        }, React.createElement(TableColumnSetup, {\n          popupWidth: settingsPopupWidth || width,\n          popupPlacement: ['bottom-end', 'bottom', 'top-end', 'top'],\n          sortable: sortable,\n          onUpdate: onUpdateColumns,\n          items: columnSetupItems,\n          renderSwitcher: _ref9 => {\n            let {\n              onClick\n            } = _ref9;\n            return React.createElement(Button, {\n              view: \"flat\",\n              className: b('settings-button'),\n              onClick: onClick\n            }, React.createElement(Icon, {\n              data: Gear\n            }));\n          }\n        }));\n      }), [actualItems, columnSetupItems, columns, onUpdateColumns, settingsPopupWidth]);\n      return React.createElement(React.Fragment, null, React.createElement(TableComponent, Object.assign({}, restTableProps, {\n        columns: enhancedColumns\n      })));\n    }\n    TableWithSettings.displayName = \"withTableSettings(\".concat(componentName, \")\");\n    return TableWithSettings;\n  }\n  if (typeof ComponentOrOptions === 'function') {\n    return tableWithSettingsFactory(ComponentOrOptions);\n  } else {\n    return TableComponent => tableWithSettingsFactory(TableComponent, ComponentOrOptions);\n  }\n}","map":{"version":3,"names":["__rest","React","Gear","_get","_isString","_last","Button","Icon","block","getComponentName","actionsColumnId","enhanceSystemColumn","selectionColumnId","TableColumnSetup","filterColumns","columns","settings","filteredColumns","map","_ref","id","isSelected","columnSettings","find","column","filter","_ref2","_ref3","unshift","lastColumn","push","getColumnStringTitle","name","originalName","getActualItems","newColumnSettings","_ref4","every","setting","_a","meta","selectedByDefault","_ref5","some","concat","_ref6","foundColumn","isProtected","Boolean","selectedAlways","title","prepareColumnSetupItems","items","_ref7","selected","required","prepareUpdateSettings","_ref8","b","withTableSettings","ComponentOrOptions","tableWithSettingsFactory","TableComponent","width","sortable","arguments","length","undefined","componentName","TableWithSettings","updateSettings","settingsPopupWidth","restTableProps","actualItems","useMemo","onUpdateColumns","useCallback","newItems","columnSetupItems","enhancedColumns","systemColumn","createElement","className","popupWidth","popupPlacement","onUpdate","renderSwitcher","_ref9","onClick","view","data","Fragment","Object","assign","displayName"],"sources":["/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/withTableSettings.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport React from 'react';\nimport { Gear } from '@gravity-ui/icons';\nimport _get from 'lodash/get';\nimport _isString from 'lodash/isString';\nimport _last from 'lodash/last';\nimport { Button } from '../../../Button';\nimport { Icon } from '../../../Icon';\nimport { block } from '../../../utils/cn';\nimport { getComponentName } from '../../../utils/getComponentName';\nimport { actionsColumnId, enhanceSystemColumn } from '../withTableActions/withTableActions';\nimport { selectionColumnId } from '../withTableSelection/withTableSelection';\nimport { TableColumnSetup } from './TableColumnSetup/TableColumnSetup';\nimport './withTableSettings.css';\nexport function filterColumns(columns, settings) {\n    const filteredColumns = settings\n        .map(({ id, isSelected }) => ({\n        isSelected,\n        columnSettings: columns.find((column) => id === column.id),\n    }))\n        .filter(({ isSelected, columnSettings }) => isSelected && columnSettings)\n        .map(({ columnSettings }) => columnSettings);\n    if (columns[0] && columns[0].id === selectionColumnId) {\n        filteredColumns.unshift(columns[0]);\n    }\n    const lastColumn = _last(columns);\n    if (lastColumn && lastColumn.id === actionsColumnId) {\n        filteredColumns.push(lastColumn);\n    }\n    return filteredColumns;\n}\nexport function getColumnStringTitle(column) {\n    if (_isString(column.name)) {\n        return column.name;\n    }\n    const originalName = _get(column, ['meta', '_originalName']);\n    if (_isString(originalName)) {\n        return originalName;\n    }\n    return column.id;\n}\nexport function getActualItems(columns, settings) {\n    const newColumnSettings = columns\n        .filter(({ id }) => id !== actionsColumnId &&\n        id !== selectionColumnId &&\n        settings.every((setting) => setting.id !== id))\n        .map((column) => {\n        var _a;\n        return ({\n            id: column.id,\n            isSelected: ((_a = column.meta) === null || _a === void 0 ? void 0 : _a.selectedByDefault) !== false,\n        });\n    });\n    return settings\n        .filter(({ id }) => columns.some((column) => id === column.id))\n        .concat(newColumnSettings)\n        .map(({ id, isSelected }) => {\n        var _a;\n        const foundColumn = columns.find((column) => column.id === id);\n        const isProtected = Boolean((_a = foundColumn === null || foundColumn === void 0 ? void 0 : foundColumn.meta) === null || _a === void 0 ? void 0 : _a.selectedAlways);\n        return {\n            id,\n            isSelected: isProtected ? true : isSelected,\n            isProtected,\n            title: foundColumn ? getColumnStringTitle(foundColumn) : id,\n        };\n    });\n}\nfunction prepareColumnSetupItems(items) {\n    return items.map(({ id, title, isSelected, isProtected }) => ({\n        id,\n        title,\n        selected: isSelected,\n        required: isProtected,\n    }));\n}\nfunction prepareUpdateSettings(items) {\n    return items.map(({ id, selected }) => ({\n        id,\n        isSelected: selected,\n    }));\n}\nconst b = block('table');\nexport function withTableSettings(ComponentOrOptions) {\n    function tableWithSettingsFactory(TableComponent, { width, sortable } = {}) {\n        const componentName = getComponentName(TableComponent);\n        function TableWithSettings(_a) {\n            var { updateSettings, settings, columns, settingsPopupWidth } = _a, restTableProps = __rest(_a, [\"updateSettings\", \"settings\", \"columns\", \"settingsPopupWidth\"]);\n            const actualItems = React.useMemo(() => getActualItems(columns, settings || []), [columns, settings]);\n            const onUpdateColumns = React.useCallback((newItems) => {\n                updateSettings(prepareUpdateSettings(newItems));\n            }, [updateSettings]);\n            const columnSetupItems = React.useMemo(() => prepareColumnSetupItems(actualItems), [actualItems]);\n            const enhancedColumns = React.useMemo(() => enhanceSystemColumn(filterColumns(columns, actualItems), (systemColumn) => {\n                // eslint-disable-next-line react/display-name\n                systemColumn.name = () => (React.createElement(\"div\", { className: b('settings') },\n                    React.createElement(TableColumnSetup, { popupWidth: settingsPopupWidth || width, popupPlacement: ['bottom-end', 'bottom', 'top-end', 'top'], sortable: sortable, onUpdate: onUpdateColumns, items: columnSetupItems, renderSwitcher: ({ onClick }) => (React.createElement(Button, { view: \"flat\", className: b('settings-button'), onClick: onClick },\n                            React.createElement(Icon, { data: Gear }))) })));\n            }), [actualItems, columnSetupItems, columns, onUpdateColumns, settingsPopupWidth]);\n            return (React.createElement(React.Fragment, null,\n                React.createElement(TableComponent, Object.assign({}, restTableProps, { columns: enhancedColumns }))));\n        }\n        TableWithSettings.displayName = `withTableSettings(${componentName})`;\n        return TableWithSettings;\n    }\n    if (typeof ComponentOrOptions === 'function') {\n        return tableWithSettingsFactory(ComponentOrOptions);\n    }\n    else {\n        return (TableComponent) => tableWithSettingsFactory(TableComponent, ComponentOrOptions);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}