{"ast":null,"code":"import React from 'react';\nconst getViewportSize = () => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    width: (_c = (_b = (_a = window === null || window === void 0 ? void 0 : window.visualViewport) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : window === null || window === void 0 ? void 0 : window.innerWidth) !== null && _c !== void 0 ? _c : undefined,\n    height: (_f = (_e = (_d = window === null || window === void 0 ? void 0 : window.visualViewport) === null || _d === void 0 ? void 0 : _d.height) !== null && _e !== void 0 ? _e : window === null || window === void 0 ? void 0 : window.innerHeight) !== null && _f !== void 0 ? _f : undefined\n  };\n};\n/**\n * A hook to get the size of the viewport when resizing\n *\n * @return - {width, height}\n */\nexport const useViewportSize = () => {\n  const [size, setSize] = React.useState(getViewportSize());\n  React.useEffect(() => {\n    var _a;\n    const onResize = () => {\n      let newSize = getViewportSize();\n      if (newSize.width === (size === null || size === void 0 ? void 0 : size.width) && newSize.height === (size === null || size === void 0 ? void 0 : size.height)) {\n        newSize = size;\n      }\n      setSize(newSize);\n    };\n    ((_a = window.visualViewport) !== null && _a !== void 0 ? _a : window).addEventListener('resize', onResize);\n    return () => {\n      var _a;\n      ((_a = window.visualViewport) !== null && _a !== void 0 ? _a : window).removeEventListener('resize', onResize);\n    };\n  }, [size]);\n  return size;\n};","map":{"version":3,"names":["React","getViewportSize","_a","_b","_c","_d","_e","_f","width","window","visualViewport","innerWidth","undefined","height","innerHeight","useViewportSize","size","setSize","useState","useEffect","onResize","newSize","addEventListener","removeEventListener"],"sources":["/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@gravity-ui/uikit/build/esm/hooks/useViewportSize/useViewportSize.js"],"sourcesContent":["import React from 'react';\nconst getViewportSize = () => {\n    var _a, _b, _c, _d, _e, _f;\n    return ({\n        width: (_c = (_b = (_a = window === null || window === void 0 ? void 0 : window.visualViewport) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : window === null || window === void 0 ? void 0 : window.innerWidth) !== null && _c !== void 0 ? _c : undefined,\n        height: (_f = (_e = (_d = window === null || window === void 0 ? void 0 : window.visualViewport) === null || _d === void 0 ? void 0 : _d.height) !== null && _e !== void 0 ? _e : window === null || window === void 0 ? void 0 : window.innerHeight) !== null && _f !== void 0 ? _f : undefined,\n    });\n};\n/**\n * A hook to get the size of the viewport when resizing\n *\n * @return - {width, height}\n */\nexport const useViewportSize = () => {\n    const [size, setSize] = React.useState(getViewportSize());\n    React.useEffect(() => {\n        var _a;\n        const onResize = () => {\n            let newSize = getViewportSize();\n            if (newSize.width === (size === null || size === void 0 ? void 0 : size.width) && newSize.height === (size === null || size === void 0 ? void 0 : size.height)) {\n                newSize = size;\n            }\n            setSize(newSize);\n        };\n        ((_a = window.visualViewport) !== null && _a !== void 0 ? _a : window).addEventListener('resize', onResize);\n        return () => {\n            var _a;\n            ((_a = window.visualViewport) !== null && _a !== void 0 ? _a : window).removeEventListener('resize', onResize);\n        };\n    }, [size]);\n    return size;\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC1B,IAAIC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;EAC1B,OAAQ;IACJC,KAAK,EAAE,CAACJ,EAAE,GAAG,CAACD,EAAE,GAAG,CAACD,EAAE,GAAGO,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACC,cAAc,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACM,KAAK,MAAM,IAAI,IAAIL,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGM,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACE,UAAU,MAAM,IAAI,IAAIP,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGQ,SAAS;IAC7RC,MAAM,EAAE,CAACN,EAAE,GAAG,CAACD,EAAE,GAAG,CAACD,EAAE,GAAGI,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACC,cAAc,MAAM,IAAI,IAAIL,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACQ,MAAM,MAAM,IAAI,IAAIP,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGG,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACK,WAAW,MAAM,IAAI,IAAIP,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGK;EAC3R,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,eAAe,GAAGA,CAAA,KAAM;EACjC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGjB,KAAK,CAACkB,QAAQ,CAACjB,eAAe,CAAC,CAAC,CAAC;EACzDD,KAAK,CAACmB,SAAS,CAAC,MAAM;IAClB,IAAIjB,EAAE;IACN,MAAMkB,QAAQ,GAAGA,CAAA,KAAM;MACnB,IAAIC,OAAO,GAAGpB,eAAe,CAAC,CAAC;MAC/B,IAAIoB,OAAO,CAACb,KAAK,MAAMQ,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACR,KAAK,CAAC,IAAIa,OAAO,CAACR,MAAM,MAAMG,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACH,MAAM,CAAC,EAAE;QAC5JQ,OAAO,GAAGL,IAAI;MAClB;MACAC,OAAO,CAACI,OAAO,CAAC;IACpB,CAAC;IACD,CAAC,CAACnB,EAAE,GAAGO,MAAM,CAACC,cAAc,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGO,MAAM,EAAEa,gBAAgB,CAAC,QAAQ,EAAEF,QAAQ,CAAC;IAC3G,OAAO,MAAM;MACT,IAAIlB,EAAE;MACN,CAAC,CAACA,EAAE,GAAGO,MAAM,CAACC,cAAc,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGO,MAAM,EAAEc,mBAAmB,CAAC,QAAQ,EAAEH,QAAQ,CAAC;IAClH,CAAC;EACL,CAAC,EAAE,CAACJ,IAAI,CAAC,CAAC;EACV,OAAOA,IAAI;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}