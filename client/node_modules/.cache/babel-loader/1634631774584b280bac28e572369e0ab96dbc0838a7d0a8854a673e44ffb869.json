{"ast":null,"code":"import $6nfFC$react, { useRef as $6nfFC$useRef, useContext as $6nfFC$useContext, useMemo as $6nfFC$useMemo, useEffect as $6nfFC$useEffect, useState as $6nfFC$useState, useCallback as $6nfFC$useCallback } from \"react\";\nimport { useLayoutEffect as $6nfFC$useLayoutEffect, runAfterTransition as $6nfFC$runAfterTransition, focusWithoutScrolling as $6nfFC$focusWithoutScrolling, mergeProps as $6nfFC$mergeProps, useSyncRef as $6nfFC$useSyncRef } from \"@react-aria/utils\";\nimport { getInteractionModality as $6nfFC$getInteractionModality, isFocusVisible as $6nfFC$isFocusVisible, useFocusVisibleListener as $6nfFC$useFocusVisibleListener, useFocus as $6nfFC$useFocus, useFocusWithin as $6nfFC$useFocusWithin, useKeyboard as $6nfFC$useKeyboard } from \"@react-aria/interactions\";\nimport $6nfFC$clsx from \"clsx\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */ /*\n       * Copyright 2020 Adobe. All rights reserved.\n       * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n       * you may not use this file except in compliance with the License. You may obtain a copy\n       * of the License at http://www.apache.org/licenses/LICENSE-2.0\n       *\n       * Unless required by applicable law or agreed to in writing, software distributed under\n       * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n       * OF ANY KIND, either express or implied. See the License for the specific language\n       * governing permissions and limitations under the License.\n       */\n\nfunction $6a99195332edec8b$export$80f3e147d781571c(element) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if ((0, $6nfFC$getInteractionModality)() === \"virtual\") {\n    let lastFocusedElement = document.activeElement;\n    (0, $6nfFC$runAfterTransition)(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) (0, $6nfFC$focusWithoutScrolling)(element);\n    });\n  } else (0, $6nfFC$focusWithoutScrolling)(element);\n}\n\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $645f2e67b85a24c9$var$isStyleVisible(element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) return false;\n  let {\n    display: display,\n    visibility: visibility\n  } = element.style;\n  let isVisible = display !== \"none\" && visibility !== \"hidden\" && visibility !== \"collapse\";\n  if (isVisible) {\n    const {\n      getComputedStyle: getComputedStyle\n    } = element.ownerDocument.defaultView;\n    let {\n      display: computedDisplay,\n      visibility: computedVisibility\n    } = getComputedStyle(element);\n    isVisible = computedDisplay !== \"none\" && computedVisibility !== \"hidden\" && computedVisibility !== \"collapse\";\n  }\n  return isVisible;\n}\nfunction $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {\n  return !element.hasAttribute(\"hidden\") && (element.nodeName === \"DETAILS\" && childElement && childElement.nodeName !== \"SUMMARY\" ? element.hasAttribute(\"open\") : true);\n}\nfunction $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {\n  return element.nodeName !== \"#comment\" && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));\n}\nconst $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/(0, $6nfFC$react).createContext(null);\nlet $9bf71ea28793e738$var$activeScope = null;\nfunction $9bf71ea28793e738$export$20e40289641fbbb6(props) {\n  let {\n    children: children,\n    contain: contain,\n    restoreFocus: restoreFocus,\n    autoFocus: autoFocus\n  } = props;\n  let startRef = (0, $6nfFC$useRef)();\n  let endRef = (0, $6nfFC$useRef)();\n  let scopeRef = (0, $6nfFC$useRef)([]);\n  let {\n    parentNode: parentNode\n  } = (0, $6nfFC$useContext)($9bf71ea28793e738$var$FocusContext) || {};\n  // Create a tree node here so we can add children to it even before it is added to the tree.\n  let node = (0, $6nfFC$useMemo)(() => new $9bf71ea28793e738$var$TreeNode({\n    scopeRef: scopeRef\n  }), [scopeRef]);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n    // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n    // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n    // that is being added should get the activeScope as its parent.\n    let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;\n    if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {\n      let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n      if (activeNode) parent = activeNode;\n    }\n    // Add the node to the parent, and to the tree.\n    parent.addChild(node);\n    $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node);\n  }, [node, parentNode]);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    let node = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n    node.contain = contain;\n  }, [contain]);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n    scopeRef.current = nodes;\n  }, [children]);\n  $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);\n  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);\n  // this layout effect needs to run last so that focusScopeTree cleanup happens at the last moment possible\n  (0, $6nfFC$useEffect)(() => {\n    if (scopeRef) {\n      let activeElement = document.activeElement;\n      let scope = null;\n      // In strict mode, active scope is incorrectly updated since cleanup will run even though scope hasn't unmounted.\n      // To fix this, we need to update the actual activeScope here\n      if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {\n        // Since useLayoutEffect runs for children first, we need to traverse the focusScope tree and find the bottom most scope that\n        // contains the active element and set that as the activeScope\n        for (let node of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse()) if ($9bf71ea28793e738$var$isElementInScope(activeElement, node.scopeRef.current)) scope = node;\n        if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$var$activeScope = scope.scopeRef;\n      }\n      return () => {\n        // Scope may have been re-parented.\n        let parentScope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).parent.scopeRef;\n        // Restore the active scope on unmount if this scope or a descendant scope is active.\n        // Parent effect cleanups run before children, so we need to check if the\n        // parent scope actually still exists before restoring the active scope to it.\n        if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;\n        $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);\n      };\n    }\n  }, [scopeRef]);\n  let focusManager = (0, $6nfFC$useMemo)(() => $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);\n  let value = (0, $6nfFC$useMemo)(() => ({\n    focusManager: focusManager,\n    parentNode: node\n  }), [node, focusManager]);\n  return /*#__PURE__*/(0, $6nfFC$react).createElement($9bf71ea28793e738$var$FocusContext.Provider, {\n    value: value\n  }, /*#__PURE__*/(0, $6nfFC$react).createElement(\"span\", {\n    \"data-focus-scope-start\": true,\n    hidden: true,\n    ref: startRef\n  }), children, /*#__PURE__*/(0, $6nfFC$react).createElement(\"span\", {\n    \"data-focus-scope-end\": true,\n    hidden: true,\n    ref: endRef\n  }));\n}\nfunction $9bf71ea28793e738$export$10c5169755ce7bd7() {\n  var _useContext;\n  return (_useContext = (0, $6nfFC$useContext)($9bf71ea28793e738$var$FocusContext)) === null || _useContext === void 0 ? void 0 : _useContext.focusManager;\n}\nfunction $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {\n  return {\n    focusNext(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode();\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode();\n      }\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusPrevious(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode();\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode();\n      }\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode();\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    }\n  };\n}\nconst $9bf71ea28793e738$var$focusableElements = [\"input:not([disabled]):not([type=hidden])\", \"select:not([disabled])\", \"textarea:not([disabled])\", \"button:not([disabled])\", \"a[href]\", \"area[href]\", \"summary\", \"iframe\", \"object\", \"embed\", \"audio[controls]\", \"video[controls]\", \"[contenteditable]\"];\nconst $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(\":not([hidden]),\") + \",[tabindex]:not([disabled]):not([hidden])\";\n$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\nfunction $9bf71ea28793e738$var$getScopeRoot(scope) {\n  return scope[0].parentElement;\n}\nfunction $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) return false;\n    scope = scope.parent;\n  }\n  return true;\n}\nfunction $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {\n  let focusedNode = (0, $6nfFC$useRef)();\n  let raf = (0, $6nfFC$useRef)(null);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = null;\n      }\n      return;\n    }\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = e => {\n      if (e.key !== \"Tab\" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef)) return;\n      let focusedElement = document.activeElement;\n      let scope = scopeRef.current;\n      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: true\n      }, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      }\n      e.preventDefault();\n      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);\n    };\n    let onFocus = e => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(e.target, scopeRef.current)) {\n        $9bf71ea28793e738$var$activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) focusedNode.current.focus();else if ($9bf71ea28793e738$var$activeScope) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = e.target;\n    };\n    let onBlur = e => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      if (raf.current) cancelAnimationFrame(raf.current);\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(document.activeElement, scopeRef)) {\n          $9bf71ea28793e738$var$activeScope = scopeRef;\n          if (document.body.contains(e.target)) {\n            focusedNode.current = e.target;\n            focusedNode.current.focus();\n          } else if ($9bf71ea28793e738$var$activeScope) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n        }\n      });\n    };\n    document.addEventListener(\"keydown\", onKeyDown, false);\n    document.addEventListener(\"focusin\", onFocus, false);\n    scope.forEach(element => element.addEventListener(\"focusin\", onFocus, false));\n    scope.forEach(element => element.addEventListener(\"focusout\", onBlur, false));\n    return () => {\n      document.removeEventListener(\"keydown\", onKeyDown, false);\n      document.removeEventListener(\"focusin\", onFocus, false);\n      scope.forEach(element => element.removeEventListener(\"focusin\", onFocus, false));\n      scope.forEach(element => element.removeEventListener(\"focusout\", onBlur, false));\n    };\n  }, [scopeRef, contain]);\n  // This is a useLayoutEffect so it is guaranteed to run before our async synthetic blur\n  // eslint-disable-next-line arrow-body-style\n  (0, $6nfFC$useLayoutEffect)(() => {\n    return () => {\n      if (raf.current) cancelAnimationFrame(raf.current);\n    };\n  }, [raf]);\n}\nfunction $9bf71ea28793e738$var$isElementInAnyScope(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element);\n}\nfunction $9bf71ea28793e738$var$isElementInScope(element, scope) {\n  return scope.some(node => node.contains(element));\n}\nfunction $9bf71ea28793e738$var$isElementInChildScope(element, scope = null) {\n  // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n  if (element instanceof Element && element.closest(\"[data-react-aria-top-layer]\")) return true;\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {\n    scopeRef: s\n  } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {\n    if ($9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;\n  }\n  return false;\n}\nfunction $9bf71ea28793e738$export$1258395f99bf9cbf(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element, $9bf71ea28793e738$var$activeScope);\n}\nfunction $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {\n  var _focusScopeTree_getTreeNode;\n  let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) return true;\n    parent = parent.parent;\n  }\n  return false;\n}\nfunction $9bf71ea28793e738$var$focusElement(element, scroll = false) {\n  if (element != null && !scroll) try {\n    (0, $6a99195332edec8b$export$80f3e147d781571c)(element);\n  } catch (err) {\n    // ignore\n  } else if (element != null) try {\n    element.focus();\n  } catch (err) {\n    // ignore\n  }\n}\nfunction $9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {\n  let sentinel = scope[0].previousElementSibling;\n  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n    tabbable: tabbable\n  }, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n      tabbable: false\n    }, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n  $9bf71ea28793e738$var$focusElement(nextNode);\n}\nfunction $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {\n  const autoFocusRef = (0, $6nfFC$react).useRef(autoFocus);\n  (0, $6nfFC$useEffect)(() => {\n    if (autoFocusRef.current) {\n      $9bf71ea28793e738$var$activeScope = scopeRef;\n      if (!$9bf71ea28793e738$var$isElementInScope(document.activeElement, $9bf71ea28793e738$var$activeScope.current)) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\nfunction $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  (0, $6nfFC$useLayoutEffect)(() => {\n    if (restore || contain) return;\n    let scope = scopeRef.current;\n    let onFocus = e => {\n      let target = e.target;\n      if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;\n    };\n    document.addEventListener(\"focusin\", onFocus, false);\n    scope.forEach(element => element.addEventListener(\"focusin\", onFocus, false));\n    return () => {\n      document.removeEventListener(\"focusin\", onFocus, false);\n      scope.forEach(element => element.removeEventListener(\"focusin\", onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\nfunction $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) return false;\n    scope = scope.parent;\n  }\n  return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;\n}\nfunction $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  const nodeToRestoreRef = (0, $6nfFC$useRef)(typeof document !== \"undefined\" ? document.activeElement : null);\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  (0, $6nfFC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n    if (!restoreFocus || contain) return;\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(document.activeElement, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;\n    };\n    document.addEventListener(\"focusin\", onFocus, false);\n    scope.forEach(element => element.addEventListener(\"focusin\", onFocus, false));\n    return () => {\n      document.removeEventListener(\"focusin\", onFocus, false);\n      scope.forEach(element => element.removeEventListener(\"focusin\", onFocus, false));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    if (!restoreFocus) return;\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = e => {\n      if (e.key !== \"Tab\" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef)) return;\n      let focusedElement = document.activeElement;\n      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current)) return;\n      let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore;\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(document.body, {\n        tabbable: true\n      });\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n        nodeToRestore = null;\n        $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = null;\n      }\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode(); while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);else\n          // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n          // then move focus to the body.\n          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);\n      }\n    };\n    if (!contain) document.addEventListener(\"keydown\", onKeyDown, true);\n    return () => {\n      if (!contain) document.removeEventListener(\"keydown\", onKeyDown, true);\n    };\n  }, [scopeRef, restoreFocus, contain]);\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  (0, $6nfFC$useLayoutEffect)(() => {\n    if (!restoreFocus) return;\n    $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current;\n    return () => {\n      let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore;\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      if (restoreFocus && nodeToRestore && (\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      $9bf71ea28793e738$var$isElementInScope(document.activeElement, scopeRef.current) || document.activeElement === document.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (document.activeElement === document.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {\n                $9bf71ea28793e738$var$focusElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n            // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n            treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.scopeRef && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {\n                $9bf71ea28793e738$var$focusFirstInScope(treeNode.scopeRef.current, true);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus]);\n}\nfunction $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {\n  let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n    acceptNode(node) {\n      var _opts_from;\n      // Skip nodes inside the starting node.\n      if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node)) return NodeFilter.FILTER_REJECT;\n      if (node.matches(selector) && (0, $645f2e67b85a24c9$export$e989c0fffaa6b27a)(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;\n      return NodeFilter.FILTER_SKIP;\n    }\n  });\n  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;\n  return walker;\n}\nfunction $9bf71ea28793e738$export$c5251b9e124bf29(ref, defaultOptions = {}) {\n  return {\n    focusNext(opts = {}) {\n      let root = ref.current;\n      if (!root) return;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || document.activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;\n      let nextNode = walker.nextNode();\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode();\n      }\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusPrevious(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) return;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || document.activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;else {\n        let next = $9bf71ea28793e738$var$last(walker);\n        if (next) $9bf71ea28793e738$var$focusElement(next, true);\n        return next;\n      }\n      let previousNode = walker.previousNode();\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        previousNode = $9bf71ea28793e738$var$last(walker);\n      }\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) return;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) return;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let next = $9bf71ea28793e738$var$last(walker);\n      if (next) $9bf71ea28793e738$var$focusElement(next, true);\n      return next;\n    }\n  };\n}\nfunction $9bf71ea28793e738$var$last(walker) {\n  let next;\n  let last;\n  do {\n    last = walker.lastChild();\n    if (last) next = last;\n  } while (last);\n  return next;\n}\nclass $9bf71ea28793e738$var$Tree {\n  get size() {\n    return this.fastMap.size;\n  }\n  getTreeNode(data) {\n    return this.fastMap.get(data);\n  }\n  addTreeNode(scopeRef, parent, nodeToRestore) {\n    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);\n    let node = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: scopeRef\n    });\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) node.nodeToRestore = nodeToRestore;\n  }\n  addNode(node) {\n    this.fastMap.set(node.scopeRef, node);\n  }\n  removeTreeNode(scopeRef) {\n    // never remove the root\n    if (scopeRef === null) return;\n    let node = this.fastMap.get(scopeRef);\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;\n    let children = node.children;\n    parentNode.removeChild(node);\n    if (children.size > 0) children.forEach(child => parentNode.addChild(child));\n    this.fastMap.delete(node.scopeRef);\n  }\n  // Pre Order Depth First\n  *traverse(node = this.root) {\n    if (node.scopeRef != null) yield node;\n    if (node.children.size > 0) for (let child of node.children) yield* this.traverse(child);\n  }\n  clone() {\n    let newTree = new $9bf71ea28793e738$var$Tree();\n    for (let node of this.traverse()) newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);\n    return newTree;\n  }\n  constructor() {\n    this.fastMap = new Map();\n    this.root = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: null\n    });\n    this.fastMap.set(null, this.root);\n  }\n}\nclass $9bf71ea28793e738$var$TreeNode {\n  addChild(node) {\n    this.children.add(node);\n    node.parent = this;\n  }\n  removeChild(node) {\n    this.children.delete(node);\n    node.parent = undefined;\n  }\n  constructor(props) {\n    this.children = new Set();\n    this.contain = false;\n    this.scopeRef = props.scopeRef;\n  }\n}\nlet $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {\n  let {\n    autoFocus = false,\n    isTextInput: isTextInput,\n    within: within\n  } = props;\n  let state = (0, $6nfFC$useRef)({\n    isFocused: false,\n    isFocusVisible: autoFocus || (0, $6nfFC$isFocusVisible)()\n  });\n  let [isFocused, setFocused] = (0, $6nfFC$useState)(false);\n  let [isFocusVisibleState, setFocusVisible] = (0, $6nfFC$useState)(() => state.current.isFocused && state.current.isFocusVisible);\n  let updateState = (0, $6nfFC$useCallback)(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n  let onFocusChange = (0, $6nfFC$useCallback)(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n  (0, $6nfFC$useFocusVisibleListener)(isFocusVisible => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {\n    isTextInput: isTextInput\n  });\n  let {\n    focusProps: focusProps\n  } = (0, $6nfFC$useFocus)({\n    isDisabled: within,\n    onFocusChange: onFocusChange\n  });\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $6nfFC$useFocusWithin)({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n  return {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\nfunction $907718708eab68af$export$1a38b4ad7f578e1d(props) {\n  let {\n    children: children,\n    focusClass: focusClass,\n    focusRingClass: focusRingClass\n  } = props;\n  let {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = (0, $f7dceffc5ad7768b$export$4e328f61c538687f)(props);\n  let child = (0, $6nfFC$react).Children.only(children);\n  return /*#__PURE__*/(0, $6nfFC$react).cloneElement(child, (0, $6nfFC$mergeProps)(child.props, {\n    ...focusProps,\n    className: (0, $6nfFC$clsx)({\n      [focusClass || \"\"]: isFocused,\n      [focusRingClass || \"\"]: isFocusVisible\n    })\n  }));\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet $e6afbd83fe6ebbd2$var$FocusableContext = /*#__PURE__*/(0, $6nfFC$react).createContext(null);\nfunction $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {\n  let context = (0, $6nfFC$useContext)($e6afbd83fe6ebbd2$var$FocusableContext) || {};\n  (0, $6nfFC$useSyncRef)(context, ref);\n  // eslint-disable-next-line\n  let {\n    ref: _,\n    ...otherProps\n  } = context;\n  return otherProps;\n}\n/**\n * Provides DOM props to the nearest focusable child.\n */\nfunction $e6afbd83fe6ebbd2$var$FocusableProvider(props, ref) {\n  let {\n    children: children,\n    ...otherProps\n  } = props;\n  let context = {\n    ...otherProps,\n    ref: ref\n  };\n  return /*#__PURE__*/(0, $6nfFC$react).createElement($e6afbd83fe6ebbd2$var$FocusableContext.Provider, {\n    value: context\n  }, children);\n}\nlet $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 = /*#__PURE__*/(0, $6nfFC$react).forwardRef($e6afbd83fe6ebbd2$var$FocusableProvider);\nfunction $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {\n  let {\n    focusProps: focusProps\n  } = (0, $6nfFC$useFocus)(props);\n  let {\n    keyboardProps: keyboardProps\n  } = (0, $6nfFC$useKeyboard)(props);\n  let interactions = (0, $6nfFC$mergeProps)(focusProps, keyboardProps);\n  let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  let autoFocusRef = (0, $6nfFC$useRef)(props.autoFocus);\n  (0, $6nfFC$useEffect)(() => {\n    if (autoFocusRef.current && domRef.current) (0, $6a99195332edec8b$export$80f3e147d781571c)(domRef.current);\n    autoFocusRef.current = false;\n  }, [domRef]);\n  return {\n    focusableProps: (0, $6nfFC$mergeProps)({\n      ...interactions,\n      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n    }, interactionProps)\n  };\n}\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $83013635b024ae3d$export$eac1895992b9f3d6(ref, options) {\n  let isDisabled = options === null || options === void 0 ? void 0 : options.isDisabled;\n  let [hasTabbableChild, setHasTabbableChild] = (0, $6nfFC$useState)(false);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    if ((ref === null || ref === void 0 ? void 0 : ref.current) && !isDisabled) {\n      let update = () => {\n        if (ref.current) {\n          let walker = (0, $9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current, {\n            tabbable: true\n          });\n          setHasTabbableChild(!!walker.nextNode());\n        }\n      };\n      update();\n      // Update when new elements are inserted, or the tabIndex/disabled attribute updates.\n      let observer = new MutationObserver(update);\n      observer.observe(ref.current, {\n        subtree: true,\n        childList: true,\n        attributes: true,\n        attributeFilter: [\"tabIndex\", \"disabled\"]\n      });\n      return () => {\n        // Disconnect mutation observer when a React update occurs on the top-level component\n        // so we update synchronously after re-rendering. Otherwise React will emit act warnings\n        // in tests since mutation observers fire asynchronously. The mutation observer is necessary\n        // so we also update if a child component re-renders and adds/removes something tabbable.\n        observer.disconnect();\n      };\n    }\n  });\n  return isDisabled ? false : hasTabbableChild;\n}\nexport { $9bf71ea28793e738$export$20e40289641fbbb6 as FocusScope, $9bf71ea28793e738$export$10c5169755ce7bd7 as useFocusManager, $9bf71ea28793e738$export$2d6ec8fc375ceafa as getFocusableTreeWalker, $9bf71ea28793e738$export$c5251b9e124bf29 as createFocusManager, $9bf71ea28793e738$export$1258395f99bf9cbf as isElementInChildOfActiveScope, $907718708eab68af$export$1a38b4ad7f578e1d as FocusRing, $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 as FocusableProvider, $e6afbd83fe6ebbd2$export$4c014de7c8940b4c as useFocusable, $f7dceffc5ad7768b$export$4e328f61c538687f as useFocusRing, $6a99195332edec8b$export$80f3e147d781571c as focusSafely, $83013635b024ae3d$export$eac1895992b9f3d6 as useHasTabbableChild };","map":{"version":3,"names":["$6a99195332edec8b$export$80f3e147d781571c","element","$6nfFC$getInteractionModality","lastFocusedElement","document","activeElement","$6nfFC$runAfterTransition","contains","$6nfFC$focusWithoutScrolling","$645f2e67b85a24c9$var$isStyleVisible","HTMLElement","SVGElement","display","visibility","style","isVisible","getComputedStyle","ownerDocument","defaultView","computedDisplay","computedVisibility","$645f2e67b85a24c9$var$isAttributeVisible","childElement","hasAttribute","nodeName","$645f2e67b85a24c9$export$e989c0fffaa6b27a","parentElement","$9bf71ea28793e738$var$FocusContext","$6nfFC$react","createContext","$9bf71ea28793e738$var$activeScope","$9bf71ea28793e738$export$20e40289641fbbb6","props","children","contain","restoreFocus","autoFocus","startRef","$6nfFC$useRef","endRef","scopeRef","parentNode","$6nfFC$useContext","node","$6nfFC$useMemo","$9bf71ea28793e738$var$TreeNode","$6nfFC$useLayoutEffect","parent","$9bf71ea28793e738$export$d06fae2ee68b101e","root","getTreeNode","$9bf71ea28793e738$var$isAncestorScope","activeNode","addChild","addNode","current","nextSibling","nodes","push","$9bf71ea28793e738$var$useActiveScopeTracker","$9bf71ea28793e738$var$useFocusContainment","$9bf71ea28793e738$var$useRestoreFocus","$9bf71ea28793e738$var$useAutoFocus","$6nfFC$useEffect","scope","$9bf71ea28793e738$var$isElementInScope","traverse","parentScope","removeTreeNode","focusManager","$9bf71ea28793e738$var$createFocusManagerForScope","value","createElement","Provider","hidden","ref","$9bf71ea28793e738$export$10c5169755ce7bd7","_useContext","focusNext","opts","from","tabbable","wrap","accept","sentinel","previousElementSibling","walker","$9bf71ea28793e738$export$2d6ec8fc375ceafa","$9bf71ea28793e738$var$getScopeRoot","currentNode","nextNode","$9bf71ea28793e738$var$focusElement","focusPrevious","length","nextElementSibling","previousNode","focusFirst","focusLast","$9bf71ea28793e738$var$focusableElements","$9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR","join","$9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR","$9bf71ea28793e738$var$shouldContainFocus","focusedNode","raf","cancelAnimationFrame","onKeyDown","e","key","altKey","ctrlKey","metaKey","focusedElement","nextElement","shiftKey","preventDefault","onFocus","target","$9bf71ea28793e738$var$isElementInChildScope","focus","$9bf71ea28793e738$var$focusFirstInScope","onBlur","requestAnimationFrame","body","addEventListener","forEach","removeEventListener","$9bf71ea28793e738$var$isElementInAnyScope","some","Element","closest","s","$9bf71ea28793e738$export$1258395f99bf9cbf","ancestor","_focusScopeTree_getTreeNode","scroll","err","autoFocusRef","useRef","restore","$9bf71ea28793e738$var$shouldRestoreFocus","nodeToRestore","nodeToRestoreRef","stopPropagation","blur","clonedTree","clone","treeNode","selector","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","_opts_from","FILTER_REJECT","matches","FILTER_ACCEPT","FILTER_SKIP","$9bf71ea28793e738$export$c5251b9e124bf29","defaultOptions","next","$9bf71ea28793e738$var$last","last","lastChild","$9bf71ea28793e738$var$Tree","size","fastMap","data","get","addTreeNode","set","removeChild","child","delete","newTree","constructor","Map","add","undefined","Set","$f7dceffc5ad7768b$export$4e328f61c538687f","isTextInput","within","state","isFocused","isFocusVisible","$6nfFC$isFocusVisible","setFocused","$6nfFC$useState","isFocusVisibleState","setFocusVisible","updateState","$6nfFC$useCallback","onFocusChange","$6nfFC$useFocusVisibleListener","focusProps","$6nfFC$useFocus","isDisabled","focusWithinProps","$6nfFC$useFocusWithin","onFocusWithinChange","$907718708eab68af$export$1a38b4ad7f578e1d","focusClass","focusRingClass","Children","only","cloneElement","$6nfFC$mergeProps","className","$6nfFC$clsx","$e6afbd83fe6ebbd2$var$FocusableContext","$e6afbd83fe6ebbd2$var$useFocusableContext","context","$6nfFC$useSyncRef","_","otherProps","$e6afbd83fe6ebbd2$var$FocusableProvider","$e6afbd83fe6ebbd2$export$13f3202a3e5ddd5","forwardRef","$e6afbd83fe6ebbd2$export$4c014de7c8940b4c","domRef","keyboardProps","$6nfFC$useKeyboard","interactions","domProps","interactionProps","focusableProps","tabIndex","excludeFromTabOrder","$83013635b024ae3d$export$eac1895992b9f3d6","options","hasTabbableChild","setHasTabbableChild","update","observer","MutationObserver","observe","subtree","childList","attributes","attributeFilter","disconnect"],"sources":["/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/index.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/FocusScope.tsx","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/focusSafely.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/isElementVisible.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/FocusRing.tsx","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/useFocusRing.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/useFocusable.tsx","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/useHasTabbableChild.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {FocusScope, useFocusManager, getFocusableTreeWalker, createFocusManager, isElementInChildOfActiveScope} from './FocusScope';\nexport {FocusRing} from './FocusRing';\nexport {FocusableProvider, useFocusable} from './useFocusable';\nexport {useFocusRing} from './useFocusRing';\nexport {focusSafely} from './focusSafely';\nexport {useHasTabbableChild} from './useHasTabbableChild';\n\nexport type {FocusScopeProps, FocusManager, FocusManagerOptions} from './FocusScope';\nexport type {FocusRingProps} from './FocusRing';\nexport type {FocusableAria, FocusableOptions, FocusableProviderProps} from './useFocusable';\nexport type {AriaFocusRingProps, FocusRingAria} from './useFocusRing';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusSafely} from './focusSafely';\nimport {isElementVisible} from './isElementVisible';\nimport React, {ReactNode, RefObject, useContext, useEffect, useMemo, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\n\nexport interface FocusScopeProps {\n  /** The contents of the focus scope. */\n  children: ReactNode,\n\n  /**\n   * Whether to contain focus inside the scope, so users cannot\n   * move focus outside, for example in a modal dialog.\n   */\n  contain?: boolean,\n\n  /**\n   * Whether to restore focus back to the element that was focused\n   * when the focus scope mounted, after the focus scope unmounts.\n   */\n  restoreFocus?: boolean,\n\n  /** Whether to auto focus the first focusable element in the focus scope on mount. */\n  autoFocus?: boolean\n}\n\nexport interface FocusManagerOptions {\n  /** The element to start searching from. The currently focused element by default. */\n  from?: Element,\n  /** Whether to only include tabbable elements, or all focusable elements. */\n  tabbable?: boolean,\n  /** Whether focus should wrap around when it reaches the end of the scope. */\n  wrap?: boolean,\n  /** A callback that determines whether the given element is focused. */\n  accept?: (node: Element) => boolean\n}\n\nexport interface FocusManager {\n  /** Moves focus to the next focusable or tabbable element in the focus scope. */\n  focusNext(opts?: FocusManagerOptions): FocusableElement,\n  /** Moves focus to the previous focusable or tabbable element in the focus scope. */\n  focusPrevious(opts?: FocusManagerOptions): FocusableElement,\n  /** Moves focus to the first focusable or tabbable element in the focus scope. */\n  focusFirst(opts?: FocusManagerOptions): FocusableElement,\n    /** Moves focus to the last focusable or tabbable element in the focus scope. */\n  focusLast(opts?: FocusManagerOptions): FocusableElement\n}\n\ntype ScopeRef = RefObject<Element[]>;\ninterface IFocusContext {\n  focusManager: FocusManager,\n  parentNode: TreeNode | null\n}\n\nconst FocusContext = React.createContext<IFocusContext>(null);\n\nlet activeScope: ScopeRef = null;\n\n// This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\nexport function FocusScope(props: FocusScopeProps) {\n  let {children, contain, restoreFocus, autoFocus} = props;\n  let startRef = useRef<HTMLSpanElement>();\n  let endRef = useRef<HTMLSpanElement>();\n  let scopeRef = useRef<Element[]>([]);\n  let {parentNode} = useContext(FocusContext) || {};\n\n  // Create a tree node here so we can add children to it even before it is added to the tree.\n  let node = useMemo(() => new TreeNode({scopeRef}), [scopeRef]);\n\n  useLayoutEffect(() => {\n    // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n    // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n    // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n    // that is being added should get the activeScope as its parent.\n    let parent = parentNode || focusScopeTree.root;\n    if (focusScopeTree.getTreeNode(parent.scopeRef) && activeScope && !isAncestorScope(activeScope, parent.scopeRef)) {\n      let activeNode = focusScopeTree.getTreeNode(activeScope);\n      if (activeNode) {\n        parent = activeNode;\n      }\n    }\n\n    // Add the node to the parent, and to the tree.\n    parent.addChild(node);\n    focusScopeTree.addNode(node);\n  }, [node, parentNode]);\n\n  useLayoutEffect(() => {\n    let node = focusScopeTree.getTreeNode(scopeRef);\n    node.contain = contain;\n  }, [contain]);\n\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n  }, [children]);\n\n  useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  useFocusContainment(scopeRef, contain);\n  useRestoreFocus(scopeRef, restoreFocus, contain);\n  useAutoFocus(scopeRef, autoFocus);\n\n  // this layout effect needs to run last so that focusScopeTree cleanup happens at the last moment possible\n  useEffect(() => {\n    if (scopeRef) {\n      let activeElement = document.activeElement;\n      let scope = null;\n      // In strict mode, active scope is incorrectly updated since cleanup will run even though scope hasn't unmounted.\n      // To fix this, we need to update the actual activeScope here\n      if (isElementInScope(activeElement, scopeRef.current)) {\n        // Since useLayoutEffect runs for children first, we need to traverse the focusScope tree and find the bottom most scope that\n        // contains the active element and set that as the activeScope\n        for (let node of focusScopeTree.traverse()) {\n          if (isElementInScope(activeElement, node.scopeRef.current)) {\n            scope = node;\n          }\n        }\n\n        if (scope === focusScopeTree.getTreeNode(scopeRef)) {\n          activeScope = scope.scopeRef;\n        }\n      }\n\n      return () => {\n        // Scope may have been re-parented.\n        let parentScope = focusScopeTree.getTreeNode(scopeRef).parent.scopeRef;\n\n        // Restore the active scope on unmount if this scope or a descendant scope is active.\n        // Parent effect cleanups run before children, so we need to check if the\n        // parent scope actually still exists before restoring the active scope to it.\n        if (\n          (scopeRef === activeScope || isAncestorScope(scopeRef, activeScope)) &&\n          (!parentScope || focusScopeTree.getTreeNode(parentScope))\n        ) {\n          activeScope = parentScope;\n        }\n        focusScopeTree.removeTreeNode(scopeRef);\n      };\n    }\n  }, [scopeRef]);\n\n  let focusManager = useMemo(() => createFocusManagerForScope(scopeRef), []);\n  let value = useMemo(() => ({\n    focusManager,\n    parentNode: node\n  }), [node, focusManager]);\n\n  return (\n    <FocusContext.Provider value={value}>\n      <span data-focus-scope-start hidden ref={startRef} />\n      {children}\n      <span data-focus-scope-end hidden ref={endRef} />\n    </FocusContext.Provider>\n  );\n}\n\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\nexport function useFocusManager(): FocusManager {\n  return useContext(FocusContext)?.focusManager;\n}\n\nfunction createFocusManagerForScope(scopeRef: React.RefObject<Element[]>): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode() as FocusableElement;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current;\n      let {tabbable, accept} = opts;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current;\n      let {tabbable, accept} = opts;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    }\n  };\n}\n\nconst focusableElements = [\n  'input:not([disabled]):not([type=hidden])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n  'button:not([disabled])',\n  'a[href]',\n  'area[href]',\n  'summary',\n  'iframe',\n  'object',\n  'embed',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]'\n];\n\nconst FOCUSABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n\nfocusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst TABBABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nfunction getScopeRoot(scope: Element[]) {\n  return scope[0].parentElement;\n}\n\nfunction shouldContainFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return true;\n}\n\nfunction useFocusContainment(scopeRef: RefObject<Element[]>, contain: boolean) {\n  let focusedNode = useRef<FocusableElement>();\n\n  let raf = useRef(null);\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = null;\n      }\n      return;\n    }\n\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = (e) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef)) {\n        return;\n      }\n\n      let focusedElement = document.activeElement;\n      let scope = scopeRef.current;\n      if (!isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: true}, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode())  as FocusableElement;\n      }\n\n      e.preventDefault();\n      if (nextElement) {\n        focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus = (e) => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!activeScope || isAncestorScope(activeScope, scopeRef)) && isElementInScope(e.target, scopeRef.current)) {\n        activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if (shouldContainFocus(scopeRef) && !isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if (activeScope) {\n          focusFirstInScope(activeScope.current);\n        }\n      } else if (shouldContainFocus(scopeRef)) {\n        focusedNode.current = e.target;\n      }\n    };\n\n    let onBlur = (e) => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if (shouldContainFocus(scopeRef) && !isElementInChildScope(document.activeElement, scopeRef)) {\n          activeScope = scopeRef;\n          if (document.body.contains(e.target)) {\n            focusedNode.current = e.target;\n            focusedNode.current.focus();\n          } else if (activeScope) {\n            focusFirstInScope(activeScope.current);\n          }\n        }\n      });\n    };\n\n    document.addEventListener('keydown', onKeyDown, false);\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, false);\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n\n  // This is a useLayoutEffect so it is guaranteed to run before our async synthetic blur\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    return () => {\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n    };\n  }, [raf]);\n}\n\nfunction isElementInAnyScope(element: Element) {\n  return isElementInChildScope(element);\n}\n\nfunction isElementInScope(element: Element, scope: Element[]) {\n  return scope.some(node => node.contains(element));\n}\n\nfunction isElementInChildScope(element: Element, scope: ScopeRef = null) {\n  // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n  if (element instanceof Element && element.closest('[data-react-aria-top-layer]')) {\n    return true;\n  }\n\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {scopeRef: s} of focusScopeTree.traverse(focusScopeTree.getTreeNode(scope))) {\n    if (isElementInScope(element, s.current)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/** @private */\nexport function isElementInChildOfActiveScope(element: Element) {\n  return isElementInChildScope(element, activeScope);\n}\n\nfunction isAncestorScope(ancestor: ScopeRef, scope: ScopeRef) {\n  let parent = focusScopeTree.getTreeNode(scope)?.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) {\n      return true;\n    }\n    parent = parent.parent;\n  }\n  return false;\n}\n\nfunction focusElement(element: FocusableElement | null, scroll = false) {\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch (err) {\n      // ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch (err) {\n      // ignore\n    }\n  }\n}\n\nfunction focusFirstInScope(scope: Element[], tabbable:boolean = true) {\n  let sentinel = scope[0].previousElementSibling;\n  let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable}, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: false}, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n\n  focusElement(nextNode as FocusableElement);\n}\n\nfunction useAutoFocus(scopeRef: RefObject<Element[]>, autoFocus: boolean) {\n  const autoFocusRef = React.useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      activeScope = scopeRef;\n      if (!isElementInScope(document.activeElement, activeScope.current)) {\n        focusFirstInScope(scopeRef.current);\n      }\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\n\nfunction useActiveScopeTracker(scopeRef: RefObject<Element[]>, restore: boolean, contain: boolean) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  useLayoutEffect(() => {\n    if (restore || contain) {\n      return;\n    }\n\n    let scope = scopeRef.current;\n\n    let onFocus = (e: FocusEvent) => {\n      let target = e.target as Element;\n      if (isElementInScope(target, scopeRef.current)) {\n        activeScope = scopeRef;\n      } else if (!isElementInAnyScope(target)) {\n        activeScope = null;\n      }\n    };\n\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\n\nfunction shouldRestoreFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return scope?.scopeRef === scopeRef;\n}\n\nfunction useRestoreFocus(scopeRef: RefObject<Element[]>, restoreFocus: boolean, contain: boolean) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  const nodeToRestoreRef = useRef(typeof document !== 'undefined' ? document.activeElement as FocusableElement : null);\n\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!restoreFocus || contain) {\n      return;\n    }\n\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!activeScope || isAncestorScope(activeScope, scopeRef)) &&\n      isElementInScope(document.activeElement, scopeRef.current)\n      ) {\n        activeScope = scopeRef;\n      }\n    };\n\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]);\n\n  useLayoutEffect(() => {\n    if (!restoreFocus) {\n      return;\n    }\n\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef)) {\n        return;\n      }\n\n      let focusedElement = document.activeElement as FocusableElement;\n      if (!isElementInScope(focusedElement, scopeRef.current)) {\n        return;\n      }\n      let nodeToRestore = focusScopeTree.getTreeNode(scopeRef).nodeToRestore;\n\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = getFocusableTreeWalker(document.body, {tabbable: true});\n\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n        nodeToRestore = null;\n        focusScopeTree.getTreeNode(scopeRef).nodeToRestore = null;\n      }\n\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do {\n          nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n        } while (isElementInScope(nextElement, scopeRef.current));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) {\n          focusElement(nextElement, true);\n        } else {\n           // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n           // then move focus to the body.\n           // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!isElementInAnyScope(nodeToRestore)) {\n            focusedElement.blur();\n          } else {\n            focusElement(nodeToRestore, true);\n          }\n        }\n      }\n    };\n\n    if (!contain) {\n      document.addEventListener('keydown', onKeyDown, true);\n    }\n\n    return () => {\n      if (!contain) {\n        document.removeEventListener('keydown', onKeyDown, true);\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    if (!restoreFocus) {\n      return;\n    }\n\n    focusScopeTree.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current;\n\n    return () => {\n      let nodeToRestore = focusScopeTree.getTreeNode(scopeRef).nodeToRestore;\n\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      if (\n        restoreFocus\n        && nodeToRestore\n        && (\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          isElementInScope(document.activeElement, scopeRef.current)\n          || (document.activeElement === document.body && shouldRestoreFocus(scopeRef))\n        )\n      ) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = focusScopeTree.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (document.activeElement === document.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {\n                focusElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n\n            // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n            treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.scopeRef && focusScopeTree.getTreeNode(treeNode.scopeRef)) {\n                focusFirstInScope(treeNode.scopeRef.current, true);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus]);\n}\n\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\nexport function getFocusableTreeWalker(root: Element, opts?: FocusManagerOptions, scope?: Element[]) {\n  let selector = opts?.tabbable ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(\n    root,\n    NodeFilter.SHOW_ELEMENT,\n    {\n      acceptNode(node) {\n        // Skip nodes inside the starting node.\n        if (opts?.from?.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        if ((node as Element).matches(selector)\n          && isElementVisible(node as Element)\n          && (!scope || isElementInScope(node as Element, scope))\n          && (!opts?.accept || opts.accept(node as Element))\n        ) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        return NodeFilter.FILTER_SKIP;\n      }\n    }\n  );\n\n  if (opts?.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n\n/**\n * Creates a FocusManager object that can be used to move focus within an element.\n */\nexport function createFocusManager(ref: RefObject<Element>, defaultOptions: FocusManagerOptions = {}): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      }\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      } else {\n        let next = last(walker);\n        if (next) {\n          focusElement(next, true);\n        }\n        return next;\n      }\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        previousNode = last(walker);\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let next = last(walker);\n      if (next) {\n        focusElement(next, true);\n      }\n      return next;\n    }\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: FocusableElement;\n  let last: FocusableElement;\n  do {\n    last = walker.lastChild() as FocusableElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n\n\nclass Tree {\n  root: TreeNode;\n  private fastMap = new Map<ScopeRef, TreeNode>();\n\n  constructor() {\n    this.root = new TreeNode({scopeRef: null});\n    this.fastMap.set(null, this.root);\n  }\n\n  get size() {\n    return this.fastMap.size;\n  }\n\n  getTreeNode(data: ScopeRef) {\n    return this.fastMap.get(data);\n  }\n\n  addTreeNode(scopeRef: ScopeRef, parent: ScopeRef, nodeToRestore?: FocusableElement) {\n    let parentNode = this.fastMap.get(parent ?? null);\n    let node = new TreeNode({scopeRef});\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) {\n      node.nodeToRestore = nodeToRestore;\n    }\n  }\n\n  addNode(node: TreeNode) {\n    this.fastMap.set(node.scopeRef, node);\n  }\n\n  removeTreeNode(scopeRef: ScopeRef) {\n    // never remove the root\n    if (scopeRef === null) {\n      return;\n    }\n    let node = this.fastMap.get(scopeRef);\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) {\n      if (\n        current !== node &&\n        node.nodeToRestore &&\n        current.nodeToRestore &&\n        node.scopeRef.current &&\n        isElementInScope(current.nodeToRestore, node.scopeRef.current)\n      ) {\n        current.nodeToRestore = node.nodeToRestore;\n      }\n    }\n    let children = node.children;\n    parentNode.removeChild(node);\n    if (children.size > 0) {\n      children.forEach(child => parentNode.addChild(child));\n    }\n\n    this.fastMap.delete(node.scopeRef);\n  }\n\n  // Pre Order Depth First\n  *traverse(node: TreeNode = this.root): Generator<TreeNode> {\n    if (node.scopeRef != null) {\n      yield node;\n    }\n    if (node.children.size > 0) {\n      for (let child of node.children) {\n        yield* this.traverse(child);\n      }\n    }\n  }\n\n  clone(): Tree {\n    let newTree = new Tree();\n    for (let node of this.traverse()) {\n      newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);\n    }\n    return newTree;\n  }\n}\n\nclass TreeNode {\n  public scopeRef: ScopeRef;\n  public nodeToRestore: FocusableElement;\n  public parent: TreeNode;\n  public children: Set<TreeNode> = new Set();\n  public contain = false;\n\n  constructor(props: {scopeRef: ScopeRef}) {\n    this.scopeRef = props.scopeRef;\n  }\n  addChild(node: TreeNode) {\n    this.children.add(node);\n    node.parent = this;\n  }\n  removeChild(node: TreeNode) {\n    this.children.delete(node);\n    node.parent = undefined;\n  }\n}\n\nexport let focusScopeTree = new Tree();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusWithoutScrolling, runAfterTransition} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\n\n/**\n * A utility function that focuses an element while avoiding undesired side effects such\n * as page scrolling and screen reader issues with CSS transitions.\n */\nexport function focusSafely(element: FocusableElement) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if (getInteractionModality() === 'virtual') {\n    let lastFocusedElement = document.activeElement;\n    runAfterTransition(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) {\n        focusWithoutScrolling(element);\n      }\n    });\n  } else {\n    focusWithoutScrolling(element);\n  }\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction isStyleVisible(element: Element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) {\n    return false;\n  }\n\n  let {display, visibility} = element.style;\n\n  let isVisible = (\n    display !== 'none' &&\n    visibility !== 'hidden' &&\n    visibility !== 'collapse'\n  );\n\n  if (isVisible) {\n    const {getComputedStyle} = element.ownerDocument.defaultView;\n    let {display: computedDisplay, visibility: computedVisibility} = getComputedStyle(element);\n\n    isVisible = (\n      computedDisplay !== 'none' &&\n      computedVisibility !== 'hidden' &&\n      computedVisibility !== 'collapse'\n    );\n  }\n\n  return isVisible;\n}\n\nfunction isAttributeVisible(element: Element, childElement?: Element) {\n  return (\n    !element.hasAttribute('hidden') &&\n    (element.nodeName === 'DETAILS' &&\n      childElement &&\n      childElement.nodeName !== 'SUMMARY'\n      ? element.hasAttribute('open')\n      : true)\n  );\n}\n\n/**\n * Adapted from https://github.com/testing-library/jest-dom and \n * https://github.com/vuejs/vue-test-utils-next/.\n * Licensed under the MIT License.\n * @param element - Element to evaluate for display or visibility.\n */  \nexport function isElementVisible(element: Element, childElement?: Element) {\n  return (\n    element.nodeName !== '#comment' &&\n    isStyleVisible(element) &&\n    isAttributeVisible(element, childElement) &&\n    (!element.parentElement || isElementVisible(element.parentElement, element))\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport clsx from 'clsx';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {ReactElement} from 'react';\nimport {useFocusRing} from './useFocusRing';\n\nexport interface FocusRingProps {\n  /** Child element to apply CSS classes to. */\n  children: ReactElement,\n  /** CSS class to apply when the element is focused. */\n  focusClass?: string,\n  /** CSS class to apply when the element has keyboard focus. */\n  focusRingClass?: string,\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default false\n   */\n  within?: boolean,\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\n/**\n * A utility component that applies a CSS class when an element has keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function FocusRing(props: FocusRingProps) {\n  let {children, focusClass, focusRingClass} = props;\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing(props);\n  let child = React.Children.only(children);\n\n  return React.cloneElement(child, mergeProps(child.props, {\n    ...focusProps,\n    className: clsx({\n      [focusClass || '']: isFocused,\n      [focusRingClass || '']: isFocusVisible\n    })\n  }));\n}\n","import {DOMAttributes} from '@react-types/shared';\nimport {isFocusVisible, useFocus, useFocusVisibleListener, useFocusWithin} from '@react-aria/interactions';\nimport {useCallback, useRef, useState} from 'react';\n\nexport interface AriaFocusRingProps {\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default 'false'\n   */\n  within?: boolean,\n\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusRingAria {\n  /** Whether the element is currently focused. */\n  isFocused: boolean,\n\n  /** Whether keyboard focus should be visible. */\n  isFocusVisible: boolean,\n\n  /** Props to apply to the container element with the focus ring. */\n  focusProps: DOMAttributes\n}\n\n/**\n * Determines whether a focus ring should be shown to indicate keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function useFocusRing(props: AriaFocusRingProps = {}): FocusRingAria {\n  let {\n    autoFocus = false,\n    isTextInput,\n    within\n  } = props;\n  let state = useRef({\n    isFocused: false,\n    isFocusVisible: autoFocus || isFocusVisible()\n  });\n  let [isFocused, setFocused] = useState(false);\n  let [isFocusVisibleState, setFocusVisible] = useState(() => state.current.isFocused && state.current.isFocusVisible);\n\n  let updateState = useCallback(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n\n  let onFocusChange = useCallback(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n\n  useFocusVisibleListener((isFocusVisible) => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {isTextInput});\n\n  let {focusProps} = useFocus({\n    isDisabled: within,\n    onFocusChange\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n\n  return {\n    isFocused,\n    isFocusVisible: isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableDOMProps, FocusableElement, FocusableProps} from '@react-types/shared';\nimport {focusSafely} from './';\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport React, {MutableRefObject, ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\nimport {useFocus, useKeyboard} from '@react-aria/interactions';\n\nexport interface FocusableOptions extends FocusableProps, FocusableDOMProps {\n  /** Whether focus should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface FocusableProviderProps extends DOMAttributes {\n  /** The child element to provide DOM props to. */\n  children?: ReactNode\n}\n\ninterface FocusableContextValue extends FocusableProviderProps {\n  ref?: MutableRefObject<FocusableElement>\n}\n\nlet FocusableContext = React.createContext<FocusableContextValue>(null);\n\nfunction useFocusableContext(ref: RefObject<FocusableElement>): FocusableContextValue {\n  let context = useContext(FocusableContext) || {};\n  useSyncRef(context, ref);\n\n  // eslint-disable-next-line\n  let {ref: _, ...otherProps} = context;\n  return otherProps;\n}\n\n/**\n * Provides DOM props to the nearest focusable child.\n */\nfunction FocusableProvider(props: FocusableProviderProps, ref: RefObject<FocusableElement>) {\n  let {children, ...otherProps} = props;\n  let context = {\n    ...otherProps,\n    ref\n  };\n\n  return (\n    <FocusableContext.Provider value={context}>\n      {children}\n    </FocusableContext.Provider>\n  );\n}\n\nlet _FocusableProvider = React.forwardRef(FocusableProvider);\nexport {_FocusableProvider as FocusableProvider};\n\nexport interface FocusableAria {\n  /** Props for the focusable element. */\n  focusableProps: DOMAttributes\n}\n\n/**\n * Used to make an element focusable and capable of auto focus.\n */\nexport function useFocusable(props: FocusableOptions, domRef: RefObject<FocusableElement>): FocusableAria {\n  let {focusProps} = useFocus(props);\n  let {keyboardProps} = useKeyboard(props);\n  let interactions = mergeProps(focusProps, keyboardProps);\n  let domProps = useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  let autoFocusRef = useRef(props.autoFocus);\n\n  useEffect(() => {\n    if (autoFocusRef.current && domRef.current) {\n      focusSafely(domRef.current);\n    }\n    autoFocusRef.current = false;\n  }, [domRef]);\n\n  return {\n    focusableProps: mergeProps(\n      {\n        ...interactions,\n        tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n      },\n      interactionProps\n    )\n  };\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getFocusableTreeWalker} from './FocusScope';\nimport {RefObject, useState} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\ninterface AriaHasTabbableChildOptions {\n  isDisabled?: boolean\n}\n\n// This was created for a special empty case of a component that can have child or\n// be empty, like Collection/Virtualizer/Table/ListView/etc. When these components\n// are empty they can have a message with a tabbable element, which is like them\n// being not empty, when it comes to focus and tab order.\n\n/**\n * Returns whether an element has a tabbable child, and updates as children change.\n * @private\n */\nexport function useHasTabbableChild(ref: RefObject<Element>, options?: AriaHasTabbableChildOptions): boolean {\n  let isDisabled = options?.isDisabled;\n  let [hasTabbableChild, setHasTabbableChild] = useState(false);\n\n  useLayoutEffect(() => {\n    if (ref?.current && !isDisabled) {\n      let update = () => {\n        if (ref.current) {\n          let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n          setHasTabbableChild(!!walker.nextNode());\n        }\n      };\n\n      update();\n\n      // Update when new elements are inserted, or the tabIndex/disabled attribute updates.\n      let observer = new MutationObserver(update);\n      observer.observe(ref.current, {\n        subtree: true,\n        childList: true,\n        attributes: true,\n        attributeFilter: ['tabIndex', 'disabled']\n      });\n\n      return () => {\n        // Disconnect mutation observer when a React update occurs on the top-level component\n        // so we update synchronously after re-rendering. Otherwise React will emit act warnings\n        // in tests since mutation observers fire asynchronously. The mutation observer is necessary\n        // so we also update if a child component re-renders and adds/removes something tabbable.\n        observer.disconnect();\n      };\n    }\n  });\n\n  return isDisabled ? false : hasTabbableChild;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}