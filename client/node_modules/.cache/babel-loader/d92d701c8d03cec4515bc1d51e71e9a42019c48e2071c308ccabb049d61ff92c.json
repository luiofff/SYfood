{"ast":null,"code":"import { useControlledState as $b3nuO$useControlledState } from \"@react-stately/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nfunction $587d3ad58be6d31f$export$daff6da51032a415(props = {}) {\n  let [selectedValues, setValue] = (0, $b3nuO$useControlledState)(props.value, props.defaultValue || [], props.onChange);\n  const state = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (!selectedValues.includes(value)) setValue(selectedValues.concat(value));\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) setValue(selectedValues.filter(existingValue => existingValue !== value));\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) setValue(selectedValues.filter(existingValue => existingValue !== value));else setValue(selectedValues.concat(value));\n    },\n    validationState: props.validationState,\n    isInvalid: props.isInvalid || props.validationState === \"invalid\"\n  };\n  return state;\n}\nexport { $587d3ad58be6d31f$export$daff6da51032a415 as useCheckboxGroupState };","map":{"version":3,"names":["$587d3ad58be6d31f$export$daff6da51032a415","props","selectedValues","setValue","$b3nuO$useControlledState","value","defaultValue","onChange","state","isReadOnly","isDisabled","isSelected","includes","addValue","concat","removeValue","filter","existingValue","toggleValue","validationState","isInvalid"],"sources":["/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-stately/checkbox/dist/packages/@react-stately/checkbox/src/index.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-stately/checkbox/dist/packages/@react-stately/checkbox/src/useCheckboxGroupState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useCheckboxGroupState} from './useCheckboxGroupState';\n\nexport type {CheckboxGroupProps} from '@react-types/checkbox';\nexport type {CheckboxGroupState} from './useCheckboxGroupState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\nimport {ValidationState} from '@react-types/shared';\n\nexport interface CheckboxGroupState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /**\n   * The current validation state of the checkbox group.\n   * @deprecated Use `isInvalid` instead.\n   */\n  readonly validationState: ValidationState,\n\n  /** Whether the checkbox group is invalid. */\n  readonly isInvalid: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n\n  const state: CheckboxGroupState = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (!selectedValues.includes(value)) {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      }\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      } else {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    validationState: props.validationState,\n    isInvalid: props.isInvalid || props.validationState === 'invalid'\n  };\n\n  return state;\n}\n"],"mappings":";;AAAA;;;;;;;;;;ACAA,GDAA,CCAA;;;;;;;;;;;AAuDO,SAASA,0CAAsBC,KAAA,GAA4B,CAAC,CAAC;EAClE,IAAI,CAACC,cAAA,EAAgBC,QAAA,CAAS,GAAG,IAAAC,yBAAiB,EAAEH,KAAA,CAAMI,KAAA,EAAOJ,KAAA,CAAMK,YAAA,IAAgB,EAAE,EAAEL,KAAA,CAAMM,QAAA;EAEjG,MAAMC,KAAA,GAA4B;IAChCH,KAAA,EAAOH,cAAA;IACPC,SAASE,KAAK;MACZ,IAAIJ,KAAA,CAAMQ,UAAA,IAAcR,KAAA,CAAMS,UAAA,EAC5B;MAGFP,QAAA,CAASE,KAAA;IACX;IACAK,UAAA,EAAYT,KAAA,CAAMS,UAAA,IAAc;IAChCD,UAAA,EAAYR,KAAA,CAAMQ,UAAA,IAAc;IAChCE,WAAWN,KAAK;MACd,OAAOH,cAAA,CAAeU,QAAA,CAASP,KAAA;IACjC;IACAQ,SAASR,KAAK;MACZ,IAAIJ,KAAA,CAAMQ,UAAA,IAAcR,KAAA,CAAMS,UAAA,EAC5B;MAEF,IAAI,CAACR,cAAA,CAAeU,QAAA,CAASP,KAAA,GAC3BF,QAAA,CAASD,cAAA,CAAeY,MAAA,CAAOT,KAAA;IAEnC;IACAU,YAAYV,KAAK;MACf,IAAIJ,KAAA,CAAMQ,UAAA,IAAcR,KAAA,CAAMS,UAAA,EAC5B;MAEF,IAAIR,cAAA,CAAeU,QAAA,CAASP,KAAA,GAC1BF,QAAA,CAASD,cAAA,CAAec,MAAA,CAAOC,aAAA,IAAiBA,aAAA,KAAkBZ,KAAA;IAEtE;IACAa,YAAYb,KAAK;MACf,IAAIJ,KAAA,CAAMQ,UAAA,IAAcR,KAAA,CAAMS,UAAA,EAC5B;MAEF,IAAIR,cAAA,CAAeU,QAAA,CAASP,KAAA,GAC1BF,QAAA,CAASD,cAAA,CAAec,MAAA,CAAOC,aAAA,IAAiBA,aAAA,KAAkBZ,KAAA,QAElEF,QAAA,CAASD,cAAA,CAAeY,MAAA,CAAOT,KAAA;IAEnC;IACAc,eAAA,EAAiBlB,KAAA,CAAMkB,eAAA;IACvBC,SAAA,EAAWnB,KAAA,CAAMmB,SAAA,IAAanB,KAAA,CAAMkB,eAAA,KAAoB;EAC1D;EAEA,OAAOX,KAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}