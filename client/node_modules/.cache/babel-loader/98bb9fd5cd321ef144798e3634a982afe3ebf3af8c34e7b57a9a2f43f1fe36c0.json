{"ast":null,"code":"import md5 from 'blueimp-md5';\nimport { formatClass, parseClass } from './class-transform';\nexport function withoutClassMods(converter = arg => arg) {\n  return (parsedClass, strClass) => parsedClass.mod ? undefined : converter(parsedClass, strClass);\n}\nfunction isElement(node) {\n  return node.nodeType === Node.ELEMENT_NODE;\n}\nfunction getXpathByNode(node, options) {\n  if (!node || !isElement(node)) {\n    return '';\n  }\n  const tag = node.tagName.toLowerCase();\n  let token = `/${tag}`;\n  const convertedId = node.id && !options.withoutId ? options.idConverter(node.id) : undefined;\n  if (convertedId) {\n    token += `[@id='${convertedId}']`;\n  } else {\n    const classes = [];\n    node.classList.forEach(className => {\n      const currentClass = options.classConverter(Object.assign(Object.assign({}, parseClass(className)), {\n        tag\n      }), className);\n      if (currentClass) {\n        classes.push(formatClass(currentClass));\n      }\n    });\n    if (classes.length) {\n      token += `[@class='${classes.join(' ')}']`;\n    }\n  }\n  return getXpathByNode(node.parentElement, options) + token;\n}\nconst defaultXpathOptions = {\n  classConverter: arg => arg,\n  idConverter: arg => arg,\n  withoutId: false\n};\nexport function getXpath(event, options) {\n  const internalOptions = Object.assign(Object.assign({}, defaultXpathOptions), options || {});\n  const xpath = getXpathByNode(event.currentTarget || event.target, internalOptions);\n  return {\n    xpath,\n    hash: md5(xpath)\n  };\n}","map":{"version":3,"names":["md5","formatClass","parseClass","withoutClassMods","converter","arg","parsedClass","strClass","mod","undefined","isElement","node","nodeType","Node","ELEMENT_NODE","getXpathByNode","options","tag","tagName","toLowerCase","token","convertedId","id","withoutId","idConverter","classes","classList","forEach","className","currentClass","classConverter","Object","assign","push","length","join","parentElement","defaultXpathOptions","getXpath","event","internalOptions","xpath","currentTarget","target","hash"],"sources":["/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@gravity-ui/uikit/build/esm/components/utils/xpath.js"],"sourcesContent":["import md5 from 'blueimp-md5';\nimport { formatClass, parseClass } from './class-transform';\nexport function withoutClassMods(converter = (arg) => arg) {\n    return (parsedClass, strClass) => parsedClass.mod ? undefined : converter(parsedClass, strClass);\n}\nfunction isElement(node) {\n    return node.nodeType === Node.ELEMENT_NODE;\n}\nfunction getXpathByNode(node, options) {\n    if (!node || !isElement(node)) {\n        return '';\n    }\n    const tag = node.tagName.toLowerCase();\n    let token = `/${tag}`;\n    const convertedId = node.id && !options.withoutId ? options.idConverter(node.id) : undefined;\n    if (convertedId) {\n        token += `[@id='${convertedId}']`;\n    }\n    else {\n        const classes = [];\n        node.classList.forEach((className) => {\n            const currentClass = options.classConverter(Object.assign(Object.assign({}, parseClass(className)), { tag }), className);\n            if (currentClass) {\n                classes.push(formatClass(currentClass));\n            }\n        });\n        if (classes.length) {\n            token += `[@class='${classes.join(' ')}']`;\n        }\n    }\n    return getXpathByNode(node.parentElement, options) + token;\n}\nconst defaultXpathOptions = {\n    classConverter: (arg) => arg,\n    idConverter: (arg) => arg,\n    withoutId: false,\n};\nexport function getXpath(event, options) {\n    const internalOptions = Object.assign(Object.assign({}, defaultXpathOptions), (options || {}));\n    const xpath = getXpathByNode(event.currentTarget || event.target, internalOptions);\n    return {\n        xpath,\n        hash: md5(xpath),\n    };\n}\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,aAAa;AAC7B,SAASC,WAAW,EAAEC,UAAU,QAAQ,mBAAmB;AAC3D,OAAO,SAASC,gBAAgBA,CAACC,SAAS,GAAIC,GAAG,IAAKA,GAAG,EAAE;EACvD,OAAO,CAACC,WAAW,EAAEC,QAAQ,KAAKD,WAAW,CAACE,GAAG,GAAGC,SAAS,GAAGL,SAAS,CAACE,WAAW,EAAEC,QAAQ,CAAC;AACpG;AACA,SAASG,SAASA,CAACC,IAAI,EAAE;EACrB,OAAOA,IAAI,CAACC,QAAQ,KAAKC,IAAI,CAACC,YAAY;AAC9C;AACA,SAASC,cAAcA,CAACJ,IAAI,EAAEK,OAAO,EAAE;EACnC,IAAI,CAACL,IAAI,IAAI,CAACD,SAAS,CAACC,IAAI,CAAC,EAAE;IAC3B,OAAO,EAAE;EACb;EACA,MAAMM,GAAG,GAAGN,IAAI,CAACO,OAAO,CAACC,WAAW,CAAC,CAAC;EACtC,IAAIC,KAAK,GAAI,IAAGH,GAAI,EAAC;EACrB,MAAMI,WAAW,GAAGV,IAAI,CAACW,EAAE,IAAI,CAACN,OAAO,CAACO,SAAS,GAAGP,OAAO,CAACQ,WAAW,CAACb,IAAI,CAACW,EAAE,CAAC,GAAGb,SAAS;EAC5F,IAAIY,WAAW,EAAE;IACbD,KAAK,IAAK,SAAQC,WAAY,IAAG;EACrC,CAAC,MACI;IACD,MAAMI,OAAO,GAAG,EAAE;IAClBd,IAAI,CAACe,SAAS,CAACC,OAAO,CAAEC,SAAS,IAAK;MAClC,MAAMC,YAAY,GAAGb,OAAO,CAACc,cAAc,CAACC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE9B,UAAU,CAAC0B,SAAS,CAAC,CAAC,EAAE;QAAEX;MAAI,CAAC,CAAC,EAAEW,SAAS,CAAC;MACxH,IAAIC,YAAY,EAAE;QACdJ,OAAO,CAACQ,IAAI,CAAChC,WAAW,CAAC4B,YAAY,CAAC,CAAC;MAC3C;IACJ,CAAC,CAAC;IACF,IAAIJ,OAAO,CAACS,MAAM,EAAE;MAChBd,KAAK,IAAK,YAAWK,OAAO,CAACU,IAAI,CAAC,GAAG,CAAE,IAAG;IAC9C;EACJ;EACA,OAAOpB,cAAc,CAACJ,IAAI,CAACyB,aAAa,EAAEpB,OAAO,CAAC,GAAGI,KAAK;AAC9D;AACA,MAAMiB,mBAAmB,GAAG;EACxBP,cAAc,EAAGzB,GAAG,IAAKA,GAAG;EAC5BmB,WAAW,EAAGnB,GAAG,IAAKA,GAAG;EACzBkB,SAAS,EAAE;AACf,CAAC;AACD,OAAO,SAASe,QAAQA,CAACC,KAAK,EAAEvB,OAAO,EAAE;EACrC,MAAMwB,eAAe,GAAGT,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEK,mBAAmB,CAAC,EAAGrB,OAAO,IAAI,CAAC,CAAE,CAAC;EAC9F,MAAMyB,KAAK,GAAG1B,cAAc,CAACwB,KAAK,CAACG,aAAa,IAAIH,KAAK,CAACI,MAAM,EAAEH,eAAe,CAAC;EAClF,OAAO;IACHC,KAAK;IACLG,IAAI,EAAE5C,GAAG,CAACyC,KAAK;EACnB,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}