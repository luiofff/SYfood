{"ast":null,"code":"import React from 'react';\nimport { useActionHandlers } from '../../../utils/useActionHandlers';\nexport const Trigger = ({\n  open,\n  disabled,\n  className,\n  openTooltip,\n  closeTooltip,\n  closedManually,\n  onClick,\n  children\n}) => {\n  const handleClick = async event => {\n    if (disabled) {\n      return;\n    }\n    const shouldToggleTooltip = !onClick || (await onClick(event));\n    if (!shouldToggleTooltip) {\n      return;\n    }\n    const toggleTooltip = () => {\n      const nextOpen = !open;\n      if (nextOpen) {\n        openTooltip();\n        closedManually.current = false;\n      } else {\n        closeTooltip();\n        closedManually.current = true;\n      }\n    };\n    toggleTooltip();\n  };\n  const {\n    onKeyDown\n  } = useActionHandlers(handleClick);\n  return typeof children === 'function' ? React.createElement(React.Fragment, null, children({\n    onClick: handleClick,\n    onKeyDown\n  })) :\n  // The event handler should only be used to capture bubbled events\n  // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n  React.createElement(\"div\", {\n    className: className,\n    onClick: handleClick,\n    onKeyDown: onClick ? onKeyDown : undefined\n  }, children);\n};","map":{"version":3,"names":["React","useActionHandlers","Trigger","open","disabled","className","openTooltip","closeTooltip","closedManually","onClick","children","handleClick","event","shouldToggleTooltip","toggleTooltip","nextOpen","current","onKeyDown","createElement","Fragment","undefined"],"sources":["/Users/ilaulanov/node_modules/@gravity-ui/uikit/build/esm/components/Popover/components/Trigger/Trigger.js"],"sourcesContent":["import React from 'react';\nimport { useActionHandlers } from '../../../utils/useActionHandlers';\nexport const Trigger = ({ open, disabled, className, openTooltip, closeTooltip, closedManually, onClick, children, }) => {\n    const handleClick = async (event) => {\n        if (disabled) {\n            return;\n        }\n        const shouldToggleTooltip = !onClick || (await onClick(event));\n        if (!shouldToggleTooltip) {\n            return;\n        }\n        const toggleTooltip = () => {\n            const nextOpen = !open;\n            if (nextOpen) {\n                openTooltip();\n                closedManually.current = false;\n            }\n            else {\n                closeTooltip();\n                closedManually.current = true;\n            }\n        };\n        toggleTooltip();\n    };\n    const { onKeyDown } = useActionHandlers(handleClick);\n    return typeof children === 'function' ? (React.createElement(React.Fragment, null, children({ onClick: handleClick, onKeyDown }))) : (\n    // The event handler should only be used to capture bubbled events\n    // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    React.createElement(\"div\", { className: className, onClick: handleClick, onKeyDown: onClick ? onKeyDown : undefined }, children));\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,iBAAiB,QAAQ,kCAAkC;AACpE,OAAO,MAAMC,OAAO,GAAGA,CAAC;EAAEC,IAAI;EAAEC,QAAQ;EAAEC,SAAS;EAAEC,WAAW;EAAEC,YAAY;EAAEC,cAAc;EAAEC,OAAO;EAAEC;AAAU,CAAC,KAAK;EACrH,MAAMC,WAAW,GAAG,MAAOC,KAAK,IAAK;IACjC,IAAIR,QAAQ,EAAE;MACV;IACJ;IACA,MAAMS,mBAAmB,GAAG,CAACJ,OAAO,KAAK,MAAMA,OAAO,CAACG,KAAK,CAAC,CAAC;IAC9D,IAAI,CAACC,mBAAmB,EAAE;MACtB;IACJ;IACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;MACxB,MAAMC,QAAQ,GAAG,CAACZ,IAAI;MACtB,IAAIY,QAAQ,EAAE;QACVT,WAAW,CAAC,CAAC;QACbE,cAAc,CAACQ,OAAO,GAAG,KAAK;MAClC,CAAC,MACI;QACDT,YAAY,CAAC,CAAC;QACdC,cAAc,CAACQ,OAAO,GAAG,IAAI;MACjC;IACJ,CAAC;IACDF,aAAa,CAAC,CAAC;EACnB,CAAC;EACD,MAAM;IAAEG;EAAU,CAAC,GAAGhB,iBAAiB,CAACU,WAAW,CAAC;EACpD,OAAO,OAAOD,QAAQ,KAAK,UAAU,GAAIV,KAAK,CAACkB,aAAa,CAAClB,KAAK,CAACmB,QAAQ,EAAE,IAAI,EAAET,QAAQ,CAAC;IAAED,OAAO,EAAEE,WAAW;IAAEM;EAAU,CAAC,CAAC,CAAC;EACjI;EACA;EACAjB,KAAK,CAACkB,aAAa,CAAC,KAAK,EAAE;IAAEb,SAAS,EAAEA,SAAS;IAAEI,OAAO,EAAEE,WAAW;IAAEM,SAAS,EAAER,OAAO,GAAGQ,SAAS,GAAGG;EAAU,CAAC,EAAEV,QAAQ,CAAE;AACrI,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}