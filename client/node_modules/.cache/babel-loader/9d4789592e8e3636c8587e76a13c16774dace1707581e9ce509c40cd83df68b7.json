{"ast":null,"code":"import { mergeProps as $bx7SL$mergeProps, useSyncRef as $bx7SL$useSyncRef, useGlobalListeners as $bx7SL$useGlobalListeners, useEffectEvent as $bx7SL$useEffectEvent, isMac as $bx7SL$isMac, openLink as $bx7SL$openLink, isVirtualClick as $bx7SL$isVirtualClick, focusWithoutScrolling as $bx7SL$focusWithoutScrolling, isVirtualPointerEvent as $bx7SL$isVirtualPointerEvent, isIOS as $bx7SL$isIOS, runAfterTransition as $bx7SL$runAfterTransition, useLayoutEffect as $bx7SL$useLayoutEffect, useEvent as $bx7SL$useEvent, useDescription as $bx7SL$useDescription } from \"@react-aria/utils\";\nimport $bx7SL$react, { useRef as $bx7SL$useRef, useContext as $bx7SL$useContext, useState as $bx7SL$useState, useMemo as $bx7SL$useMemo, useEffect as $bx7SL$useEffect, useCallback as $bx7SL$useCallback } from \"react\";\nimport { _ as $bx7SL$_ } from \"@swc/helpers/_/_class_private_field_get\";\nimport { _ as $bx7SL$_1 } from \"@swc/helpers/_/_class_private_field_init\";\nimport { _ as $bx7SL$_2 } from \"@swc/helpers/_/_class_private_field_set\";\nimport { useIsSSR as $bx7SL$useIsSSR } from \"@react-aria/ssr\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet $14c0b72509d70225$var$state = \"default\";\nlet $14c0b72509d70225$var$savedUserSelect = \"\";\nlet $14c0b72509d70225$var$modifiedElementMap = new WeakMap();\nfunction $14c0b72509d70225$export$16a4697467175487(target) {\n  if ((0, $bx7SL$isIOS)()) {\n    if ($14c0b72509d70225$var$state === \"default\") {\n      $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = \"none\";\n    }\n    $14c0b72509d70225$var$state = \"disabled\";\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = \"none\";\n  }\n}\nfunction $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {\n  if ((0, $bx7SL$isIOS)()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if ($14c0b72509d70225$var$state !== \"disabled\") return;\n    $14c0b72509d70225$var$state = \"restoring\";\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      (0, $bx7SL$runAfterTransition)(() => {\n        // Avoid race conditions\n        if ($14c0b72509d70225$var$state === \"restoring\") {\n          if (document.documentElement.style.webkitUserSelect === \"none\") document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || \"\";\n          $14c0b72509d70225$var$savedUserSelect = \"\";\n          $14c0b72509d70225$var$state = \"default\";\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement)\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    {\n      if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {\n        let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);\n        if (target.style.userSelect === \"none\") target.style.userSelect = targetOldUserSelect;\n        if (target.getAttribute(\"style\") === \"\") target.removeAttribute(\"style\");\n        $14c0b72509d70225$var$modifiedElementMap.delete(target);\n      }\n    }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nconst $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (0, $bx7SL$react).createContext(null);\n$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = \"PressResponderContext\";\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n  // Consume context from <PressResponder> and merge with props.\n  let context = (0, $bx7SL$useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));\n  if (context) {\n    let {\n      register: register,\n      ...contextProps\n    } = context;\n    props = (0, $bx7SL$mergeProps)(contextProps, props);\n    register();\n  }\n  (0, $bx7SL$useSyncRef)(context, props.ref);\n  return props;\n}\nvar $f6c31cce2adf654f$var$_shouldStopPropagation = /*#__PURE__*/new WeakMap();\nclass $f6c31cce2adf654f$var$PressEvent {\n  continuePropagation() {\n    (0, $bx7SL$_2)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, false);\n  }\n  get shouldStopPropagation() {\n    return (0, $bx7SL$_)(this, $f6c31cce2adf654f$var$_shouldStopPropagation);\n  }\n  constructor(type, pointerType, originalEvent) {\n    (0, $bx7SL$_1)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, {\n      writable: true,\n      value: void 0\n    });\n    (0, $bx7SL$_2)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, true);\n    this.type = type;\n    this.pointerType = pointerType;\n    this.target = originalEvent.currentTarget;\n    this.shiftKey = originalEvent.shiftKey;\n    this.metaKey = originalEvent.metaKey;\n    this.ctrlKey = originalEvent.ctrlKey;\n    this.altKey = originalEvent.altKey;\n  }\n}\nconst $f6c31cce2adf654f$var$LINK_CLICKED = Symbol(\"linkClicked\");\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n  let {\n    onPress: onPress,\n    onPressChange: onPressChange,\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressUp: onPressUp,\n    isDisabled: isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress: preventFocusOnPress,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit,\n    allowTextSelectionOnPress: allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _,\n    ...domProps\n  } = $f6c31cce2adf654f$var$usePressResponderContext(props);\n  let [isPressed, setPressed] = (0, $bx7SL$useState)(false);\n  let ref = (0, $bx7SL$useRef)({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    isTriggeringEvent: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  } = (0, $bx7SL$useGlobalListeners)();\n  let triggerPressStart = (0, $bx7SL$useEffectEvent)((originalEvent, pointerType) => {\n    let state = ref.current;\n    if (isDisabled || state.didFirePressStart) return;\n    let shouldStopPropagation = true;\n    state.isTriggeringEvent = true;\n    if (onPressStart) {\n      let event = new $f6c31cce2adf654f$var$PressEvent(\"pressstart\", pointerType, originalEvent);\n      onPressStart(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n    if (onPressChange) onPressChange(true);\n    state.isTriggeringEvent = false;\n    state.didFirePressStart = true;\n    setPressed(true);\n    return shouldStopPropagation;\n  });\n  let triggerPressEnd = (0, $bx7SL$useEffectEvent)((originalEvent, pointerType, wasPressed = true) => {\n    let state = ref.current;\n    if (!state.didFirePressStart) return;\n    state.ignoreClickAfterPress = true;\n    state.didFirePressStart = false;\n    state.isTriggeringEvent = true;\n    let shouldStopPropagation = true;\n    if (onPressEnd) {\n      let event = new $f6c31cce2adf654f$var$PressEvent(\"pressend\", pointerType, originalEvent);\n      onPressEnd(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n    if (onPressChange) onPressChange(false);\n    setPressed(false);\n    if (onPress && wasPressed && !isDisabled) {\n      let event = new $f6c31cce2adf654f$var$PressEvent(\"press\", pointerType, originalEvent);\n      onPress(event);\n      shouldStopPropagation && (shouldStopPropagation = event.shouldStopPropagation);\n    }\n    state.isTriggeringEvent = false;\n    return shouldStopPropagation;\n  });\n  let triggerPressUp = (0, $bx7SL$useEffectEvent)((originalEvent, pointerType) => {\n    let state = ref.current;\n    if (isDisabled) return;\n    if (onPressUp) {\n      state.isTriggeringEvent = true;\n      let event = new $f6c31cce2adf654f$var$PressEvent(\"pressup\", pointerType, originalEvent);\n      onPressUp(event);\n      state.isTriggeringEvent = false;\n      return event.shouldStopPropagation;\n    }\n    return true;\n  });\n  let cancel = (0, $bx7SL$useEffectEvent)(e => {\n    let state = ref.current;\n    if (state.isPressed) {\n      if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n      state.isPressed = false;\n      state.isOverTarget = false;\n      state.activePointerId = null;\n      state.pointerType = null;\n      removeAllGlobalListeners();\n      if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n    }\n  });\n  let cancelOnPointerExit = (0, $bx7SL$useEffectEvent)(e => {\n    if (shouldCancelOnPointerExit) cancel(e);\n  });\n  let pressProps = (0, $bx7SL$useMemo)(() => {\n    let state = ref.current;\n    let pressProps = {\n      onKeyDown(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          let shouldStopPropagation = true;\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            shouldStopPropagation = triggerPressStart(e, \"keyboard\");\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, \"keyup\", onKeyUp, false);\n          }\n          if (shouldStopPropagation) e.stopPropagation();\n          // Keep track of the keydown events that occur while the Meta (e.g. Command) key is held.\n          // macOS has a bug where keyup events are not fired while the Meta key is down.\n          // When the Meta key itself is released we will get an event for that, and we'll act as if\n          // all of these other keys were released as well.\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1393524\n          // https://bugs.webkit.org/show_bug.cgi?id=55291\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=1299553\n          if (e.metaKey && (0, $bx7SL$isMac)()) state.metaKeyEvents.set(e.key, e.nativeEvent);\n        } else if (e.key === \"Meta\") state.metaKeyEvents = new Map();\n      },\n      onKeyUp(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), \"keyboard\");\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target)) return;\n        if (e && e.button === 0 && !state.isTriggeringEvent && !(0, $bx7SL$openLink).isOpening) {\n          let shouldStopPropagation = true;\n          if (isDisabled) e.preventDefault();\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === \"virtual\" || (0, $bx7SL$isVirtualClick)(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);\n            let stopPressStart = triggerPressStart(e, \"virtual\");\n            let stopPressUp = triggerPressUp(e, \"virtual\");\n            let stopPressEnd = triggerPressEnd(e, \"virtual\");\n            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;\n          }\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n          if (shouldStopPropagation) e.stopPropagation();\n        }\n      }\n    };\n    let onKeyUp = e => {\n      var _state_metaKeyEvents;\n      if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {\n        var _state_metaKeyEvents1;\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n        let target = e.target;\n        let shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), \"keyboard\", state.target.contains(target));\n        removeAllGlobalListeners();\n        if (shouldStopPropagation) e.stopPropagation();\n        // If a link was triggered with a key other than Enter, open the URL ourselves.\n        // This means the link has a role override, and the default browser behavior\n        // only applies when using the Enter key.\n        if (e.key !== \"Enter\" && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) && state.target.contains(target) && !e[$f6c31cce2adf654f$var$LINK_CLICKED]) {\n          // Store a hidden property on the event so we only trigger link click once,\n          // even if there are multiple usePress instances attached to the element.\n          e[$f6c31cce2adf654f$var$LINK_CLICKED] = true;\n          (0, $bx7SL$openLink)(state.target, e, false);\n        }\n        state.isPressed = false;\n        (_state_metaKeyEvents1 = state.metaKeyEvents) === null || _state_metaKeyEvents1 === void 0 ? void 0 : _state_metaKeyEvents1.delete(e.key);\n      } else if (e.key === \"Meta\" && ((_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.size)) {\n        // If we recorded keydown events that occurred while the Meta key was pressed,\n        // and those haven't received keyup events already, fire keyup events ourselves.\n        // See comment above for more info about the macOS bug causing this.\n        let events = state.metaKeyEvents;\n        state.metaKeyEvents = null;\n        for (let event of events.values()) state.target.dispatchEvent(new KeyboardEvent(\"keyup\", event));\n      }\n    };\n    if (typeof PointerEvent !== \"undefined\") {\n      pressProps.onPointerDown = e => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if ((0, $bx7SL$isVirtualPointerEvent)(e.nativeEvent)) {\n          state.pointerType = \"virtual\";\n          return;\n        }\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        state.pointerType = e.pointerType;\n        let shouldStopPropagation = true;\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n          if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n          addGlobalListener(document, \"pointermove\", onPointerMove, false);\n          addGlobalListener(document, \"pointerup\", onPointerUp, false);\n          addGlobalListener(document, \"pointercancel\", onPointerCancel, false);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseDown = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n      pressProps.onPointerUp = e => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target) || state.pointerType === \"virtual\") return;\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n      };\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = e => {\n        if (e.pointerId !== state.activePointerId) return;\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n      };\n      let onPointerUp = e => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        }\n      };\n      let onPointerCancel = e => {\n        cancel(e);\n      };\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = e => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        if (state.ignoreEmulatedMouseEvents) {\n          e.stopPropagation();\n          return;\n        }\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = (0, $bx7SL$isVirtualClick)(e.nativeEvent) ? \"virtual\" : \"mouse\";\n        if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);\n        let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        if (shouldStopPropagation) e.stopPropagation();\n        addGlobalListener(document, \"mouseup\", onMouseUp, false);\n      };\n      pressProps.onMouseEnter = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseLeave = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseUp = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType || \"mouse\");\n      };\n      let onMouseUp = e => {\n        // Only handle left clicks\n        if (e.button !== 0) return;\n        state.isPressed = false;\n        removeAllGlobalListeners();\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isOverTarget = false;\n      };\n      pressProps.onTouchStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n        if (!touch) return;\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = \"touch\";\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);\n        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n        let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        if (shouldStopPropagation) e.stopPropagation();\n        addGlobalListener(window, \"scroll\", onScroll, true);\n      };\n      pressProps.onTouchMove = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            shouldStopPropagation = triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onTouchEnd = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n        if (shouldStopPropagation) e.stopPropagation();\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        removeAllGlobalListeners();\n      };\n      pressProps.onTouchCancel = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed) cancel(e);\n      };\n      let onScroll = e => {\n        if (state.isPressed && e.target.contains(state.target)) cancel({\n          currentTarget: state.target,\n          shiftKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          altKey: false\n        });\n      };\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    }\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress, cancel, cancelOnPointerExit, triggerPressEnd, triggerPressStart, triggerPressUp]);\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  (0, $bx7SL$useEffect)(() => {\n    return () => {\n      if (!allowTextSelectionOnPress)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(ref.current.target);\n    };\n  }, [allowTextSelectionOnPress]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: (0, $bx7SL$mergeProps)(domProps, pressProps)\n  };\n}\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n  return target.tagName === \"A\" && target.hasAttribute(\"href\");\n}\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {\n  const {\n    key: key,\n    code: code\n  } = event;\n  const element = currentTarget;\n  const role = element.getAttribute(\"role\");\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (key === \"Enter\" || key === \" \" || key === \"Spacebar\" || code === \"Space\") && !(element instanceof HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) &&\n  // Links should only trigger with Enter key\n  !((role === \"link\" || !role && $f6c31cce2adf654f$var$isHTMLAnchorLink(element)) && key !== \"Enter\");\n}\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n  const {\n    targetTouches: targetTouches\n  } = event;\n  if (targetTouches.length > 0) return targetTouches[0];\n  return null;\n}\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) return touch;\n  }\n  return null;\n}\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n  let offsetX = point.width / 2 || point.radiusX || 0;\n  let offsetY = point.height / 2 || point.radiusY || 0;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) return false;\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) return false;\n  return true;\n}\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.hasAttribute(\"draggable\");\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {\n  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);\n  if (target instanceof HTMLButtonElement) return target.type !== \"submit\" && target.type !== \"reset\";\n  if ($f6c31cce2adf654f$var$isHTMLAnchorLink(target)) return false;\n  return true;\n}\nconst $f6c31cce2adf654f$var$nonTextInputTypes = new Set([\"checkbox\", \"radio\", \"range\", \"color\", \"file\", \"image\", \"button\", \"submit\", \"reset\"]);\nfunction $f6c31cce2adf654f$var$isValidInputKey(target, key) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === \"checkbox\" || target.type === \"radio\" ? key === \" \" : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);\n}\nconst $3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/(0, $bx7SL$react).forwardRef(({\n  children: children,\n  ...props\n}, ref) => {\n  let newRef = (0, $bx7SL$useRef)();\n  ref = ref !== null && ref !== void 0 ? ref : newRef;\n  let {\n    pressProps: pressProps\n  } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({\n    ...props,\n    ref: ref\n  });\n  let child = (0, $bx7SL$react).Children.only(children);\n  return /*#__PURE__*/(0, $bx7SL$react).cloneElement(child,\n  // @ts-ignore\n  {\n    ref: ref,\n    ...(0, $bx7SL$mergeProps)(child.props, pressProps)\n  });\n});\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/(0, $bx7SL$react).forwardRef(({\n  children: children,\n  ...props\n}, ref) => {\n  let isRegistered = (0, $bx7SL$useRef)(false);\n  let prevContext = (0, $bx7SL$useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));\n  let context = (0, $bx7SL$mergeProps)(prevContext || {}, {\n    ...props,\n    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),\n    register() {\n      isRegistered.current = true;\n      if (prevContext) prevContext.register();\n    }\n  });\n  (0, $bx7SL$useSyncRef)(prevContext, ref);\n  (0, $bx7SL$useEffect)(() => {\n    if (!isRegistered.current) {\n      console.warn(\"A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.\");\n      isRegistered.current = true; // only warn once in strict mode.\n    }\n  }, []);\n  return /*#__PURE__*/(0, $bx7SL$react).createElement((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {\n    value: context\n  }, children);\n});\nfunction $f1ab8c75478c6f73$export$cf75428e0b9ed1ea({\n  children: children\n}) {\n  return /*#__PURE__*/(0, $bx7SL$react).createElement((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {\n    value: undefined\n  }, children);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nclass $8a9cb279dc87e130$export$905e7fc544a71f36 {\n  isDefaultPrevented() {\n    return this.nativeEvent.defaultPrevented;\n  }\n  preventDefault() {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n  stopPropagation() {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n  isPropagationStopped() {\n    return false;\n  }\n  persist() {}\n  constructor(type, nativeEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target;\n    this.currentTarget = nativeEvent.currentTarget;\n    this.relatedTarget = nativeEvent.relatedTarget;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n}\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n  let stateRef = (0, $bx7SL$useRef)({\n    isFocused: false,\n    observer: null\n  });\n  // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n  (0, $bx7SL$useLayoutEffect)(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n  let dispatchBlur = (0, $bx7SL$useEffectEvent)(e => {\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);\n  });\n  // This function is called during a React onFocus event.\n  return (0, $bx7SL$useCallback)(e => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {\n      stateRef.current.isFocused = true;\n      let target = e.target;\n      let onBlurHandler = e => {\n        stateRef.current.isFocused = false;\n        if (target.disabled)\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          dispatchBlur(new $8a9cb279dc87e130$export$905e7fc544a71f36(\"blur\", e));\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n      target.addEventListener(\"focusout\", onBlurHandler, {\n        once: true\n      });\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          let relatedTargetEl = target === document.activeElement ? null : document.activeElement;\n          target.dispatchEvent(new FocusEvent(\"blur\", {\n            relatedTarget: relatedTargetEl\n          }));\n          target.dispatchEvent(new FocusEvent(\"focusout\", {\n            bubbles: true,\n            relatedTarget: relatedTargetEl\n          }));\n        }\n      });\n      stateRef.current.observer.observe(target, {\n        attributes: true,\n        attributeFilter: [\"disabled\"]\n      });\n    }\n  }, [dispatchBlur]);\n}\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n  let {\n    isDisabled: isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange: onFocusChange\n  } = props;\n  const onBlur = (0, $bx7SL$useCallback)(e => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) onBlurProp(e);\n      if (onFocusChange) onFocusChange(false);\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n  const onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);\n  const onFocus = (0, $bx7SL$useCallback)(e => {\n    // Double check that document.activeElement actually matches e.target in case a previously chained\n    // focus handler already moved focus somewhere else.\n    if (e.target === e.currentTarget && document.activeElement === e.target) {\n      if (onFocusProp) onFocusProp(e);\n      if (onFocusChange) onFocusChange(true);\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n  return {\n    focusProps: {\n      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,\n      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : undefined\n    }\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nlet $507fabe10e71c6fb$var$currentModality = null;\nlet $507fabe10e71c6fb$var$changeHandlers = new Set();\nlet $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;\nlet $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\nlet $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n// Only Tab or Esc keys will make focus visible on text input elements\nconst $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\nfunction $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {\n  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e);\n}\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction $507fabe10e71c6fb$var$isValidKey(e) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || !(0, $bx7SL$isMac)() && e.altKey || e.ctrlKey || e.key === \"Control\" || e.key === \"Shift\" || e.key === \"Meta\");\n}\nfunction $507fabe10e71c6fb$var$handleKeyboardEvent(e) {\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n  if ($507fabe10e71c6fb$var$isValidKey(e)) {\n    $507fabe10e71c6fb$var$currentModality = \"keyboard\";\n    $507fabe10e71c6fb$var$triggerChangeHandlers(\"keyboard\", e);\n  }\n}\nfunction $507fabe10e71c6fb$var$handlePointerEvent(e) {\n  $507fabe10e71c6fb$var$currentModality = \"pointer\";\n  if (e.type === \"mousedown\" || e.type === \"pointerdown\") {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$triggerChangeHandlers(\"pointer\", e);\n  }\n}\nfunction $507fabe10e71c6fb$var$handleClickEvent(e) {\n  if ((0, $bx7SL$isVirtualClick)(e)) {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$currentModality = \"virtual\";\n  }\n}\nfunction $507fabe10e71c6fb$var$handleFocusEvent(e) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) return;\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {\n    $507fabe10e71c6fb$var$currentModality = \"virtual\";\n    $507fabe10e71c6fb$var$triggerChangeHandlers(\"virtual\", e);\n  }\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n}\nfunction $507fabe10e71c6fb$var$handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;\n}\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction $507fabe10e71c6fb$var$setupGlobalFocusEvents() {\n  if (typeof window === \"undefined\" || $507fabe10e71c6fb$var$hasSetupGlobalListeners) return;\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n  document.addEventListener(\"keydown\", $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener(\"keyup\", $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener(\"click\", $507fabe10e71c6fb$var$handleClickEvent, true);\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener(\"focus\", $507fabe10e71c6fb$var$handleFocusEvent, true);\n  window.addEventListener(\"blur\", $507fabe10e71c6fb$var$handleWindowBlur, false);\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener(\"pointermove\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener(\"pointerup\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n  } else {\n    document.addEventListener(\"mousedown\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener(\"mousemove\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener(\"mouseup\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n  }\n  $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;\n}\nif (typeof document !== \"undefined\") {\n  if (document.readyState !== \"loading\") $507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener(\"DOMContentLoaded\", $507fabe10e71c6fb$var$setupGlobalFocusEvents);\n}\nfunction $507fabe10e71c6fb$export$b9b3dfddab17db27() {\n  return $507fabe10e71c6fb$var$currentModality !== \"pointer\";\n}\nfunction $507fabe10e71c6fb$export$630ff653c5ada6a9() {\n  return $507fabe10e71c6fb$var$currentModality;\n}\nfunction $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {\n  $507fabe10e71c6fb$var$currentModality = modality;\n  $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);\n}\nfunction $507fabe10e71c6fb$export$98e20ec92f614cfe() {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  let [modality, setModality] = (0, $bx7SL$useState)($507fabe10e71c6fb$var$currentModality);\n  (0, $bx7SL$useEffect)(() => {\n    let handler = () => {\n      setModality($507fabe10e71c6fb$var$currentModality);\n    };\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, []);\n  return (0, $bx7SL$useIsSSR)() ? null : modality;\n}\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\nfunction $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {\n  return !(isTextInput && modality === \"keyboard\" && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\nfunction $507fabe10e71c6fb$export$ffd9e5021c1fb2d6(props = {}) {\n  let {\n    isTextInput: isTextInput,\n    autoFocus: autoFocus\n  } = props;\n  let [isFocusVisibleState, setFocusVisible] = (0, $bx7SL$useState)(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());\n  $507fabe10e71c6fb$export$ec71b4b83ac08ec3(isFocusVisible => {\n    setFocusVisible(isFocusVisible);\n  }, [isTextInput], {\n    isTextInput: isTextInput\n  });\n  return {\n    isFocusVisible: isFocusVisibleState\n  };\n}\nfunction $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  (0, $bx7SL$useEffect)(() => {\n    let handler = (modality, e) => {\n      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;\n      fn($507fabe10e71c6fb$export$b9b3dfddab17db27());\n    };\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n  let {\n    isDisabled: isDisabled,\n    onBlurWithin: onBlurWithin,\n    onFocusWithin: onFocusWithin,\n    onFocusWithinChange: onFocusWithinChange\n  } = props;\n  let state = (0, $bx7SL$useRef)({\n    isFocusWithin: false\n  });\n  let onBlur = (0, $bx7SL$useCallback)(e => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n      state.current.isFocusWithin = false;\n      if (onBlurWithin) onBlurWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(false);\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n  let onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);\n  let onFocus = (0, $bx7SL$useCallback)(e => {\n    // Double check that document.activeElement actually matches e.target in case a previously chained\n    // focus handler already moved focus somewhere else.\n    if (!state.current.isFocusWithin && document.activeElement === e.target) {\n      if (onFocusWithin) onFocusWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(true);\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n  if (isDisabled) return {\n    focusWithinProps: {\n      onFocus: null,\n      onBlur: null\n    }\n  };\n  return {\n    focusWithinProps: {\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nlet $6179b936705e76d3$var$hoverCount = 0;\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e) {\n  if (e.pointerType === \"touch\") $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n  if (typeof document === \"undefined\") return;\n  if (typeof PointerEvent !== \"undefined\") document.addEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener(\"touchend\", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  $6179b936705e76d3$var$hoverCount++;\n  return () => {\n    $6179b936705e76d3$var$hoverCount--;\n    if ($6179b936705e76d3$var$hoverCount > 0) return;\n    if (typeof PointerEvent !== \"undefined\") document.removeEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener(\"touchend\", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  };\n}\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n  let {\n    onHoverStart: onHoverStart,\n    onHoverChange: onHoverChange,\n    onHoverEnd: onHoverEnd,\n    isDisabled: isDisabled\n  } = props;\n  let [isHovered, setHovered] = (0, $bx7SL$useState)(false);\n  let state = (0, $bx7SL$useRef)({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: \"\",\n    target: null\n  }).current;\n  (0, $bx7SL$useEffect)($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n  let {\n    hoverProps: hoverProps,\n    triggerHoverEnd: triggerHoverEnd\n  } = (0, $bx7SL$useMemo)(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === \"touch\" || state.isHovered || !event.currentTarget.contains(event.target)) return;\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n      if (onHoverStart) onHoverStart({\n        type: \"hoverstart\",\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(true);\n      setHovered(true);\n    };\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = \"\";\n      state.target = null;\n      if (pointerType === \"touch\" || !state.isHovered) return;\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) onHoverEnd({\n        type: \"hoverend\",\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(false);\n      setHovered(false);\n    };\n    let hoverProps = {};\n    if (typeof PointerEvent !== \"undefined\") {\n      hoverProps.onPointerEnter = e => {\n        if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === \"mouse\") return;\n        triggerHoverStart(e, e.pointerType);\n      };\n      hoverProps.onPointerLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n      hoverProps.onMouseEnter = e => {\n        if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, \"mouse\");\n        state.ignoreEmulatedMouseEvents = false;\n      };\n      hoverProps.onMouseLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, \"mouse\");\n      };\n    }\n    return {\n      hoverProps: hoverProps,\n      triggerHoverEnd: triggerHoverEnd\n    };\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n  (0, $bx7SL$useEffect)(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) triggerHoverEnd({\n      currentTarget: state.target\n    }, state.pointerType);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDisabled]);\n  return {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nfunction $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {\n  let {\n    ref: ref,\n    onInteractOutside: onInteractOutside,\n    isDisabled: isDisabled,\n    onInteractOutsideStart: onInteractOutsideStart\n  } = props;\n  let stateRef = (0, $bx7SL$useRef)({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false\n  });\n  let onPointerDown = (0, $bx7SL$useEffectEvent)(e => {\n    if (onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n      if (onInteractOutsideStart) onInteractOutsideStart(e);\n      stateRef.current.isPointerDown = true;\n    }\n  });\n  let triggerInteractOutside = (0, $bx7SL$useEffectEvent)(e => {\n    if (onInteractOutside) onInteractOutside(e);\n  });\n  (0, $bx7SL$useEffect)(() => {\n    let state = stateRef.current;\n    if (isDisabled) return;\n    // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n    if (typeof PointerEvent !== \"undefined\") {\n      let onPointerUp = e => {\n        if (state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) triggerInteractOutside(e);\n        state.isPointerDown = false;\n      };\n      // changing these to capture phase fixed combobox\n      document.addEventListener(\"pointerdown\", onPointerDown, true);\n      document.addEventListener(\"pointerup\", onPointerUp, true);\n      return () => {\n        document.removeEventListener(\"pointerdown\", onPointerDown, true);\n        document.removeEventListener(\"pointerup\", onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = e => {\n        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) triggerInteractOutside(e);\n        state.isPointerDown = false;\n      };\n      let onTouchEnd = e => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) triggerInteractOutside(e);\n        state.isPointerDown = false;\n      };\n      document.addEventListener(\"mousedown\", onPointerDown, true);\n      document.addEventListener(\"mouseup\", onMouseUp, true);\n      document.addEventListener(\"touchstart\", onPointerDown, true);\n      document.addEventListener(\"touchend\", onTouchEnd, true);\n      return () => {\n        document.removeEventListener(\"mousedown\", onPointerDown, true);\n        document.removeEventListener(\"mouseup\", onMouseUp, true);\n        document.removeEventListener(\"touchstart\", onPointerDown, true);\n        document.removeEventListener(\"touchend\", onTouchEnd, true);\n      };\n    }\n  }, [ref, isDisabled, onPointerDown, triggerInteractOutside]);\n}\nfunction $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {\n  if (event.button > 0) return false;\n  if (event.target) {\n    // if the event target is no longer in the document, ignore\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;\n    // If the target is within a top layer element (e.g. toasts), ignore.\n    if (event.target.closest(\"[data-react-aria-top-layer]\")) return false;\n  }\n  return ref.current && !ref.current.contains(event.target);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nfunction $93925083ecbb358c$export$48d1ea6320830260(handler) {\n  if (!handler) return;\n  let shouldStopPropagation = true;\n  return e => {\n    let event = {\n      ...e,\n      preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation() {\n        console.error(\"stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.\");\n      },\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    };\n    handler(event);\n    if (shouldStopPropagation) e.stopPropagation();\n  };\n}\nfunction $46d819fcbaf35654$export$8f71654801c2f7cd(props) {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyDown),\n      onKeyUp: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyUp)\n    }\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n  let {\n    onMoveStart: onMoveStart,\n    onMove: onMove,\n    onMoveEnd: onMoveEnd\n  } = props;\n  let state = (0, $bx7SL$useRef)({\n    didMove: false,\n    lastPosition: null,\n    id: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = (0, $bx7SL$useGlobalListeners)();\n  let move = (0, $bx7SL$useEffectEvent)((originalEvent, pointerType, deltaX, deltaY) => {\n    if (deltaX === 0 && deltaY === 0) return;\n    if (!state.current.didMove) {\n      state.current.didMove = true;\n      onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n        type: \"movestart\",\n        pointerType: pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    }\n    onMove({\n      type: \"move\",\n      pointerType: pointerType,\n      deltaX: deltaX,\n      deltaY: deltaY,\n      shiftKey: originalEvent.shiftKey,\n      metaKey: originalEvent.metaKey,\n      ctrlKey: originalEvent.ctrlKey,\n      altKey: originalEvent.altKey\n    });\n  });\n  let end = (0, $bx7SL$useEffectEvent)((originalEvent, pointerType) => {\n    (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)();\n    if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n      type: \"moveend\",\n      pointerType: pointerType,\n      shiftKey: originalEvent.shiftKey,\n      metaKey: originalEvent.metaKey,\n      ctrlKey: originalEvent.ctrlKey,\n      altKey: originalEvent.altKey\n    });\n  });\n  let moveProps = (0, $bx7SL$useMemo)(() => {\n    let moveProps = {};\n    let start = () => {\n      (0, $14c0b72509d70225$export$16a4697467175487)();\n      state.current.didMove = false;\n    };\n    if (typeof PointerEvent === \"undefined\") {\n      let onMouseMove = e => {\n        if (e.button === 0) {\n          move(e, \"mouse\", e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n      let onMouseUp = e => {\n        if (e.button === 0) {\n          end(e, \"mouse\");\n          removeGlobalListener(window, \"mousemove\", onMouseMove, false);\n          removeGlobalListener(window, \"mouseup\", onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = e => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          addGlobalListener(window, \"mousemove\", onMouseMove, false);\n          addGlobalListener(window, \"mouseup\", onMouseUp, false);\n        }\n      };\n      let onTouchMove = e => {\n        let touch = [...e.changedTouches].findIndex(({\n          identifier: identifier\n        }) => identifier === state.current.id);\n        if (touch >= 0) {\n          let {\n            pageX: pageX,\n            pageY: pageY\n          } = e.changedTouches[touch];\n          move(e, \"touch\", pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: pageX,\n            pageY: pageY\n          };\n        }\n      };\n      let onTouchEnd = e => {\n        let touch = [...e.changedTouches].findIndex(({\n          identifier: identifier\n        }) => identifier === state.current.id);\n        if (touch >= 0) {\n          end(e, \"touch\");\n          state.current.id = null;\n          removeGlobalListener(window, \"touchmove\", onTouchMove);\n          removeGlobalListener(window, \"touchend\", onTouchEnd);\n          removeGlobalListener(window, \"touchcancel\", onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = e => {\n        if (e.changedTouches.length === 0 || state.current.id != null) return;\n        let {\n          pageX: pageX,\n          pageY: pageY,\n          identifier: identifier\n        } = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {\n          pageX: pageX,\n          pageY: pageY\n        };\n        state.current.id = identifier;\n        addGlobalListener(window, \"touchmove\", onTouchMove, false);\n        addGlobalListener(window, \"touchend\", onTouchEnd, false);\n        addGlobalListener(window, \"touchcancel\", onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || \"mouse\";\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n      let onPointerUp = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || \"mouse\";\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, \"pointermove\", onPointerMove, false);\n          removeGlobalListener(window, \"pointerup\", onPointerUp, false);\n          removeGlobalListener(window, \"pointercancel\", onPointerUp, false);\n        }\n      };\n      moveProps.onPointerDown = e => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          state.current.id = e.pointerId;\n          addGlobalListener(window, \"pointermove\", onPointerMove, false);\n          addGlobalListener(window, \"pointerup\", onPointerUp, false);\n          addGlobalListener(window, \"pointercancel\", onPointerUp, false);\n        }\n      };\n    }\n    let triggerKeyboardMove = (e, deltaX, deltaY) => {\n      start();\n      move(e, \"keyboard\", deltaX, deltaY);\n      end(e, \"keyboard\");\n    };\n    moveProps.onKeyDown = e => {\n      switch (e.key) {\n        case \"Left\":\n        case \"ArrowLeft\":\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case \"Right\":\n        case \"ArrowRight\":\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case \"Up\":\n        case \"ArrowUp\":\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case \"Down\":\n        case \"ArrowDown\":\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n    return moveProps;\n  }, [state, addGlobalListener, removeGlobalListener, move, end]);\n  return {\n    moveProps: moveProps\n  };\n}\n\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {\n  let {\n    onScroll: onScroll,\n    isDisabled: isDisabled\n  } = props;\n  let onScrollHandler = (0, $bx7SL$useCallback)(e => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) return;\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n    if (onScroll) onScroll({\n      deltaX: e.deltaX,\n      deltaY: e.deltaY\n    });\n  }, [onScroll]);\n  (0, $bx7SL$useEvent)(ref, \"wheel\", isDisabled ? null : onScrollHandler);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;\nfunction $8a26561d2877236e$export$c24ed0104d07eab9(props) {\n  let {\n    isDisabled: isDisabled,\n    onLongPressStart: onLongPressStart,\n    onLongPressEnd: onLongPressEnd,\n    onLongPress: onLongPress,\n    threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD,\n    accessibilityDescription: accessibilityDescription\n  } = props;\n  const timeRef = (0, $bx7SL$useRef)(null);\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = (0, $bx7SL$useGlobalListeners)();\n  let {\n    pressProps: pressProps\n  } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({\n    isDisabled: isDisabled,\n    onPressStart(e) {\n      e.continuePropagation();\n      if (e.pointerType === \"mouse\" || e.pointerType === \"touch\") {\n        if (onLongPressStart) onLongPressStart({\n          ...e,\n          type: \"longpressstart\"\n        });\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent(\"pointercancel\", {\n            bubbles: true\n          }));\n          if (onLongPress) onLongPress({\n            ...e,\n            type: \"longpress\"\n          });\n          timeRef.current = null;\n        }, threshold);\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e.pointerType === \"touch\") {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n          addGlobalListener(e.target, \"contextmenu\", onContextMenu, {\n            once: true\n          });\n          addGlobalListener(window, \"pointerup\", () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, \"contextmenu\", onContextMenu);\n            }, 30);\n          }, {\n            once: true\n          });\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) clearTimeout(timeRef.current);\n      if (onLongPressEnd && (e.pointerType === \"mouse\" || e.pointerType === \"touch\")) onLongPressEnd({\n        ...e,\n        type: \"longpressend\"\n      });\n    }\n  });\n  let descriptionProps = (0, $bx7SL$useDescription)(onLongPress && !isDisabled ? accessibilityDescription : null);\n  return {\n    longPressProps: (0, $bx7SL$mergeProps)(pressProps, descriptionProps)\n  };\n}\nexport { $3b117e43dc0ca95d$export$27c701ed9e449e99 as Pressable, $f1ab8c75478c6f73$export$3351871ee4b288b8 as PressResponder, $f1ab8c75478c6f73$export$cf75428e0b9ed1ea as ClearPressResponder, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6 as useFocus, $507fabe10e71c6fb$export$b9b3dfddab17db27 as isFocusVisible, $507fabe10e71c6fb$export$630ff653c5ada6a9 as getInteractionModality, $507fabe10e71c6fb$export$8397ddfc504fdb9a as setInteractionModality, $507fabe10e71c6fb$export$98e20ec92f614cfe as useInteractionModality, $507fabe10e71c6fb$export$ffd9e5021c1fb2d6 as useFocusVisible, $507fabe10e71c6fb$export$ec71b4b83ac08ec3 as useFocusVisibleListener, $9ab94262bd0047c7$export$420e68273165f4ec as useFocusWithin, $6179b936705e76d3$export$ae780daf29e6d456 as useHover, $e0b6e0b68ec7f50f$export$872b660ac5a1ff98 as useInteractOutside, $46d819fcbaf35654$export$8f71654801c2f7cd as useKeyboard, $e8a7022cf87cba2a$export$36da96379f79f245 as useMove, $f6c31cce2adf654f$export$45712eceda6fad21 as usePress, $7d0a636d7a4dcefd$export$2123ff2b87c81ca as useScrollWheel, $8a26561d2877236e$export$c24ed0104d07eab9 as useLongPress };","map":{"version":3,"names":["$14c0b72509d70225$var$state","$14c0b72509d70225$var$savedUserSelect","$14c0b72509d70225$var$modifiedElementMap","WeakMap","$14c0b72509d70225$export$16a4697467175487","target","$bx7SL$isIOS","document","documentElement","style","webkitUserSelect","HTMLElement","SVGElement","set","userSelect","$14c0b72509d70225$export$b0d6fa1ab32e3295","setTimeout","$bx7SL$runAfterTransition","has","targetOldUserSelect","get","getAttribute","removeAttribute","delete","$ae1eeba8b9eafd08$export$5165eccb35aaadb5","$bx7SL$react","createContext","displayName","$f6c31cce2adf654f$var$usePressResponderContext","props","context","$bx7SL$useContext","register","contextProps","$bx7SL$mergeProps","$bx7SL$useSyncRef","ref","$f6c31cce2adf654f$var$_shouldStopPropagation","$f6c31cce2adf654f$var$PressEvent","continuePropagation","shouldStopPropagation","$bx7SL$_","constructor","type","pointerType","originalEvent","$bx7SL$_1","currentTarget","shiftKey","metaKey","ctrlKey","altKey","$f6c31cce2adf654f$var$LINK_CLICKED","Symbol","$f6c31cce2adf654f$export$45712eceda6fad21","onPress","onPressChange","onPressStart","onPressEnd","onPressUp","isDisabled","isPressed","isPressedProp","preventFocusOnPress","shouldCancelOnPointerExit","allowTextSelectionOnPress","_","domProps","setPressed","$bx7SL$useState","$bx7SL$useRef","ignoreEmulatedMouseEvents","ignoreClickAfterPress","didFirePressStart","isTriggeringEvent","activePointerId","isOverTarget","addGlobalListener","removeAllGlobalListeners","$bx7SL$useGlobalListeners","triggerPressStart","$bx7SL$useEffectEvent","state","current","event","triggerPressEnd","wasPressed","triggerPressUp","cancel","e","$f6c31cce2adf654f$var$createEvent","cancelOnPointerExit","pressProps","$bx7SL$useMemo","onKeyDown","$f6c31cce2adf654f$var$isValidKeyboardEvent","nativeEvent","contains","$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard","key","preventDefault","repeat","onKeyUp","stopPropagation","$bx7SL$isMac","metaKeyEvents","Map","onClick","button","$bx7SL$openLink","isOpening","$bx7SL$isVirtualClick","$bx7SL$focusWithoutScrolling","stopPressStart","stopPressUp","stopPressEnd","_state_metaKeyEvents","_state_metaKeyEvents1","$f6c31cce2adf654f$var$isHTMLAnchorLink","size","events","values","dispatchEvent","KeyboardEvent","PointerEvent","onPointerDown","$bx7SL$isVirtualPointerEvent","$f6c31cce2adf654f$var$shouldPreventDefault","pointerId","onPointerMove","onPointerUp","onPointerCancel","onMouseDown","$f6c31cce2adf654f$var$isOverTarget","onDragStart","onMouseUp","onMouseEnter","onMouseLeave","onTouchStart","touch","$f6c31cce2adf654f$var$getTouchFromEvent","identifier","window","onScroll","onTouchMove","$f6c31cce2adf654f$var$getTouchById","onTouchEnd","onTouchCancel","$bx7SL$useEffect","tagName","hasAttribute","code","element","role","HTMLInputElement","$f6c31cce2adf654f$var$isValidInputKey","HTMLTextAreaElement","isContentEditable","targetTouches","length","changedTouches","i","$f6c31cce2adf654f$var$getPointClientRect","point","offsetX","width","radiusX","offsetY","height","radiusY","top","clientY","right","clientX","bottom","left","$f6c31cce2adf654f$var$areRectanglesOverlapping","a","b","rect","getBoundingClientRect","pointRect","HTMLButtonElement","$f6c31cce2adf654f$var$nonTextInputTypes","Set","$3b117e43dc0ca95d$export$27c701ed9e449e99","forwardRef","children","newRef","child","Children","only","cloneElement","$f1ab8c75478c6f73$export$3351871ee4b288b8","isRegistered","prevContext","console","warn","createElement","Provider","value","$f1ab8c75478c6f73$export$cf75428e0b9ed1ea","undefined","$8a9cb279dc87e130$export$905e7fc544a71f36","isDefaultPrevented","defaultPrevented","isPropagationStopped","persist","relatedTarget","bubbles","cancelable","eventPhase","isTrusted","timeStamp","$8a9cb279dc87e130$export$715c682d09d639cc","onBlur","stateRef","isFocused","observer","$bx7SL$useLayoutEffect","disconnect","dispatchBlur","$bx7SL$useCallback","HTMLSelectElement","onBlurHandler","disabled","addEventListener","once","MutationObserver","relatedTargetEl","activeElement","FocusEvent","observe","attributes","attributeFilter","$a1ea59d68270f0dd$export$f8168d8dd8fd66e6","onFocus","onFocusProp","onBlurProp","onFocusChange","onSyntheticFocus","focusProps","$507fabe10e71c6fb$var$currentModality","$507fabe10e71c6fb$var$changeHandlers","$507fabe10e71c6fb$var$hasSetupGlobalListeners","$507fabe10e71c6fb$var$hasEventBeforeFocus","$507fabe10e71c6fb$var$hasBlurredWindowRecently","$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS","Tab","Escape","$507fabe10e71c6fb$var$triggerChangeHandlers","modality","handler","$507fabe10e71c6fb$var$isValidKey","$507fabe10e71c6fb$var$handleKeyboardEvent","$507fabe10e71c6fb$var$handlePointerEvent","$507fabe10e71c6fb$var$handleClickEvent","$507fabe10e71c6fb$var$handleFocusEvent","$507fabe10e71c6fb$var$handleWindowBlur","$507fabe10e71c6fb$var$setupGlobalFocusEvents","focus","prototype","apply","arguments","readyState","$507fabe10e71c6fb$export$b9b3dfddab17db27","$507fabe10e71c6fb$export$630ff653c5ada6a9","$507fabe10e71c6fb$export$8397ddfc504fdb9a","$507fabe10e71c6fb$export$98e20ec92f614cfe","setModality","add","$bx7SL$useIsSSR","$507fabe10e71c6fb$var$isKeyboardFocusEvent","isTextInput","$507fabe10e71c6fb$export$ffd9e5021c1fb2d6","autoFocus","isFocusVisibleState","setFocusVisible","$507fabe10e71c6fb$export$ec71b4b83ac08ec3","isFocusVisible","fn","deps","opts","$9ab94262bd0047c7$export$420e68273165f4ec","onBlurWithin","onFocusWithin","onFocusWithinChange","isFocusWithin","focusWithinProps","$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$hoverCount","$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$handleGlobalPointerEvent","$6179b936705e76d3$var$setupGlobalTouchEvents","removeEventListener","$6179b936705e76d3$export$ae780daf29e6d456","onHoverStart","onHoverChange","onHoverEnd","isHovered","setHovered","hoverProps","triggerHoverEnd","triggerHoverStart","onPointerEnter","onPointerLeave","$e0b6e0b68ec7f50f$export$872b660ac5a1ff98","onInteractOutside","onInteractOutsideStart","isPointerDown","$e0b6e0b68ec7f50f$var$isValidEvent","triggerInteractOutside","ownerDocument","closest","$93925083ecbb358c$export$48d1ea6320830260","error","$46d819fcbaf35654$export$8f71654801c2f7cd","keyboardProps","$e8a7022cf87cba2a$export$36da96379f79f245","onMoveStart","onMove","onMoveEnd","didMove","lastPosition","id","removeGlobalListener","move","deltaX","deltaY","end","moveProps","start","onMouseMove","pageX","pageY","findIndex","triggerKeyboardMove","$7d0a636d7a4dcefd$export$2123ff2b87c81ca","onScrollHandler","$bx7SL$useEvent","$8a26561d2877236e$var$DEFAULT_THRESHOLD","$8a26561d2877236e$export$c24ed0104d07eab9","onLongPressStart","onLongPressEnd","onLongPress","threshold","accessibilityDescription","timeRef","onContextMenu","clearTimeout","descriptionProps","$bx7SL$useDescription","longPressProps"],"sources":["/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/index.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/Pressable.tsx","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/usePress.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/textSelection.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/context.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/PressResponder.tsx","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useFocus.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/utils.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useFocusVisible.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useFocusWithin.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useHover.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useInteractOutside.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useKeyboard.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/createEventHandler.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useMove.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useScrollWheel.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useLongPress.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {Pressable} from './Pressable';\nexport {PressResponder, ClearPressResponder} from './PressResponder';\nexport {useFocus} from './useFocus';\nexport {\n  isFocusVisible,\n  getInteractionModality,\n  setInteractionModality,\n  useInteractionModality,\n  useFocusVisible,\n  useFocusVisibleListener\n} from './useFocusVisible';\nexport {useFocusWithin} from './useFocusWithin';\nexport {useHover} from './useHover';\nexport {useInteractOutside} from './useInteractOutside';\nexport {useKeyboard} from './useKeyboard';\nexport {useMove} from './useMove';\nexport {usePress} from './usePress';\nexport {useScrollWheel} from './useScrollWheel';\nexport {useLongPress} from './useLongPress';\n\nexport type {FocusProps, FocusResult} from './useFocus';\nexport type {FocusVisibleHandler, FocusVisibleProps, FocusVisibleResult, Modality} from './useFocusVisible';\nexport type {FocusWithinProps, FocusWithinResult} from './useFocusWithin';\nexport type {HoverProps, HoverResult} from './useHover';\nexport type {InteractOutsideProps} from './useInteractOutside';\nexport type {KeyboardProps, KeyboardResult} from './useKeyboard';\nexport type {PressProps, PressHookProps, PressResult} from './usePress';\nexport type {PressEvent, PressEvents, MoveStartEvent, MoveMoveEvent, MoveEndEvent, MoveEvents, HoverEvent, HoverEvents, FocusEvents, KeyboardEvents} from '@react-types/shared';\nexport type {MoveResult} from './useMove';\nexport type {LongPressProps, LongPressResult} from './useLongPress';\nexport type {ScrollWheelProps} from './useScrollWheel';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {PressProps, usePress} from './usePress';\nimport React, {ReactElement, RefObject, useRef} from 'react';\n\ninterface PressableProps extends PressProps {\n  children: ReactElement<DOMAttributes, string>\n}\n\nexport const Pressable = React.forwardRef(({children, ...props}: PressableProps, ref: RefObject<Element>) => {\n  let newRef = useRef();\n  ref = ref ?? newRef;\n  let {pressProps} = usePress({...props, ref});\n  let child = React.Children.only(children);\n  return React.cloneElement(\n    child,\n    // @ts-ignore\n    {ref, ...mergeProps(child.props, pressProps)}\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {disableTextSelection, restoreTextSelection} from './textSelection';\nimport {DOMAttributes, FocusableElement, PressEvent as IPressEvent, PointerType, PressEvents} from '@react-types/shared';\nimport {focusWithoutScrolling, isMac, isVirtualClick, isVirtualPointerEvent, mergeProps, openLink, useEffectEvent, useGlobalListeners, useSyncRef} from '@react-aria/utils';\nimport {PressResponderContext} from './context';\nimport {RefObject, useContext, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean,\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean,\n  /**\n   * Whether press events should be canceled when the pointer leaves the target while pressed.\n   * By default, this is `false`, which means if the pointer returns back over the target while\n   * still pressed, onPressStart will be fired again. If set to `true`, the press is canceled\n   * when the pointer leaves the target and onPressStart will not be fired if the pointer returns.\n   */\n  shouldCancelOnPointerExit?: boolean,\n  /** Whether text selection should be enabled on the pressable element. */\n  allowTextSelectionOnPress?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<Element>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  ignoreClickAfterPress: boolean,\n  didFirePressStart: boolean,\n  isTriggeringEvent: boolean,\n  activePointerId: any,\n  target: FocusableElement | null,\n  isOverTarget: boolean,\n  pointerType: PointerType,\n  userSelect?: string,\n  metaKeyEvents?: Map<string, KeyboardEvent>\n}\n\ninterface EventBase {\n  currentTarget: EventTarget,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: DOMAttributes\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n  useSyncRef(context, props.ref);\n\n  return props;\n}\n\nclass PressEvent implements IPressEvent {\n  type: IPressEvent['type'];\n  pointerType: PointerType;\n  target: Element;\n  shiftKey: boolean;\n  ctrlKey: boolean;\n  metaKey: boolean;\n  altKey: boolean;\n  #shouldStopPropagation = true;\n\n  constructor(type: IPressEvent['type'], pointerType: PointerType, originalEvent: EventBase) {\n    this.type = type;\n    this.pointerType = pointerType;\n    this.target = originalEvent.currentTarget as Element;\n    this.shiftKey = originalEvent.shiftKey;\n    this.metaKey = originalEvent.metaKey;\n    this.ctrlKey = originalEvent.ctrlKey;\n    this.altKey = originalEvent.altKey;\n  }\n\n  continuePropagation() {\n    this.#shouldStopPropagation = false;\n  }\n\n  get shouldStopPropagation() {\n    return this.#shouldStopPropagation;\n  }\n}\n\nconst LINK_CLICKED = Symbol('linkClicked');\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress,\n    shouldCancelOnPointerExit,\n    allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    isTriggeringEvent: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let triggerPressStart = useEffectEvent((originalEvent: EventBase, pointerType: PointerType) => {\n    let state = ref.current;\n    if (isDisabled || state.didFirePressStart) {\n      return;\n    }\n\n    let shouldStopPropagation = true;\n    state.isTriggeringEvent = true;\n    if (onPressStart) {\n      let event = new PressEvent('pressstart', pointerType, originalEvent);\n      onPressStart(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n\n    if (onPressChange) {\n      onPressChange(true);\n    }\n\n    state.isTriggeringEvent = false;\n    state.didFirePressStart = true;\n    setPressed(true);\n    return shouldStopPropagation;\n  });\n\n  let triggerPressEnd = useEffectEvent((originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n    let state = ref.current;\n    if (!state.didFirePressStart) {\n      return;\n    }\n\n    state.ignoreClickAfterPress = true;\n    state.didFirePressStart = false;\n    state.isTriggeringEvent = true;\n\n    let shouldStopPropagation = true;\n    if (onPressEnd) {\n      let event = new PressEvent('pressend', pointerType, originalEvent);\n      onPressEnd(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n\n    if (onPressChange) {\n      onPressChange(false);\n    }\n\n    setPressed(false);\n\n    if (onPress && wasPressed && !isDisabled) {\n      let event = new PressEvent('press', pointerType, originalEvent);\n      onPress(event);\n      shouldStopPropagation &&= event.shouldStopPropagation;\n    }\n\n    state.isTriggeringEvent = false;\n    return shouldStopPropagation;\n  });\n\n  let triggerPressUp = useEffectEvent((originalEvent: EventBase, pointerType: PointerType) => {\n    let state = ref.current;\n    if (isDisabled) {\n      return;\n    }\n\n    if (onPressUp) {\n      state.isTriggeringEvent = true;\n      let event = new PressEvent('pressup', pointerType, originalEvent);\n      onPressUp(event);\n      state.isTriggeringEvent = false;\n      return event.shouldStopPropagation;\n    }\n\n    return true;\n  });\n\n  let cancel = useEffectEvent((e: EventBase) => {\n    let state = ref.current;\n    if (state.isPressed) {\n      if (state.isOverTarget) {\n        triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n      }\n      state.isPressed = false;\n      state.isOverTarget = false;\n      state.activePointerId = null;\n      state.pointerType = null;\n      removeAllGlobalListeners();\n      if (!allowTextSelectionOnPress) {\n        restoreTextSelection(state.target);\n      }\n    }\n  });\n\n  let cancelOnPointerExit = useEffectEvent((e: EventBase) => {\n    if (shouldCancelOnPointerExit) {\n      cancel(e);\n    }\n  });\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let pressProps: DOMAttributes = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target as Element)) {\n          if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n            e.preventDefault();\n          }\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          let shouldStopPropagation = true;\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            shouldStopPropagation = triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n\n          if (shouldStopPropagation) {\n            e.stopPropagation();\n          }\n\n          // Keep track of the keydown events that occur while the Meta (e.g. Command) key is held.\n          // macOS has a bug where keyup events are not fired while the Meta key is down.\n          // When the Meta key itself is released we will get an event for that, and we'll act as if\n          // all of these other keys were released as well.\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1393524\n          // https://bugs.webkit.org/show_bug.cgi?id=55291\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=1299553\n          if (e.metaKey && isMac()) {\n            state.metaKeyEvents.set(e.key, e.nativeEvent);\n          }\n        } else if (e.key === 'Meta') {\n          state.metaKeyEvents = new Map();\n        }\n      },\n      onKeyUp(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target as Element)) {\n          triggerPressUp(createEvent(state.target, e), 'keyboard');\n        }\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e && e.button === 0 && !state.isTriggeringEvent && !(openLink as any).isOpening) {\n          let shouldStopPropagation = true;\n          if (isDisabled) {\n            e.preventDefault();\n          }\n\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === 'virtual' || isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            let stopPressStart = triggerPressStart(e, 'virtual');\n            let stopPressUp = triggerPressUp(e, 'virtual');\n            let stopPressEnd = triggerPressEnd(e, 'virtual');\n            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n          if (shouldStopPropagation) {\n            e.stopPropagation();\n          }\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && isValidKeyboardEvent(e, state.target)) {\n        if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n          e.preventDefault();\n        }\n\n        let target = e.target as Element;\n        let shouldStopPropagation = triggerPressEnd(createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n\n        // If a link was triggered with a key other than Enter, open the URL ourselves.\n        // This means the link has a role override, and the default browser behavior\n        // only applies when using the Enter key.\n        if (e.key !== 'Enter' && isHTMLAnchorLink(state.target) && state.target.contains(target) && !e[LINK_CLICKED]) {\n          // Store a hidden property on the event so we only trigger link click once,\n          // even if there are multiple usePress instances attached to the element.\n          e[LINK_CLICKED] = true;\n          openLink(state.target, e, false);\n        }\n\n        state.isPressed = false;\n        state.metaKeyEvents?.delete(e.key);\n      } else if (e.key === 'Meta' && state.metaKeyEvents?.size) {\n        // If we recorded keydown events that occurred while the Meta key was pressed,\n        // and those haven't received keyup events already, fire keyup events ourselves.\n        // See comment above for more info about the macOS bug causing this.\n        let events = state.metaKeyEvents;\n        state.metaKeyEvents = null;\n        for (let event of events.values()) {\n          state.target.dispatchEvent(new KeyboardEvent('keyup', event));\n        }\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if (isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as Element)) {\n          e.preventDefault();\n        }\n\n        state.pointerType = e.pointerType;\n\n        let shouldStopPropagation = true;\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled && !preventFocusOnPress) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          if (!allowTextSelectionOnPress) {\n            disableTextSelection(state.target);\n          }\n\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if (shouldPreventDefault(e.currentTarget as Element)) {\n            e.preventDefault();\n          }\n\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target as Element) || state.pointerType === 'virtual') {\n          return;\n        }\n\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && isOverTarget(e, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType || e.pointerType);\n        }\n      };\n\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId !== state.activePointerId) {\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if (isOverTarget(e, state.target)) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType);\n          } else if (state.isOverTarget) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) {\n            restoreTextSelection(state.target);\n          }\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget)) {\n          e.preventDefault();\n        }\n\n        if (state.ignoreEmulatedMouseEvents) {\n          e.stopPropagation();\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, state.pointerType || 'mouse');\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        if (!allowTextSelectionOnPress) {\n          disableTextSelection(state.target);\n        }\n\n        let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            shouldStopPropagation = triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) {\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancel(e);\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && (e.target as Element).contains(state.target)) {\n          cancel({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false,\n            altKey: false\n          });\n        }\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [\n    addGlobalListener,\n    isDisabled,\n    preventFocusOnPress,\n    removeAllGlobalListeners,\n    allowTextSelectionOnPress,\n    cancel,\n    cancelOnPointerExit,\n    triggerPressEnd,\n    triggerPressStart,\n    triggerPressUp\n  ]);\n\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        restoreTextSelection(ref.current.target);\n      }\n    };\n  }, [allowTextSelectionOnPress]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: Element): target is HTMLAnchorElement {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent, currentTarget: Element): boolean {\n  const {key, code} = event;\n  const element = currentTarget as HTMLElement;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') &&\n    !((element instanceof HTMLInputElement && !isValidInputKey(element, key)) ||\n      element instanceof HTMLTextAreaElement ||\n      element.isContentEditable) &&\n    // Links should only trigger with Enter key\n    !((role === 'link' || (!role && isHTMLAnchorLink(element))) && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createEvent(target: FocusableElement, e: EventBase): EventBase {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\ninterface Rect {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number,\n  width?: number,\n  height?: number,\n  radiusX?: number,\n  radiusY?: number\n}\n\nfunction getPointClientRect(point: EventPoint): Rect {\n  let offsetX = (point.width / 2) || point.radiusX || 0;\n  let offsetY = (point.height / 2) || point.radiusY || 0;\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nfunction isOverTarget(point: EventPoint, target: Element) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction shouldPreventDefault(target: Element) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.hasAttribute('draggable');\n}\n\nfunction shouldPreventDefaultKeyboard(target: Element, key: string) {\n  if (target instanceof HTMLInputElement) {\n    return !isValidInputKey(target, key);\n  }\n\n  if (target instanceof HTMLButtonElement) {\n    return target.type !== 'submit' && target.type !== 'reset';\n  }\n\n  if (isHTMLAnchorLink(target)) {\n    return false;\n  }\n\n  return true;\n}\n\nconst nonTextInputTypes = new Set([\n  'checkbox',\n  'radio',\n  'range',\n  'color',\n  'file',\n  'image',\n  'button',\n  'submit',\n  'reset'\n]);\n\nfunction isValidInputKey(target: HTMLInputElement, key: string) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === 'checkbox' || target.type === 'radio'\n    ? key === ' '\n    : nonTextInputTypes.has(target.type);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isIOS, runAfterTransition} from '@react-aria/utils';\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\n\n// For non-iOS devices, we apply user-select: none to the pressed element instead to avoid possible\n// performance issues that arise from applying and removing user-select: none to the entire page\n// (see https://github.com/adobe/react-spectrum/issues/1609).\ntype State = 'default' | 'disabled' | 'restoring';\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet state: State = 'default';\nlet savedUserSelect = '';\nlet modifiedElementMap = new WeakMap<Element, string>();\n\nexport function disableTextSelection(target?: Element) {\n  if (isIOS()) {\n    if (state === 'default') {\n      savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    state = 'disabled';\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nexport function restoreTextSelection(target?: Element) {\n  if (isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if (state !== 'disabled') {\n      return;\n    }\n\n    state = 'restoring';\n\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      runAfterTransition(() => {\n        // Avoid race conditions\n        if (state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') {\n            document.documentElement.style.webkitUserSelect = savedUserSelect || '';\n          }\n\n          savedUserSelect = '';\n          state = 'default';\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && modifiedElementMap.has(target)) {\n      let targetOldUserSelect = modifiedElementMap.get(target);\n\n      if (target.style.userSelect === 'none') {\n        target.style.userSelect = targetOldUserSelect;\n      }\n\n      if (target.getAttribute('style') === '') {\n        target.removeAttribute('style');\n      }\n      modifiedElementMap.delete(target);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {PressProps} from './usePress';\nimport React, {MutableRefObject} from 'react';\n\ninterface IPressResponderContext extends PressProps {\n  register(): void,\n  ref?: MutableRefObject<FocusableElement>\n}\n\nexport const PressResponderContext = React.createContext<IPressResponderContext>(null);\nPressResponderContext.displayName = 'PressResponderContext';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport {PressProps} from './usePress';\nimport {PressResponderContext} from './context';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\n\ninterface PressResponderProps extends PressProps {\n  children: ReactNode\n}\n\nexport const PressResponder = React.forwardRef(({children, ...props}: PressResponderProps, ref: RefObject<FocusableElement>) => {\n  let isRegistered = useRef(false);\n  let prevContext = useContext(PressResponderContext);\n  let context = mergeProps(prevContext || {}, {\n    ...props,\n    ref: ref || prevContext?.ref,\n    register() {\n      isRegistered.current = true;\n      if (prevContext) {\n        prevContext.register();\n      }\n    }\n  });\n\n  useSyncRef(prevContext, ref);\n\n  useEffect(() => {\n    if (!isRegistered.current) {\n      console.warn(\n        'A PressResponder was rendered without a pressable child. ' +\n        'Either call the usePress hook, or wrap your DOM node with <Pressable> component.'\n      );\n      isRegistered.current = true; // only warn once in strict mode.\n    }\n  }, []);\n\n  return (\n    <PressResponderContext.Provider value={context}>\n      {children}\n    </PressResponderContext.Provider>\n  );\n});\n\nexport function ClearPressResponder({children}: {children: ReactNode}) {\n  return (\n    <PressResponderContext.Provider value={undefined}>\n      {children}\n    </PressResponderContext.Provider>\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes, FocusableElement, FocusEvents} from '@react-types/shared';\nimport {FocusEvent, useCallback} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\nexport interface FocusProps<Target = FocusableElement> extends FocusEvents<Target> {\n  /** Whether the focus events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface FocusResult<Target = FocusableElement> {\n  /** Props to spread onto the target element. */\n  focusProps: DOMAttributes<Target>\n}\n\n/**\n * Handles focus events for the immediate target.\n * Focus events on child elements will be ignored.\n */\nexport function useFocus<Target extends FocusableElement = FocusableElement>(props: FocusProps<Target>): FocusResult<Target> {\n  let {\n    isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange\n  } = props;\n\n  const onBlur: FocusProps<Target>['onBlur'] = useCallback((e: FocusEvent<Target>) => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) {\n        onBlurProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(false);\n      }\n\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n\n\n  const onSyntheticFocus = useSyntheticBlurEvent<Target>(onBlur);\n\n  const onFocus: FocusProps<Target>['onFocus'] = useCallback((e: FocusEvent<Target>) => {\n    // Double check that document.activeElement actually matches e.target in case a previously chained\n    // focus handler already moved focus somewhere else.\n    if (e.target === e.currentTarget && document.activeElement === e.target) {\n      if (onFocusProp) {\n        onFocusProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(true);\n      }\n\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n\n  return {\n    focusProps: {\n      onFocus: (!isDisabled && (onFocusProp || onFocusChange || onBlurProp)) ? onFocus : undefined,\n      onBlur: (!isDisabled && (onBlurProp || onFocusChange)) ? onBlur : undefined\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent as ReactFocusEvent, useCallback, useRef} from 'react';\nimport {useEffectEvent, useLayoutEffect} from '@react-aria/utils';\n\nexport class SyntheticFocusEvent<Target = Element> implements ReactFocusEvent<Target> {\n  nativeEvent: FocusEvent;\n  target: EventTarget & Target;\n  currentTarget: EventTarget & Target;\n  relatedTarget: Element;\n  bubbles: boolean;\n  cancelable: boolean;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  timeStamp: number;\n  type: string;\n\n  constructor(type: string, nativeEvent: FocusEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target as EventTarget & Target;\n    this.currentTarget = nativeEvent.currentTarget as EventTarget & Target;\n    this.relatedTarget = nativeEvent.relatedTarget as Element;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n  isDefaultPrevented(): boolean {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault(): void {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation(): void {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped(): boolean {\n    return false;\n  }\n\n  persist() {}\n}\n\nexport function useSyntheticBlurEvent<Target = Element>(onBlur: (e: ReactFocusEvent<Target>) => void) {\n  let stateRef = useRef({\n    isFocused: false,\n    observer: null as MutationObserver\n  });\n\n  // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n\n  let dispatchBlur = useEffectEvent((e: SyntheticFocusEvent<Target>) => {\n    onBlur?.(e);\n  });\n\n  // This function is called during a React onFocus event.\n  return useCallback((e: ReactFocusEvent<Target>) => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (\n      e.target instanceof HTMLButtonElement ||\n      e.target instanceof HTMLInputElement ||\n      e.target instanceof HTMLTextAreaElement ||\n      e.target instanceof HTMLSelectElement\n    ) {\n      stateRef.current.isFocused = true;\n\n      let target = e.target;\n      let onBlurHandler = (e: FocusEvent) => {\n        stateRef.current.isFocused = false;\n\n        if (target.disabled) {\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          dispatchBlur(new SyntheticFocusEvent('blur', e));\n        }\n\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {once: true});\n\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          let relatedTargetEl = target === document.activeElement ? null : document.activeElement;\n          target.dispatchEvent(new FocusEvent('blur', {relatedTarget: relatedTargetEl}));\n          target.dispatchEvent(new FocusEvent('focusout', {bubbles: true, relatedTarget: relatedTargetEl}));\n        }\n      });\n\n      stateRef.current.observer.observe(target, {attributes: true, attributeFilter: ['disabled']});\n    }\n  }, [dispatchBlur]);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {isMac, isVirtualClick} from '@react-aria/utils';\nimport {useEffect, useState} from 'react';\nimport {useIsSSR} from '@react-aria/ssr';\n\nexport type Modality = 'keyboard' | 'pointer' | 'virtual';\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent;\ntype Handler = (modality: Modality, e: HandlerEvent) => void;\nexport type FocusVisibleHandler = (isFocusVisible: boolean) => void;\nexport interface FocusVisibleProps {\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusVisibleResult {\n  /** Whether keyboard focus is visible globally. */\n  isFocusVisible: boolean\n}\n\nlet currentModality = null;\nlet changeHandlers = new Set<Handler>();\nlet hasSetupGlobalListeners = false;\nlet hasEventBeforeFocus = false;\nlet hasBlurredWindowRecently = false;\n\n// Only Tab or Esc keys will make focus visible on text input elements\nconst FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction triggerChangeHandlers(modality: Modality, e: HandlerEvent) {\n  for (let handler of changeHandlers) {\n    handler(modality, e);\n  }\n}\n\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction isValidKey(e: KeyboardEvent) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || (!isMac() && e.altKey) || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\n\nfunction handleKeyboardEvent(e: KeyboardEvent) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(e)) {\n    currentModality = 'keyboard';\n    triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction handlePointerEvent(e: PointerEvent | MouseEvent) {\n  currentModality = 'pointer';\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    hasEventBeforeFocus = true;\n    triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction handleClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    currentModality = 'virtual';\n  }\n}\n\nfunction handleFocusEvent(e: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) {\n    return;\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    currentModality = 'virtual';\n    triggerChangeHandlers('virtual', e);\n  }\n\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\n\nfunction handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\n\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || hasSetupGlobalListeners) {\n    return;\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', handleKeyboardEvent, true);\n  document.addEventListener('keyup', handleKeyboardEvent, true);\n  document.addEventListener('click', handleClickEvent, true);\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener('focus', handleFocusEvent, true);\n  window.addEventListener('blur', handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', handlePointerEvent, true);\n    document.addEventListener('pointermove', handlePointerEvent, true);\n    document.addEventListener('pointerup', handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', handlePointerEvent, true);\n    document.addEventListener('mousemove', handlePointerEvent, true);\n    document.addEventListener('mouseup', handlePointerEvent, true);\n  }\n\n  hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') {\n    setupGlobalFocusEvents();\n  } else {\n    document.addEventListener('DOMContentLoaded', setupGlobalFocusEvents);\n  }\n}\n\n/**\n * If true, keyboard focus is visible.\n */\nexport function isFocusVisible(): boolean {\n  return currentModality !== 'pointer';\n}\n\nexport function getInteractionModality(): Modality {\n  return currentModality;\n}\n\nexport function setInteractionModality(modality: Modality) {\n  currentModality = modality;\n  triggerChangeHandlers(modality, null);\n}\n\n/**\n * Keeps state of the current modality.\n */\nexport function useInteractionModality(): Modality {\n  setupGlobalFocusEvents();\n\n  let [modality, setModality] = useState(currentModality);\n  useEffect(() => {\n    let handler = () => {\n      setModality(currentModality);\n    };\n\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, []);\n\n  return useIsSSR() ? null : modality;\n}\n\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\nfunction isKeyboardFocusEvent(isTextInput: boolean, modality: Modality, e: HandlerEvent) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\n/**\n * Manages focus visible state for the page, and subscribes individual components for updates.\n */\nexport function useFocusVisible(props: FocusVisibleProps = {}): FocusVisibleResult {\n  let {isTextInput, autoFocus} = props;\n  let [isFocusVisibleState, setFocusVisible] = useState(autoFocus || isFocusVisible());\n  useFocusVisibleListener((isFocusVisible) => {\n    setFocusVisible(isFocusVisible);\n  }, [isTextInput], {isTextInput});\n\n  return {isFocusVisible: isFocusVisibleState};\n}\n\n/**\n * Listens for trigger change and reports if focus is visible (i.e., modality is not pointer).\n */\nexport function useFocusVisibleListener(fn: FocusVisibleHandler, deps: ReadonlyArray<any>, opts?: {isTextInput?: boolean}): void {\n  setupGlobalFocusEvents();\n\n  useEffect(() => {\n    let handler = (modality: Modality, e: HandlerEvent) => {\n      if (!isKeyboardFocusEvent(opts?.isTextInput, modality, e)) {\n        return;\n      }\n      fn(isFocusVisible());\n    };\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {FocusEvent, useCallback, useRef} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\nexport interface FocusWithinProps {\n  /** Whether the focus within events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when the target element or a descendant receives focus. */\n  onFocusWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the target element and all descendants lose focus. */\n  onBlurWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the the focus within state changes. */\n  onFocusWithinChange?: (isFocusWithin: boolean) => void\n}\n\nexport interface FocusWithinResult {\n  /** Props to spread onto the target element. */\n  focusWithinProps: DOMAttributes\n}\n\n/**\n * Handles focus events for the target and its descendants.\n */\nexport function useFocusWithin(props: FocusWithinProps): FocusWithinResult {\n  let {\n    isDisabled,\n    onBlurWithin,\n    onFocusWithin,\n    onFocusWithinChange\n  } = props;\n  let state = useRef({\n    isFocusWithin: false\n  });\n\n  let onBlur = useCallback((e: FocusEvent) => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !(e.currentTarget as Element).contains(e.relatedTarget as Element)) {\n      state.current.isFocusWithin = false;\n\n      if (onBlurWithin) {\n        onBlurWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(false);\n      }\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n\n  let onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n  let onFocus = useCallback((e: FocusEvent) => {\n    // Double check that document.activeElement actually matches e.target in case a previously chained\n    // focus handler already moved focus somewhere else.\n    if (!state.current.isFocusWithin && document.activeElement === e.target) {\n      if (onFocusWithin) {\n        onFocusWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(true);\n      }\n\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n\n  if (isDisabled) {\n    return {\n      focusWithinProps: {\n        onFocus: null,\n        onBlur: null\n      }\n    };\n  }\n\n  return {\n    focusWithinProps: {\n      onFocus,\n      onBlur\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes, HoverEvents} from '@react-types/shared';\nimport {useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface HoverProps extends HoverEvents {\n  /** Whether the hover events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface HoverResult {\n  /** Props to spread on the target element. */\n  hoverProps: DOMAttributes,\n  isHovered: boolean\n}\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet globalIgnoreEmulatedMouseEvents = false;\nlet hoverCount = 0;\n\nfunction setGlobalIgnoreEmulatedMouseEvents() {\n  globalIgnoreEmulatedMouseEvents = true;\n\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') {\n    setGlobalIgnoreEmulatedMouseEvents();\n  }\n}\n\nfunction setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerup', handleGlobalPointerEvent);\n  } else {\n    document.addEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n  }\n\n  hoverCount++;\n  return () => {\n    hoverCount--;\n    if (hoverCount > 0) {\n      return;\n    }\n\n    if (typeof PointerEvent !== 'undefined') {\n      document.removeEventListener('pointerup', handleGlobalPointerEvent);\n    } else {\n      document.removeEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n    }\n  };\n}\n\n/**\n * Handles pointer hover interactions for an element. Normalizes behavior\n * across browsers and platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useHover(props: HoverProps): HoverResult {\n  let {\n    onHoverStart,\n    onHoverChange,\n    onHoverEnd,\n    isDisabled\n  } = props;\n\n  let [isHovered, setHovered] = useState(false);\n  let state = useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n\n  useEffect(setupGlobalTouchEvents, []);\n\n  let {hoverProps, triggerHoverEnd} = useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) {\n        return;\n      }\n\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n\n      if (onHoverStart) {\n        onHoverStart({\n          type: 'hoverstart',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(true);\n      }\n\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n\n      if (pointerType === 'touch' || !state.isHovered) {\n        return;\n      }\n\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) {\n        onHoverEnd({\n          type: 'hoverend',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(false);\n      }\n\n      setHovered(false);\n    };\n\n    let hoverProps: DOMAttributes = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = (e) => {\n        if (globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') {\n          return;\n        }\n\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, e.pointerType);\n        }\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = (e) => {\n        if (!state.ignoreEmulatedMouseEvents && !globalIgnoreEmulatedMouseEvents) {\n          triggerHoverStart(e, 'mouse');\n        }\n\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, 'mouse');\n        }\n      };\n    }\n    return {hoverProps, triggerHoverEnd};\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n\n  useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) {\n      triggerHoverEnd({currentTarget: state.target}, state.pointerType);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDisabled]);\n\n  return {\n    hoverProps,\n    isHovered\n  };\n}\n\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {RefObject, SyntheticEvent, useEffect, useRef} from 'react';\nimport {useEffectEvent} from '@react-aria/utils';\n\nexport interface InteractOutsideProps {\n  ref: RefObject<Element>,\n  onInteractOutside?: (e: SyntheticEvent) => void,\n  onInteractOutsideStart?: (e: SyntheticEvent) => void,\n  /** Whether the interact outside events should be disabled. */\n  isDisabled?: boolean\n}\n\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\nexport function useInteractOutside(props: InteractOutsideProps) {\n  let {ref, onInteractOutside, isDisabled, onInteractOutsideStart} = props;\n  let stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false\n  });\n\n  let onPointerDown = useEffectEvent((e: SyntheticEvent) => {\n    if (onInteractOutside && isValidEvent(e, ref)) {\n      if (onInteractOutsideStart) {\n        onInteractOutsideStart(e);\n      }\n      stateRef.current.isPointerDown = true;\n    }\n  });\n\n  let triggerInteractOutside = useEffectEvent((e: SyntheticEvent) => {\n    if (onInteractOutside) {\n      onInteractOutside(e);\n    }\n  });\n\n  useEffect(() => {\n    let state = stateRef.current;\n    if (isDisabled) {\n      return;\n    }\n\n    // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = (e) => {\n        if (state.isPointerDown && isValidEvent(e, ref)) {\n          triggerInteractOutside(e);\n        }\n        state.isPointerDown = false;\n      };\n\n      // changing these to capture phase fixed combobox\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = (e) => {\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n        } else if (state.isPointerDown && isValidEvent(e, ref)) {\n          triggerInteractOutside(e);\n        }\n        state.isPointerDown = false;\n      };\n\n      let onTouchEnd = (e) => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.isPointerDown && isValidEvent(e, ref)) {\n          triggerInteractOutside(e);\n        }\n        state.isPointerDown = false;\n      };\n\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, isDisabled, onPointerDown, triggerInteractOutside]);\n}\n\nfunction isValidEvent(event, ref) {\n  if (event.button > 0) {\n    return false;\n  }\n\n  if (event.target) {\n    // if the event target is no longer in the document, ignore\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) {\n      return false;\n    }\n\n    // If the target is within a top layer element (e.g. toasts), ignore.\n    if (event.target.closest('[data-react-aria-top-layer]')) {\n      return false;\n    }\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createEventHandler} from './createEventHandler';\nimport {DOMAttributes, KeyboardEvents} from '@react-types/shared';\n\nexport interface KeyboardProps extends KeyboardEvents {\n  /** Whether the keyboard events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface KeyboardResult {\n  /** Props to spread onto the target element. */\n  keyboardProps: DOMAttributes\n}\n\n/**\n * Handles keyboard interactions for a focusable element.\n */\nexport function useKeyboard(props: KeyboardProps): KeyboardResult {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: createEventHandler(props.onKeyDown),\n      onKeyUp: createEventHandler(props.onKeyUp)\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BaseEvent} from '@react-types/shared';\nimport {SyntheticEvent} from 'react';\n\n/**\n * This function wraps a React event handler to make stopPropagation the default, and support continuePropagation instead.\n */\nexport function createEventHandler<T extends SyntheticEvent>(handler: (e: BaseEvent<T>) => void): (e: T) => void {\n  if (!handler) {\n    return;\n  }\n\n  let shouldStopPropagation = true;\n  return (e: T) => {\n    let event: BaseEvent<T> = {\n      ...e,\n      preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    };\n\n    handler(event);\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {disableTextSelection, restoreTextSelection}  from './textSelection';\nimport {DOMAttributes, MoveEvents, PointerType} from '@react-types/shared';\nimport React, {useMemo, useRef} from 'react';\nimport {useEffectEvent, useGlobalListeners} from '@react-aria/utils';\n\nexport interface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: DOMAttributes\n}\n\ninterface EventBase {\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: MoveEvents): MoveResult {\n  let {onMoveStart, onMove, onMoveEnd} = props;\n\n  let state = useRef<{\n    didMove: boolean,\n    lastPosition: {pageX: number, pageY: number} | null,\n    id: number | null\n  }>({didMove: false, lastPosition: null, id: null});\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let move = useEffectEvent((originalEvent: EventBase, pointerType: PointerType, deltaX: number, deltaY: number) => {\n    if (deltaX === 0 && deltaY === 0) {\n      return;\n    }\n\n    if (!state.current.didMove) {\n      state.current.didMove = true;\n      onMoveStart?.({\n        type: 'movestart',\n        pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    }\n    onMove({\n      type: 'move',\n      pointerType,\n      deltaX: deltaX,\n      deltaY: deltaY,\n      shiftKey: originalEvent.shiftKey,\n      metaKey: originalEvent.metaKey,\n      ctrlKey: originalEvent.ctrlKey,\n      altKey: originalEvent.altKey\n    });\n  });\n\n  let end = useEffectEvent((originalEvent: EventBase, pointerType: PointerType) => {\n    restoreTextSelection();\n    if (state.current.didMove) {\n      onMoveEnd?.({\n        type: 'moveend',\n        pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    }\n  });\n\n  let moveProps = useMemo(() => {\n    let moveProps: DOMAttributes = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = (e: MouseEvent) => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n      let onMouseUp = (e: MouseEvent) => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          let {pageX, pageY} = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX, pageY};\n        }\n      };\n      let onTouchEnd = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = (e: React.TouchEvent) => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let {pageX, pageY, identifier} = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {pageX, pageY};\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = (e: React.PointerEvent) => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e: EventBase, deltaX: number, deltaY: number) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = (e) => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, addGlobalListener, removeGlobalListener, move, end]);\n\n  return {moveProps};\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RefObject, useCallback} from 'react';\nimport {ScrollEvents} from '@react-types/shared';\nimport {useEvent} from '@react-aria/utils';\n\nexport interface ScrollWheelProps extends ScrollEvents {\n  /** Whether the scroll listener should be disabled. */\n  isDisabled?: boolean\n}\n\n// scroll wheel needs to be added not passively so it's cancelable, small helper hook to remember that\nexport function useScrollWheel(props: ScrollWheelProps, ref: RefObject<HTMLElement>): void {\n  let {onScroll, isDisabled} = props;\n  let onScrollHandler = useCallback((e) => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) {\n      return;\n    }\n\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (onScroll) {\n      onScroll({deltaX: e.deltaX, deltaY: e.deltaY});\n    }\n  }, [onScroll]);\n\n  useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, LongPressEvent} from '@react-types/shared';\nimport {mergeProps, useDescription, useGlobalListeners} from '@react-aria/utils';\nimport {usePress} from './usePress';\nimport {useRef} from 'react';\n\nexport interface LongPressProps {\n  /** Whether long press events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when a long press interaction starts. */\n  onLongPressStart?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when a long press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onLongPressEnd?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when the threshold time is met while\n   * the press is over the target.\n   */\n  onLongPress?: (e: LongPressEvent) => void,\n  /**\n   * The amount of time in milliseconds to wait before triggering a long press.\n   * @default 500ms\n   */\n  threshold?: number,\n  /**\n   * A description for assistive techology users indicating that a long press\n   * action is available, e.g. \"Long press to open menu\".\n   */\n  accessibilityDescription?: string\n}\n\nexport interface LongPressResult {\n  /** Props to spread on the target element. */\n  longPressProps: DOMAttributes\n}\n\nconst DEFAULT_THRESHOLD = 500;\n\n/**\n * Handles long press interactions across mouse and touch devices. Supports a customizable time threshold,\n * accessibility description, and normalizes behavior across browsers and devices.\n */\nexport function useLongPress(props: LongPressProps): LongPressResult {\n  let {\n    isDisabled,\n    onLongPressStart,\n    onLongPressEnd,\n    onLongPress,\n    threshold = DEFAULT_THRESHOLD,\n    accessibilityDescription\n  } = props;\n\n  const timeRef = useRef(null);\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let {pressProps} = usePress({\n    isDisabled,\n    onPressStart(e) {\n      e.continuePropagation();\n      if (e.pointerType === 'mouse' || e.pointerType === 'touch') {\n        if (onLongPressStart) {\n          onLongPressStart({\n            ...e,\n            type: 'longpressstart'\n          });\n        }\n\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent('pointercancel', {bubbles: true}));\n          if (onLongPress) {\n            onLongPress({\n              ...e,\n              type: 'longpress'\n            });\n          }\n          timeRef.current = null;\n        }, threshold);\n\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e.target, 'contextmenu', onContextMenu, {once: true});\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {once: true});\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) {\n        clearTimeout(timeRef.current);\n      }\n\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) {\n        onLongPressEnd({\n          ...e,\n          type: 'longpressend'\n        });\n      }\n    }\n  });\n\n  let descriptionProps = useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n\n  return {\n    longPressProps: mergeProps(pressProps, descriptionProps)\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}