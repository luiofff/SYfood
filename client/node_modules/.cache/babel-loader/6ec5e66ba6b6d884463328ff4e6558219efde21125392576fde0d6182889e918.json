{"ast":null,"code":"import { block, blockNew, modsClassName } from '../utils/cn';\nimport { ROOT_CLASS_NAME } from './constants';\nconst b = block(ROOT_CLASS_NAME);\nconst bNew = blockNew(ROOT_CLASS_NAME);\nconst rootClassName = b();\nconst rootNewClassName = bNew();\nconst defaultModifiers = {\n  'native-scrollbar': false\n};\nexport function updateBodyClassName(newTheme, modifiers, customRootClassName) {\n  const bodyEl = document.body;\n  if (!bodyEl.classList.contains(rootClassName)) {\n    bodyEl.classList.add(rootClassName);\n  }\n  if (!bodyEl.classList.contains(rootNewClassName)) {\n    bodyEl.classList.add(rootNewClassName);\n  }\n  if (customRootClassName) {\n    const parsedCustomRootClassNames = customRootClassName.split(' ');\n    parsedCustomRootClassNames.forEach(cls => {\n      if (cls && !bodyEl.classList.contains(cls)) {\n        bodyEl.classList.add(cls);\n      }\n    });\n  }\n  [...bodyEl.classList].forEach(cls => {\n    if (cls.startsWith(modsClassName(b({\n      theme: true\n    })))) {\n      bodyEl.classList.remove(cls);\n    }\n    if (cls.startsWith(modsClassName(bNew({\n      theme: true\n    })))) {\n      bodyEl.classList.remove(cls);\n    }\n  });\n  bodyEl.classList.add(modsClassName(b({\n    theme: newTheme\n  })));\n  bodyEl.classList.add(modsClassName(bNew({\n    theme: newTheme\n  })));\n  for (const [key, value] of Object.entries(Object.assign(Object.assign({}, defaultModifiers), modifiers))) {\n    bodyEl.classList.toggle(modsClassName(b({\n      [key]: true\n    })), value);\n    bodyEl.classList.toggle(modsClassName(bNew({\n      [key]: true\n    })), value);\n  }\n}","map":{"version":3,"names":["block","blockNew","modsClassName","ROOT_CLASS_NAME","b","bNew","rootClassName","rootNewClassName","defaultModifiers","updateBodyClassName","newTheme","modifiers","customRootClassName","bodyEl","document","body","classList","contains","add","parsedCustomRootClassNames","split","forEach","cls","startsWith","theme","remove","key","value","Object","entries","assign","toggle"],"sources":["/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@gravity-ui/uikit/build/esm/components/theme/updateBodyClassName.js"],"sourcesContent":["import { block, blockNew, modsClassName } from '../utils/cn';\nimport { ROOT_CLASS_NAME } from './constants';\nconst b = block(ROOT_CLASS_NAME);\nconst bNew = blockNew(ROOT_CLASS_NAME);\nconst rootClassName = b();\nconst rootNewClassName = bNew();\nconst defaultModifiers = {\n    'native-scrollbar': false,\n};\nexport function updateBodyClassName(newTheme, modifiers, customRootClassName) {\n    const bodyEl = document.body;\n    if (!bodyEl.classList.contains(rootClassName)) {\n        bodyEl.classList.add(rootClassName);\n    }\n    if (!bodyEl.classList.contains(rootNewClassName)) {\n        bodyEl.classList.add(rootNewClassName);\n    }\n    if (customRootClassName) {\n        const parsedCustomRootClassNames = customRootClassName.split(' ');\n        parsedCustomRootClassNames.forEach((cls) => {\n            if (cls && !bodyEl.classList.contains(cls)) {\n                bodyEl.classList.add(cls);\n            }\n        });\n    }\n    [...bodyEl.classList].forEach((cls) => {\n        if (cls.startsWith(modsClassName(b({ theme: true })))) {\n            bodyEl.classList.remove(cls);\n        }\n        if (cls.startsWith(modsClassName(bNew({ theme: true })))) {\n            bodyEl.classList.remove(cls);\n        }\n    });\n    bodyEl.classList.add(modsClassName(b({ theme: newTheme })));\n    bodyEl.classList.add(modsClassName(bNew({ theme: newTheme })));\n    for (const [key, value] of Object.entries(Object.assign(Object.assign({}, defaultModifiers), modifiers))) {\n        bodyEl.classList.toggle(modsClassName(b({ [key]: true })), value);\n        bodyEl.classList.toggle(modsClassName(bNew({ [key]: true })), value);\n    }\n}\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,QAAQ,EAAEC,aAAa,QAAQ,aAAa;AAC5D,SAASC,eAAe,QAAQ,aAAa;AAC7C,MAAMC,CAAC,GAAGJ,KAAK,CAACG,eAAe,CAAC;AAChC,MAAME,IAAI,GAAGJ,QAAQ,CAACE,eAAe,CAAC;AACtC,MAAMG,aAAa,GAAGF,CAAC,CAAC,CAAC;AACzB,MAAMG,gBAAgB,GAAGF,IAAI,CAAC,CAAC;AAC/B,MAAMG,gBAAgB,GAAG;EACrB,kBAAkB,EAAE;AACxB,CAAC;AACD,OAAO,SAASC,mBAAmBA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,mBAAmB,EAAE;EAC1E,MAAMC,MAAM,GAAGC,QAAQ,CAACC,IAAI;EAC5B,IAAI,CAACF,MAAM,CAACG,SAAS,CAACC,QAAQ,CAACX,aAAa,CAAC,EAAE;IAC3CO,MAAM,CAACG,SAAS,CAACE,GAAG,CAACZ,aAAa,CAAC;EACvC;EACA,IAAI,CAACO,MAAM,CAACG,SAAS,CAACC,QAAQ,CAACV,gBAAgB,CAAC,EAAE;IAC9CM,MAAM,CAACG,SAAS,CAACE,GAAG,CAACX,gBAAgB,CAAC;EAC1C;EACA,IAAIK,mBAAmB,EAAE;IACrB,MAAMO,0BAA0B,GAAGP,mBAAmB,CAACQ,KAAK,CAAC,GAAG,CAAC;IACjED,0BAA0B,CAACE,OAAO,CAAEC,GAAG,IAAK;MACxC,IAAIA,GAAG,IAAI,CAACT,MAAM,CAACG,SAAS,CAACC,QAAQ,CAACK,GAAG,CAAC,EAAE;QACxCT,MAAM,CAACG,SAAS,CAACE,GAAG,CAACI,GAAG,CAAC;MAC7B;IACJ,CAAC,CAAC;EACN;EACA,CAAC,GAAGT,MAAM,CAACG,SAAS,CAAC,CAACK,OAAO,CAAEC,GAAG,IAAK;IACnC,IAAIA,GAAG,CAACC,UAAU,CAACrB,aAAa,CAACE,CAAC,CAAC;MAAEoB,KAAK,EAAE;IAAK,CAAC,CAAC,CAAC,CAAC,EAAE;MACnDX,MAAM,CAACG,SAAS,CAACS,MAAM,CAACH,GAAG,CAAC;IAChC;IACA,IAAIA,GAAG,CAACC,UAAU,CAACrB,aAAa,CAACG,IAAI,CAAC;MAAEmB,KAAK,EAAE;IAAK,CAAC,CAAC,CAAC,CAAC,EAAE;MACtDX,MAAM,CAACG,SAAS,CAACS,MAAM,CAACH,GAAG,CAAC;IAChC;EACJ,CAAC,CAAC;EACFT,MAAM,CAACG,SAAS,CAACE,GAAG,CAAChB,aAAa,CAACE,CAAC,CAAC;IAAEoB,KAAK,EAAEd;EAAS,CAAC,CAAC,CAAC,CAAC;EAC3DG,MAAM,CAACG,SAAS,CAACE,GAAG,CAAChB,aAAa,CAACG,IAAI,CAAC;IAAEmB,KAAK,EAAEd;EAAS,CAAC,CAAC,CAAC,CAAC;EAC9D,KAAK,MAAM,CAACgB,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACD,MAAM,CAACE,MAAM,CAACF,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,EAAEtB,gBAAgB,CAAC,EAAEG,SAAS,CAAC,CAAC,EAAE;IACtGE,MAAM,CAACG,SAAS,CAACe,MAAM,CAAC7B,aAAa,CAACE,CAAC,CAAC;MAAE,CAACsB,GAAG,GAAG;IAAK,CAAC,CAAC,CAAC,EAAEC,KAAK,CAAC;IACjEd,MAAM,CAACG,SAAS,CAACe,MAAM,CAAC7B,aAAa,CAACG,IAAI,CAAC;MAAE,CAACqB,GAAG,GAAG;IAAK,CAAC,CAAC,CAAC,EAAEC,KAAK,CAAC;EACxE;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}