{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React from 'react';\nimport _memoize from 'lodash/memoize';\nimport { ClipboardButton } from '../../../ClipboardButton';\nimport { block } from '../../../utils/cn';\nimport { getComponentName } from '../../../utils/getComponentName';\nimport { Table } from '../../Table';\nimport './withTableCopy.css';\nconst b = block('table');\nexport function withTableCopy(TableComponent) {\n  var _a;\n  const componentName = getComponentName(TableComponent);\n  const displayName = \"withTableCopy(\".concat(componentName, \")\");\n  return _a = class extends React.Component {\n    constructor() {\n      super(...arguments);\n      // eslint-disable-next-line @typescript-eslint/member-ordering\n      this.enhanceColumns = _memoize(columns => {\n        return columns.map(column => {\n          const meta = column.meta;\n          if (!meta || !meta.copy) {\n            return column;\n          }\n          return Object.assign(Object.assign({}, column), {\n            template: (item, index) => {\n              const originContent = Table.getBodyCellContent(Object.assign(Object.assign({}, column), {\n                placeholder: ''\n              }), item, index);\n              if (!originContent) {\n                return originContent;\n              }\n              let copyText;\n              if (typeof meta.copy === 'function') {\n                copyText = String(meta.copy(item, index));\n              } else if (typeof originContent === 'string' || typeof originContent === 'number') {\n                copyText = String(originContent);\n              }\n              if (!copyText) {\n                return originContent;\n              }\n              return React.createElement(\"div\", {\n                className: b('copy')\n              }, React.createElement(\"div\", {\n                className: b('copy-content')\n              }, originContent), React.createElement(\"div\", {\n                className: b('copy-button')\n              }, React.createElement(ClipboardButton, {\n                text: copyText,\n                size: 14\n              })));\n            }\n          });\n        });\n      });\n      // eslint-disable-next-line @typescript-eslint/member-ordering\n      this.enhanceOnRowClick = _memoize(onRowClick => {\n        if (!onRowClick) {\n          return onRowClick;\n        }\n        return (item, index, event) => {\n          const buttonClassName = b('copy-button');\n          if (\n          // @ts-ignore\n          event.nativeEvent.target.matches(\".\".concat(buttonClassName, \", .\").concat(buttonClassName, \" *\"))) {\n            return undefined;\n          }\n          return onRowClick(item, index, event);\n        };\n      });\n    }\n    render() {\n      const _a = this.props,\n        {\n          columns,\n          onRowClick\n        } = _a,\n        restTableProps = __rest(_a, [\"columns\", \"onRowClick\"]);\n      return React.createElement(TableComponent, Object.assign({}, restTableProps, {\n        columns: this.enhanceColumns(columns),\n        onRowClick: this.enhanceOnRowClick(onRowClick)\n      }));\n    }\n  }, _a.displayName = displayName, _a;\n}","map":{"version":3,"names":["__rest","React","_memoize","ClipboardButton","block","getComponentName","Table","b","withTableCopy","TableComponent","_a","componentName","displayName","concat","Component","constructor","arguments","enhanceColumns","columns","map","column","meta","copy","Object","assign","template","item","index","originContent","getBodyCellContent","placeholder","copyText","String","createElement","className","text","size","enhanceOnRowClick","onRowClick","event","buttonClassName","nativeEvent","target","matches","undefined","render","props","restTableProps"],"sources":["/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableCopy/withTableCopy.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport React from 'react';\nimport _memoize from 'lodash/memoize';\nimport { ClipboardButton } from '../../../ClipboardButton';\nimport { block } from '../../../utils/cn';\nimport { getComponentName } from '../../../utils/getComponentName';\nimport { Table } from '../../Table';\nimport './withTableCopy.css';\nconst b = block('table');\nexport function withTableCopy(TableComponent) {\n    var _a;\n    const componentName = getComponentName(TableComponent);\n    const displayName = `withTableCopy(${componentName})`;\n    return _a = class extends React.Component {\n            constructor() {\n                super(...arguments);\n                // eslint-disable-next-line @typescript-eslint/member-ordering\n                this.enhanceColumns = _memoize((columns) => {\n                    return columns.map((column) => {\n                        const meta = column.meta;\n                        if (!meta || !meta.copy) {\n                            return column;\n                        }\n                        return Object.assign(Object.assign({}, column), { template: (item, index) => {\n                                const originContent = Table.getBodyCellContent(Object.assign(Object.assign({}, column), { placeholder: '' }), item, index);\n                                if (!originContent) {\n                                    return originContent;\n                                }\n                                let copyText;\n                                if (typeof meta.copy === 'function') {\n                                    copyText = String(meta.copy(item, index));\n                                }\n                                else if (typeof originContent === 'string' ||\n                                    typeof originContent === 'number') {\n                                    copyText = String(originContent);\n                                }\n                                if (!copyText) {\n                                    return originContent;\n                                }\n                                return (React.createElement(\"div\", { className: b('copy') },\n                                    React.createElement(\"div\", { className: b('copy-content') }, originContent),\n                                    React.createElement(\"div\", { className: b('copy-button') },\n                                        React.createElement(ClipboardButton, { text: copyText, size: 14 }))));\n                            } });\n                    });\n                });\n                // eslint-disable-next-line @typescript-eslint/member-ordering\n                this.enhanceOnRowClick = _memoize((onRowClick) => {\n                    if (!onRowClick) {\n                        return onRowClick;\n                    }\n                    return (item, index, event) => {\n                        const buttonClassName = b('copy-button');\n                        if (\n                        // @ts-ignore\n                        event.nativeEvent.target.matches(`.${buttonClassName}, .${buttonClassName} *`)) {\n                            return undefined;\n                        }\n                        return onRowClick(item, index, event);\n                    };\n                });\n            }\n            render() {\n                const _a = this.props, { columns, onRowClick } = _a, restTableProps = __rest(_a, [\"columns\", \"onRowClick\"]);\n                return (React.createElement(TableComponent, Object.assign({}, restTableProps, { columns: this.enhanceColumns(columns), onRowClick: this.enhanceOnRowClick(onRowClick) })));\n            }\n        },\n        _a.displayName = displayName,\n        _a;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}