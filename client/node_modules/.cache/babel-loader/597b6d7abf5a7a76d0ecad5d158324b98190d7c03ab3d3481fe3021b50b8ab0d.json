{"ast":null,"code":"import { useMemo as $1OoTj$useMemo, useCallback as $1OoTj$useCallback, useEffect as $1OoTj$useEffect } from \"react\";\nimport { useMultipleSelectionState as $1OoTj$useMultipleSelectionState, SelectionManager as $1OoTj$SelectionManager } from \"@react-stately/selection\";\nimport { useCollection as $1OoTj$useCollection } from \"@react-stately/collections\";\nimport { useControlledState as $1OoTj$useControlledState } from \"@react-stately/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $05ca4cd7c4a5a999$export$863faf230ee2118a {\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n  get size() {\n    return this.keyMap.size;\n  }\n  getKeys() {\n    return this.keyMap.keys();\n  }\n  getKeyBefore(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n  getKeyAfter(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n  getFirstKey() {\n    return this.firstKey;\n  }\n  getLastKey() {\n    return this.lastKey;\n  }\n  getItem(key) {\n    return this.keyMap.get(key);\n  }\n  at(idx) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n  constructor(nodes, {\n    expandedKeys: expandedKeys\n  } = {}) {\n    this.keyMap = new Map();\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n    let visit = node => {\n      this.keyMap.set(node.key, node);\n      if (node.childNodes && (node.type === \"section\" || expandedKeys.has(node.key))) for (let child of node.childNodes) visit(child);\n    };\n    for (let node of nodes) visit(node);\n    let last;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n      if (node.type === \"item\") node.index = index++;\n      last = node;\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n    this.lastKey = last === null || last === void 0 ? void 0 : last.key;\n  }\n}\nfunction $875d6693e12af071$export$728d6ba534403756(props) {\n  let [expandedKeys, setExpandedKeys] = (0, $1OoTj$useControlledState)(props.expandedKeys ? new Set(props.expandedKeys) : undefined, props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(), props.onExpandedChange);\n  let selectionState = (0, $1OoTj$useMultipleSelectionState)(props);\n  let disabledKeys = (0, $1OoTj$useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);\n  let tree = (0, $1OoTj$useCollection)(props, (0, $1OoTj$useCallback)(nodes => new (0, $05ca4cd7c4a5a999$export$863faf230ee2118a)(nodes, {\n    expandedKeys: expandedKeys\n  }), [expandedKeys]), null);\n  // Reset focused key if that item is deleted from the collection.\n  (0, $1OoTj$useEffect)(() => {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tree, selectionState.focusedKey]);\n  let onToggle = key => {\n    setExpandedKeys($875d6693e12af071$var$toggleKey(expandedKeys, key));\n  };\n  return {\n    collection: tree,\n    expandedKeys: expandedKeys,\n    disabledKeys: disabledKeys,\n    toggleKey: onToggle,\n    setExpandedKeys: setExpandedKeys,\n    selectionManager: new (0, $1OoTj$SelectionManager)(tree, selectionState)\n  };\n}\nfunction $875d6693e12af071$var$toggleKey(set, key) {\n  let res = new Set(set);\n  if (res.has(key)) res.delete(key);else res.add(key);\n  return res;\n}\nexport { $875d6693e12af071$export$728d6ba534403756 as useTreeState, $05ca4cd7c4a5a999$export$863faf230ee2118a as TreeCollection };","map":{"version":3,"names":["$05ca4cd7c4a5a999$export$863faf230ee2118a","Symbol","iterator","iterable","size","keyMap","getKeys","keys","getKeyBefore","key","node","get","prevKey","getKeyAfter","nextKey","getFirstKey","firstKey","getLastKey","lastKey","getItem","at","idx","constructor","nodes","expandedKeys","Map","Set","visit","set","childNodes","type","has","child","last","index","undefined","$875d6693e12af071$export$728d6ba534403756","props","setExpandedKeys","$1OoTj$useControlledState","defaultExpandedKeys","onExpandedChange","selectionState","$1OoTj$useMultipleSelectionState","disabledKeys","$1OoTj$useMemo","tree","$1OoTj$useCollection","$1OoTj$useCallback","$1OoTj$useEffect","focusedKey","setFocusedKey","onToggle","$875d6693e12af071$var$toggleKey","collection","toggleKey","selectionManager","$1OoTj$SelectionManager","res","delete","add"],"sources":["/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-stately/tree/dist/packages/@react-stately/tree/src/index.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-stately/tree/dist/packages/@react-stately/tree/src/useTreeState.ts","/Users/ilaulanov/Documents/SynopsisYard/SYfood/client/node_modules/@react-stately/tree/dist/packages/@react-stately/tree/src/TreeCollection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport type {TreeProps, TreeState} from './useTreeState';\nexport {useTreeState} from './useTreeState';\nexport {TreeCollection} from './TreeCollection';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionStateBase, Expandable, MultipleSelection, Node} from '@react-types/shared';\nimport {Key, useCallback, useEffect, useMemo} from 'react';\nimport {SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {TreeCollection} from './TreeCollection';\nimport {useCollection} from '@react-stately/collections';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface TreeProps<T> extends CollectionStateBase<T>, Expandable, MultipleSelection {}\nexport interface TreeState<T> {\n  /** A collection of items in the tree. */\n  readonly collection: Collection<Node<T>>,\n\n  /** A set of keys for items that are disabled. */\n  readonly disabledKeys: Set<Key>,\n\n  /** A set of keys for items that are expanded. */\n  readonly expandedKeys: Set<Key>,\n\n  /** Toggles the expanded state for an item by its key. */\n  toggleKey(key: Key): void,\n\n  /** Replaces the set of expanded keys. */\n  setExpandedKeys(keys: Set<Key>): void,\n\n  /** A selection manager to read and update multiple selection state. */\n  readonly selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n */\nexport function useTreeState<T extends object>(props: TreeProps<T>): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? new Set(props.expandedKeys) : undefined,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange\n  );\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let tree = useCollection(props, useCallback(nodes => new TreeCollection(nodes, {expandedKeys}), [expandedKeys]), null);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tree, selectionState.focusedKey]);\n\n  let onToggle = (key: Key) => {\n    setExpandedKeys(toggleKey(expandedKeys, key));\n  };\n\n  return {\n    collection: tree,\n    expandedKeys,\n    disabledKeys,\n    toggleKey: onToggle,\n    setExpandedKeys,\n    selectionManager: new SelectionManager(tree, selectionState)\n  };\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>, {expandedKeys}: {expandedKeys?: Set<Key>} = {}) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}